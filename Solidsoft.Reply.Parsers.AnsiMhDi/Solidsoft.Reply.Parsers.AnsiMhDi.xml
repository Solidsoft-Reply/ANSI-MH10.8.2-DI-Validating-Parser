<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Solidsoft.Reply.Parsers.AnsiMhDi</name>
    </assembly>
    <members>
        <member name="T:Solidsoft.Reply.Parsers.AnsiMhDi.Category">
            <summary>
              Defined ASC MH10.8.2 categories.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.Category.SpecialCharactersEmployedAsDataIdentifiers">
            <summary>
              CATEGORY 0 Special Characters Employed as Data Identifiers
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.Category.Reserved1">
            <summary>
              CATEGORY 1 Reserved
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.Category.ContainerInformation">
            <summary>
              CATEGORY 2 Container Information
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.Category.FieldContinuation">
            <summary>
              CATEGORY 3 Field Continuation
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.Category.Date">
            <summary>
              CATEGORY 4 Date
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.Category.EnvironmentalFactors">
            <summary>
              CATEGORY 5 Environmental Factors
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.Category.Looping">
            <summary>
              CATEGORY 6 Looping
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.Category.Reserved">
            <summary>
              CATEGORY 7 Reserved
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.Category.HumanResources">
            <summary>
              CATEGORY 8 Human Resources
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.Category.Reserved9">
            <summary>
              CATEGORY 9 Reserved
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.Category.LicencePlate">
            <summary>
              CATEGORY 10 License Plate
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.Category.TransactionReference">
            <summary>
              CATEGORY 11 Transaction Reference
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.Category.LocationReference">
            <summary>
              CATEGORY 12 Location Reference
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.Category.MaintenanceCodes">
            <summary>
              CATEGORY 13 Maintenance Codes
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.Category.IndustryAssignedCodes">
            <summary>
              CATEGORY 14 Industry Assigned Codes
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.Category.Reserved15">
            <summary>
              CATEGORY 15 Reserved
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.Category.ItemInformation">
            <summary>
              CATEGORY 16 Item Information
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.Category.Measurement">
            <summary>
              CATEGORY 17 Measurement
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.Category.Miscellaneous">
            <summary>
              CATEGORY 18 Miscellaneous
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.Category.TraceabilityNumberForAnEntity">
            <summary>
              CATEGORY 19 Traceability Number for an Entity
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.Category.TraceabilityNumberForGroupsOfEntities">
            <summary>
              CATEGORY 20 Traceability Number for Groups of Entities
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.Category.UpuMh10Sc8Wg2AgreedUponCodes">
            <summary>
              CATEGORY 21 UPU / MH 10/SC8/WG2 Agreed Upon Codes
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.Category.PartyToTheTransaction">
            <summary>
              CATEGORY 22 Party to the Transaction
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.Category.ActivityReference">
            <summary>
              CATEGORY 23 Activity Reference
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.Category.Reserved24">
            <summary>
              CATEGORY 24 Reserved
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.Category.InternalApplications">
            <summary>
              CATEGORY 25 Internal Applications
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.Category.MutuallyDefined">
            <summary>
              CATEGORY 26 Mutually Defined
            </summary>
        </member>
        <member name="T:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier">
            <summary>
              ASC MH10.8 0 Data Identifiers.
            </summary>
            <remarks>
              Flag characters not assigned or controlled by ANSI/MH10.8. The usage of any alphabetic,
              numeric, or special character in a leading position (as a "Data Identifier or Application
              Identifier") not defined herein is reserved for future assignment by the body controlling
              these guidelines.
            </remarks>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.Unrecognised">
            <summary>
              Unrecognised entity.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.Plus">
            <summary>
              The plus character.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.Ampersand">
            <summary>
              The ampersand character.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.Equal">
            <summary>
              The equal character.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.Func1">
            <summary>
              The FUNCTION 1 character.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.Isoiec15434Preamble">
            <summary>
              The ISO.IEC 15434 preamble characters.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.Hyphen">
            <summary>
              The hyphen character.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.ExclamationMark">
            <summary>
              The exclamation mark character.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.ContainerType">
            <summary>
              The container type.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.ReturnableContainer">
            <summary>
              The returnable container.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.GasCylinderContainer">
            <summary>
              The gas cylinder container.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.MotorFreightTransportEquipment">
            <summary>
              The motor freight transport equipment.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.Scac">
            <summary>
              The SCAC.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.ReceptacleAsset">
            <summary>
              The receptacle asset.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.ContainerSerial">
            <summary>
              The container serial.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.ReturnableContainerOwner">
            <summary>
              The returnable container owner.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.ContainerSize">
            <summary>
              The container size.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.ContainerOwnership">
            <summary>
              The container ownership.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.Van">
            <summary>
              The van.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.VanCheckDigit">
            <summary>
              The van check digit.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.Container">
            <summary>
              The container.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.TagStatus">
            <summary>
              The tag status.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.DangerousCargoClass">
            <summary>
              The dangerous cargo class.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.DangerousGoods">
            <summary>
              The dangerous goods.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.TransportationSubject">
            <summary>
              The transportation subject.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.VesselRegistration">
            <summary>
              The vessel registration.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.Voyage">
            <summary>
              The voyage.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.VesselCountry">
            <summary>
              The vessel country.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.ElectronicSeal">
            <summary>
              The electronic seal.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.Entry">
            <summary>
              The entry.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.Surety">
            <summary>
              The surety.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.ForeignPortOfLading">
            <summary>
              The foreign port of lading.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.IacCinRtiSerial">
            <summary>
              The party to transaction.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.UniqueReturnableTransportItem">
            <summary>
              The unique returnable transport item.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.LlcRtiAsset">
            <summary>
              The LLC RTI asset.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.SlcRtiAsset">
            <summary>
              The SLC RTI asset.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.RpiIdentifier">
            <summary>
              The RPI identifier.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.PackagingItem">
            <summary>
              The packaging item.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.Packaging">
            <summary>
              The packaging.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.Rpi">
            <summary>
              The RPI.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.CustomerItemCodeCont">
            <summary>
              The customer item code continuation.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.SupplierTraceabilityCodeCont">
            <summary>
              The supplier traceability code continuation.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.SupplierFreeTextCont">
            <summary>
              The supplier free text continuation.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.FreeTextCont">
            <summary>
              The free text continuation.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.TransactionReferenceCont">
            <summary>
              The transaction reference continuation.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.SupplierItemCodeCont">
            <summary>
              The supplier item code continuation.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.DateYyMmDd">
            <summary>
              The date YYMMDD.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.DateDdMmYy">
            <summary>
              The date DDMMYY.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.DateMmDdYy">
            <summary>
              The date MMDDYY.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.DateYdddJulian">
            <summary>
              The date YDDD julian.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.DateYyDddJulian">
            <summary>
              The date YYDDD julian.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.DateAndTypeYyMmDd">
            <summary>
              The date and type YYMMDD.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.DateAndTypeYyyyMmDd">
            <summary>
              The date and type YYYYMMDD.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.MonthMmYy">
            <summary>
              The month MMYY.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.EventDateAndTime">
            <summary>
              The event date and time.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.Date">
            <summary>
              The date.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.WeekYyWw">
            <summary>
              The week YYWW.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.WeekYyyyWw">
            <summary>
              The week YYYYWW.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.DateYyyyMmDd">
            <summary>
              The date YYYYMMDD.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.OldestAndNewestManufacturingDate">
            <summary>
              The oldest and newest manufacturing date.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.ExpirationDateYyyyMmDd">
            <summary>
              The expiration date YYYYMMDD.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.ExpirationDateDdMmYyyy">
            <summary>
              The expiration date DDMMYYYY.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.ProductionDateYyyyyMmDd">
            <summary>
              The production date YYYYMMDD.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.ProductionDateDdMmYyyy">
            <summary>
              The production date DDMMYYYY.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.TagActivationTime">
            <summary>
              The tag activation time.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.TagDeactivationTime">
            <summary>
              The tag deactivation time.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.InspectionDate">
            <summary>
              The inspection date.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.DodMilstampCode">
            <summary>
              The DoD MILSTAMP code.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.RecordTime">
            <summary>
              The record time.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.UtcDate">
            <summary>
              The UTC date.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.QualifiedDate">
            <summary>
              The qualified date.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.BestBeforeDate">
            <summary>
              The best before date.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.FirstFreezeDate">
            <summary>
              The first freeze date.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.HarvestDate">
            <summary>
              The harvest date.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.HarvestDateRange">
            <summary>
              The harvest date range.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.RestrictedSubstancesClassification">
            <summary>
              The restricted substances classification.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.AirPressure">
            <summary>
              The air pressure.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.MaximumAllowedTemperature">
            <summary>
              The maximum allowed temperature.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.MinimumAllowedTemperature">
            <summary>
              The minimum allowed temperature.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.MaximumAllowedRelativeHumidity">
            <summary>
              The maximum allowed relative humidity.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.MinimumAllowedRelativeHumidity">
            <summary>
              The minimum allowed relative humidity.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.RefrigeratorContainerTemperature">
            <summary>
              The refrigerator container temperature.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.CumulativeTimeTemperatureIndex">
            <summary>
              The cumulative time temperature index.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.TimeTemperatureIndex">
            <summary>
              The time temperature index.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.PackagingMaterial">
            <summary>
              The packaging material.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.Msl">
            <summary>
              The MSL.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.LoopingHeader">
            <summary>
              The looping header.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.Parent">
            <summary>
              The parent.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.NumberOfChildren">
            <summary>
              The number of children.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.LogicalAssignment">
            <summary>
              The logical assignment.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.Children">
            <summary>
              The children.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.Name">
            <summary>
              The name.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.EmployeeId">
            <summary>
              The employee id.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.SocialSecurityNumber">
            <summary>
              The social security number.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.NonEmployeeId">
            <summary>
              The non employee id.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.NationalSocialSecurityNumber">
            <summary>
              The national social security number.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.LastName">
            <summary>
              The last name.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.PartyName">
            <summary>
              The party name.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.ContactPhone">
            <summary>
              The contact phone.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.ContactEmail">
            <summary>
              The contact email.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.ConsigneeNumber">
            <summary>
              The consignee number.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.PersonalId">
            <summary>
              The personal ID.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.FirstNameAndMiddleInitial">
            <summary>
              The first name and middle initial.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.MilitaryGrade">
            <summary>
              The military grade.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.NiNumber">
            <summary>
              The NI number.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.IacCinPersonalId">
            <summary>
              The IAC CIN personal ID.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.IacCinPersonalIdEdifactPartyQualifier">
            <summary>
              The IAC CIN personal ID + EDIFACT party qualifier
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.Vin">
            <summary>
              The vin.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.AbbreviatedVin">
            <summary>
              The abbreviated vin.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.TransportVehicleIdentifier">
            <summary>
              The transport vehicle identifier.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.ProductionVehicleIdentifier">
            <summary>
              The production vehicle identifier.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.LicensePlate">
            <summary>
              The license plate.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.UnbreakableUnitLicensePlate">
            <summary>
              The unbreakable unit license plate.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.TransportUnitLicensePlate">
            <summary>
              The transport unit license plate.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.EdiUnbreakableUnitLicensePlate">
            <summary>
              The EDI unbreakable unit license plate.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.EdiTransportUnitLicensePlate">
            <summary>
              The EDI transport unit license plate.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.MixedTransportUnitLicensePlate">
            <summary>
              The mixed transport unit license plate.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.MasterTransportUnitLicensePlate">
            <summary>
              The master transport unit license plate.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.VehicleRegistrationLicensePlateNumber">
            <summary>
              The vehicle registration license plate number.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.Mmsi">
            <summary>
              The MMSI.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.CustomerOrderNumber">
            <summary>
              The customer order number.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.SupplierOrderNumber">
            <summary>
              The supplier order number.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.SupplierBillOfLading">
            <summary>
              The supplier bill of lading.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.CarrierBillOfLading">
            <summary>
              The carrier bill of lading.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.OrderLine">
            <summary>
              The order line.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.ReferenceNumber">
            <summary>
              The reference number.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.ProNo">
            <summary>
              The pro no.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.CarrierMode">
            <summary>
              The carrier mode.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.ContractNumber">
            <summary>
              The contract number.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.TransactionReference">
            <summary>
              The transaction reference.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.InvoiceNumber">
            <summary>
              The invoice number.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.PackingListNumber">
            <summary>
              The packing list number.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.ScacProNumber">
            <summary>
              The SCAC &amp; PRO Number.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.BillOfLadingNumber">
            <summary>
              The bill of lading number.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.OrderAndLine">
            <summary>
              The order and line.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.Kanban">
            <summary>
              The KANBAN.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.Delins">
            <summary>
              The DELINS.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.Check">
            <summary>
              The check.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.Reference">
            <summary>
              The reference.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.ForeignMilitarySalesCase">
            <summary>
              The foreign military sales case.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.LicenseIdentifier">
            <summary>
              The license identifier.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.CustomerData">
            <summary>
              The customer data.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.TransactionAuthentication">
            <summary>
              The transaction authentication.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.CarrierTransportUnitsGroupings">
            <summary>
              The carrier transport units groupings.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.ShipperTransportUnitsGroupings">
            <summary>
              The shipper transport units groupings.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.Quotation">
            <summary>
              The quotation.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.StorageLocation">
            <summary>
              The storage location.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.Location">
            <summary>
              The location.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.ShipTo">
            <summary>
              The ship to.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.ShipFrom">
            <summary>
              The ship from.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.CountryOfOrigin">
            <summary>
              The country of origin.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.ShipFor">
            <summary>
              The ship for.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.RouteCode">
            <summary>
              The route code.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.Dodaac">
            <summary>
              The DoDAAC.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.PortOfEmbarkation">
            <summary>
              The port of embarkation.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.PortOfDebarkation">
            <summary>
              The port of debarkation.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.LocationCoordinates">
            <summary>
              The location coordinates.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.ShipToCoordinates">
            <summary>
              The ship to coordinates.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.ShipFromCoordinates">
            <summary>
              The ship from coordinates.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.ShipForCoordinates">
            <summary>
              The ship for coordinates.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.TagActivationLocation">
            <summary>
              The tag activation location.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.TagDeactivationLocation">
            <summary>
              The tag deactivation location.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.FaoFishingArea">
            <summary>
              The FAO fishing area.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.FirstLevel20L">
            <summary>
              The first level.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.SecondLevel21L">
            <summary>
              The second level.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.ThirdLevel22L">
            <summary>
              The third level.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.FourthLevel23L">
            <summary>
              The fourth level.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.FifthLevel24L">
            <summary>
              The fifth level.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.IacCinLoc">
            <summary>
              The party to transaction.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.LocationCode">
            <summary>
              The location code.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.EventLocation">
            <summary>
              The event location.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.NumberAndStreet">
            <summary>
              The number and street.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.City">
            <summary>
              The city.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.CountrySubEntity">
            <summary>
              The country sub entity.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.PostalCode">
            <summary>
              The postal code.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.Country">
            <summary>
              The country.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.Url">
            <summary>
              The URL.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.P2PUrl">
            <summary>
              The P2P URL.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.SiteApproval">
            <summary>
              The site approval.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.ProducerApproval">
            <summary>
              The producer approval.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.ShipFromPostalCode">
            <summary>
              The ship from postal code.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.ShipToPostalCode">
            <summary>
              The ship to postal code.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.ShipFromGlobal">
            <summary>
              The ship from global.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.ShipToGlobal">
            <summary>
              The ship to global.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.Form2410">
            <summary>
              Army form 2410.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.Form2408">
            <summary>
              Army form 2408.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.Form2407">
            <summary>
              Army form 2407.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.Form95">
            <summary>
              Air Force form 95.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.Form4790">
            <summary>
              Navy form 4790.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.Nsn">
            <summary>
              The NSN.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.CidxProductCharacteristic">
            <summary>
              The CIDX product characteristic.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.EiajEncoded">
            <summary>
              EIAJ encoded.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.Gs1Encoded">
            <summary>
              GS1 encoded.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.AiagEncoded">
            <summary>
              AIAG encoded.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.MilstripEncoded">
            <summary>
              MILSTRIP encoded.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.DtrEncoded">
            <summary>
              DTR encoded.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.ProductionAnimalIdentification">
            <summary>
              A production animal identification.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.Ppn">
            <summary>
              IFA Pharmacy Product Number.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.IacCinEncoded">
            <summary>
              IAC CIN encoded.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.RlaEncodedRestrictedUse">
            <summary>
              RLA encoded, but with restricted use.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.RlaEncoded">
            <summary>
              RLA encoded.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.CaictIndustrialInternetId">
            <summary>
              CAICT Industrial Internet Identifier Codes.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.CustomerItemId">
            <summary>
              The customer item id.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.SupplierItemId">
            <summary>
              The supplier item id.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.RevisionLevel">
            <summary>
              The revision level.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.Gs1MfrItemCode">
            <summary>
              The GS1 MFR item code.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.Gs1ItemCodePortion">
            <summary>
              The GS1 item code portion.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.FreightClassificationItem">
            <summary>
              The freight classification item.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.SupplierItemCode">
            <summary>
              The supplier item code.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.Clei">
            <summary>
              The CLEI.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.Gs1Gtin14">
            <summary>
              A GS1 GTIN-14.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.DunsItemCode">
            <summary>
              The DUNS item code.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.HazardousMaterialCode">
            <summary>
              The hazardous material code.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.Clei10">
            <summary>
              The CLEI 10.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.DocumentType">
            <summary>
              The document type.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.VmrsSystem">
            <summary>
              The VMRS system.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.VmrsSystemAssembly">
            <summary>
              The VMRS system and assembly.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.VmrsSystemAssemblyPart">
            <summary>
              The VMRS system, assembly and part.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.UserVmrsSystemAssemblyPart">
            <summary>
              The user-modified VMRS system, assembly and part.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.Gs1SupplierIdItemCode">
            <summary>
              The GS1 supplier id item code.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.VmrsSupplierIdPartNo">
            <summary>
              The VMRS supplier id and part no.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.Component">
            <summary>
              The component.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.CustomerFirstLevel">
            <summary>
              The customer first level.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.CustomerSecondLevel">
            <summary>
              The customer second level.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.CustomerThirdLevel">
            <summary>
              The customer third level.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.CustomerFourthLevel">
            <summary>
              The customer fourth level.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.CustomerFifthLevel">
            <summary>
              The customer fifth level.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.IacCinPart">
            <summary>
              The party to transaction.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.PartNumber">
            <summary>
              The part number.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.Hts6Code">
            <summary>
              The HTS 6 code.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.CargoName">
            <summary>
              The cargo name.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.GmdnProductClassification">
            <summary>
              The GMDN product classification.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.SupplierFirstLevel">
            <summary>
              The supplier first level.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.SupplierSecondLevel">
            <summary>
              The supplier second level.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.SupplierThirdLevel">
            <summary>
              The supplier third level.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.SupplierFourthLevel">
            <summary>
              The supplier fourth level.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.SupplierFifthLevel">
            <summary>
              The supplier fifth level.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.MsdsCode">
            <summary>
              The MSDS code.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.ExportControlledBy">
            <summary>
              The export controlled by.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.ManufacturerItemId">
            <summary>
              The manufacturer item id.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.ItemId">
            <summary>
              The item id.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.Color">
            <summary>
              The color.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.SpecificMarineEquipment">
            <summary>
              Specific Marine Equipment.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.UdiDi">
            <summary>
              Unique Device Identification - Device Identifier.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.DnvCertificateReference">
            <summary>
              DNV certificate reference.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.Quantity">
            <summary>
              The quantity.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.TheoreticalLengthWeight">
            <summary>
              The theoretical length weight.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.ActualWeight">
            <summary>
              The actual weight.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.UnitOfMeasure">
            <summary>
              The unit of measure.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.GrossAmount">
            <summary>
              The gross amount.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.NetAmount">
            <summary>
              The net amount.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.Containers">
            <summary>
              The containers.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.QuantityUom">
            <summary>
              The quantity UOM.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.ContainerRatedWeight">
            <summary>
              The container rated weight.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.PieceWeight">
            <summary>
              The piece weight.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.TareWeight">
            <summary>
              The tare weight.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.MonetaryValue">
            <summary>
              The monetary value.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.PieceOfPieces">
            <summary>
              The piece of pieces.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.BeginningSecondaryQuantity">
            <summary>
              The beginning secondary quantity.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.EndingSecondaryQuantity">
            <summary>
              The ending secondary quantity.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.NumberOfPiecesInVan">
            <summary>
              The number of pieces in van.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.NumberOfShipmentsInVan">
            <summary>
              The number of shipments in van.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.Cube">
            <summary>
              The cube.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.Width">
            <summary>
              The width.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.Height">
            <summary>
              The height.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.Length">
            <summary>
              The length.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.NetWeight">
            <summary>
              The net weight.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.VanLength">
            <summary>
              The van length.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.InsideCubeOfAVan">
            <summary>
              The inside cube of a van.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.NetExplosiveWeight">
            <summary>
              The net explosive weight.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.PackagingLevel">
            <summary>
              The packaging level.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.SingleProductNetPrice">
            <summary>
              The single product net price.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.SinglePriceChargeValueForPostageAndPackaging">
            <summary>
              The single price charge value for postage and packaging.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.DiscountPercentage">
            <summary>
              The discount percentage.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.VatPercentage">
            <summary>
              The vat percentage.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.Currency">
            <summary>
              The currency.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.LoincCode">
            <summary>
              The LOINC code.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.Rma">
            <summary>
              The RMA.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.ReturnCode">
            <summary>
              The return code.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.Dodic">
            <summary>
              The DoDIC.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.IacCinDate">
            <summary>
              The IAC CIN.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.Signature">
            <summary>
              The signature.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.AsfisCode">
            <summary>
              The ASFIS code.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.FaoCode">
            <summary>
              The FAO code.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.FaoProductionMethod">
            <summary>
              The FAO production method.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.SerialNumber">
            <summary>
              The serial number.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.AdditionalCode">
            <summary>
              The additional code.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.AsnSid">
            <summary>
              The ASN SID.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.UniquePackageIdentification">
            <summary>
              The unique package identification.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.PackageIdentificationLikeItems">
            <summary>
              The package identification like items.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.PackageIdentificationUnlikeItems">
            <summary>
              The package identification unlike items.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.PackageIdentificationLikeItemsMultiple">
            <summary>
              The package identification like items multiple.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.PackageIdentificationUnlikeItemsMultiple">
            <summary>
              The package identification unlike items multiple.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.SupplierId">
            <summary>
              The supplier id.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.PackageIdentification">
            <summary>
              The package identification.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.IdCode">
            <summary>
              The id code.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.FixedAssetIdCode">
            <summary>
              The fixed asset id code.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.DocumentNumber">
            <summary>
              The document number.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.ContainerSecuritySeal">
            <summary>
              The container security seal.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.FourthClassManifesting">
            <summary>
              The fourth class manifesting.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.SerialNumberAssignedByTheVendorEntity">
            <summary>
              The serial number assigned by the vendor entity.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.VersionNumber">
            <summary>
              The version number.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.Gs1SupplierAndUniquePackageIdentification">
            <summary>
              The GS1 supplier and unique package identification.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.CageCodeSerialNumber">
            <summary>
              The cage code serial number.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.DunsAndPackageIdentification">
            <summary>
              The duns and package identification.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.TraceabilityCode">
            <summary>
              The traceability code.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.TireIdentificationNumber">
            <summary>
              The tire identification number.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.UniqueIndividualIdentity">
            <summary>
              The unique individual identity.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.MacAddress">
            <summary>
              The MAC address.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.RfTagUniqueIdentifier">
            <summary>
              The RF tag unique identifier.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.IacCinSerial">
            <summary>
              The party to transaction.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.ReaderId">
            <summary>
              The reader id.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.ItemNumberWithinBatch">
            <summary>
              The item number within batch.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.BatchAndItemNumber">
            <summary>
              The batch and item number.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.AdditionalTraceabilityCode">
            <summary>
              The additional traceability code.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.BeginningSerialNumber">
            <summary>
              The beginning serial number.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.EndingSerialNumber">
            <summary>
              The ending serial number.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.SerialNumberOfNextHigherAssembly">
            <summary>
              The serial number of next higher assembly.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.PartNumberOfEndItem">
            <summary>
              The part number of end item.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.BumperNumber">
            <summary>
              The bumper number.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.PalletIdentifier">
            <summary>
              The pallet identifier.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.IacCinPnPsn">
            <summary>
              The IAC CIN PN and PSN.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.Uii">
            <summary>
              The UII.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.Iccid">
            <summary>
              The ICCID.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.FirstLevel50S">
            <summary>
              The first level.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.SecondLevel51S">
            <summary>
              The second level.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.ThirdLevel52S">
            <summary>
              The third level.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.FourthLevel53S">
            <summary>
              The fourth level.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.FifthLevel54S">
            <summary>
              The fifth level.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.EpcNumber">
            <summary>
              The EPC number.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.EncryptedSerialNumber">
            <summary>
              The encrypted serial number.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.TraceabilityNumberAssignedByTheCustomer">
            <summary>
              The traceability number assigned by the customer.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.TraceabilityNumberAssignedByTheSupplier">
            <summary>
              The traceability number assigned by the supplier.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.ExclusiveAssignment">
            <summary>
              The exclusive assignment.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.FirstLevelCustomerAssigned">
            <summary>
              The first level customer assigned.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.SecondLevelCustomerAssigned">
            <summary>
              The second level customer assigned.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.ThirdLevelCustomerAssigned">
            <summary>
              The third level customer assigned.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.FourthLevelCustomerAssigned">
            <summary>
              The fourth level customer assigned.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.FifthLevelCustomerAssigned">
            <summary>
              The fifth level customer assigned.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.IacCinTraceability">
            <summary>
              The party to a transaction.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.BatchIdentifier">
            <summary>
              The batch identifier.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.BatchNumber">
            <summary>
              The batch number.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.FirstLevelSupplierAssigned">
            <summary>
              The first level supplier assigned.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.SecondLevelSupplierAssigned">
            <summary>
              The second level supplier assigned.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.ThirdLevelSupplierAssigned">
            <summary>
              The third level supplier assigned.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.FourthLevelSupplierAssigned">
            <summary>
              The fourth level supplier assigned.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.FifthLevelSupplierAssigned">
            <summary>
              The fifth level supplier assigned.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.PostalService">
            <summary>
              The postal service.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.LicensingPostData">
            <summary>
              The licensing post data.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.SupplementaryPostalService">
            <summary>
              The supplementary postal service.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.PostalAdministrationIdentifications">
            <summary>
              The postal administration identifications.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.UpuLocationCode">
            <summary>
              The UPU location code.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.QualifiedUpuLocationCode">
            <summary>
              The qualified UPU location code.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.LicensePlateWithServiceDataAndLocationCode">
            <summary>
              The license plate with service data and location code.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.OcrDataLocator">
            <summary>
              The OCR data locator.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.SupplierCodeAssignedByCustomer">
            <summary>
              The supplier code assigned by customer.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.SupplierCodeAssignedBySupplier">
            <summary>
              The supplier code assigned by supplier.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.UpcCompanyPrefix">
            <summary>
              The UPC company prefix.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.Gs1CompanyPrefix">
            <summary>
              The GS1 company prefix.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.CarrierIdentificationCode">
            <summary>
              The carrier identification code.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.FinancialInstitutionIdentificationCode">
            <summary>
              The financial institution identification code.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.ManufacturersIdentificationCode">
            <summary>
              The manufacturer's identification code.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.LiableParty">
            <summary>
              The liable party.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.CustomerCodeAssignedByTheCustomer">
            <summary>
              The customer code assigned by the customer.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.CustomerCodeAssignedByTheSupplier">
            <summary>
              The customer code assigned by the supplier.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.ManufacturerId">
            <summary>
              The manufacturer id.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.BudgetHolder">
            <summary>
              The budget holder.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.ManufacturerDunsNumber">
            <summary>
              The manufacturer duns number.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.SupplierDunsNumber">
            <summary>
              The supplier duns number.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.CustomerDunsNumber">
            <summary>
              The customer duns number.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.CarrierAssignedShipperNumber">
            <summary>
              The carrier assigned shipper number.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.VmrsSupplierId">
            <summary>
              The VMRS supplier id.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.DodCageCode">
            <summary>
              The DoD cage code.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.IacCin">
            <summary>
              The party to a transaction.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.PartysRolesInATransaction">
            <summary>
              The party's roles in a transaction.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.IacCinCodeValuesIdentification">
            <summary>
              The IAC CIN code values identification.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.IacCinSubUnitIdentification">
            <summary>
              The IAC CIN sub unit identification.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.CarrierScac">
            <summary>
              The carrier SCAC.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.SupplierVatNumber">
            <summary>
              The supplier VAT number.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.CustomerVatNumber">
            <summary>
              The customer VAT number.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.NcageCageManufacturerCode">
            <summary>
              NCAGE/CAGE manufacturer code.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.WorkOrderNumber">
            <summary>
              The work order number.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.OperationSequenceNumber">
            <summary>
              The operation sequence number.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.OperationCode">
            <summary>
              The operation code.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.WorkOrderAndOperationSequenceNumber">
            <summary>
              The work order and operation sequence number.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.StatusCode">
            <summary>
              The status code.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.WorkUnitCode">
            <summary>
              The work unit code.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.Nomenclature">
            <summary>
              The nomenclature.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.FormControlNumber">
            <summary>
              The form control number.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.QualityAssuranceInspector">
            <summary>
              The quality assurance inspector.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.TelephoneNumber">
            <summary>
              The telephone number.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.CustomerSupplier">
            <summary>
              The customer supplier.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.CarrierSupplier">
            <summary>
              The carrier supplier.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.CustomerCarrier">
            <summary>
              The customer carrier.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.FreeText">
            <summary>
              The free text.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.CarrierTradingPartner">
            <summary>
              The carrier trading partner.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.Header">
            <summary>
              The header.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.Line1">
            <summary>
              The line 1.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.Line2">
            <summary>
              The line 2.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.Line3">
            <summary>
              The line 3.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.Line4">
            <summary>
              The line 4.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.Line5">
            <summary>
              The line 5.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.Line6">
            <summary>
              The line 6.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.Line7">
            <summary>
              The line 7.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.Line8">
            <summary>
              The line 8.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.Line9">
            <summary>
              The line 9.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.Line10">
            <summary>
              The line 10.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.Line11">
            <summary>
              The line 11.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.Line12">
            <summary>
              The line 12.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.Line13">
            <summary>
              The line 13.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.Line14">
            <summary>
              The line 14.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.Line15">
            <summary>
              The line 15.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.Line16">
            <summary>
              The line 16.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.Line17">
            <summary>
              The line 17.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.Line18">
            <summary>
              The line 18.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.Line19">
            <summary>
              The line 19.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.Line20">
            <summary>
              The line 20.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.Line21">
            <summary>
              The line 21.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.Line22">
            <summary>
              The line 22.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.Line23">
            <summary>
              The line 23.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.Line24">
            <summary>
              The line 24.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.Line25">
            <summary>
              The line 25.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.Line26">
            <summary>
              The line 26.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.Line27">
            <summary>
              The line 27.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.Line28">
            <summary>
              The line 28.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.Line29">
            <summary>
              The line 29.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.Line30">
            <summary>
              The line 30.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.Line31">
            <summary>
              The line 31.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.Line32">
            <summary>
              The line 32.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.Line33">
            <summary>
              The line 33.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.Line34">
            <summary>
              The line 34.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.Line35">
            <summary>
              The line 35.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.Line36">
            <summary>
              The line 36.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.Line37">
            <summary>
              The line 37.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.Line38">
            <summary>
              The line 38.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.Line39">
            <summary>
              The line 39.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.Line40">
            <summary>
              The line 40.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.Line41">
            <summary>
              The line 41.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.Line42">
            <summary>
              The line 42.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.Line43">
            <summary>
              The line 43.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.Line44">
            <summary>
              The line 44.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.Line45">
            <summary>
              The line 45.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.Line46">
            <summary>
              The line 46.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.Line47">
            <summary>
              The line 47.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.Line48">
            <summary>
              The line 48.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.Line49">
            <summary>
              The line 49.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.Line50">
            <summary>
              The line 50.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.Line51">
            <summary>
              The line 51.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.Line52">
            <summary>
              The line 52.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.Line53">
            <summary>
              The line 53.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.Line54">
            <summary>
              The line 54.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.Line55">
            <summary>
              The line 55.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.Line56">
            <summary>
              The line 56.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.Line57">
            <summary>
              The line 57.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.Line58">
            <summary>
              The line 58.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.Line59">
            <summary>
              The line 59.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.Line60">
            <summary>
              The line 60.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.Line61">
            <summary>
              The line 61.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.Line62">
            <summary>
              The line 62.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.Line63">
            <summary>
              The line 63.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.Line64">
            <summary>
              The line 64.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.Line65">
            <summary>
              The line 65.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.Line66">
            <summary>
              The line 66.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.Line67">
            <summary>
              The line 67.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.Line68">
            <summary>
              The line 68.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.Line69">
            <summary>
              The line 69.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.Line70">
            <summary>
              The line 70.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.Line71">
            <summary>
              The line 71.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.Line72">
            <summary>
              The line 72.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.Line73">
            <summary>
              The line 73.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.Line74">
            <summary>
              The line 74.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.Line75">
            <summary>
              The line 75.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.Line76">
            <summary>
              The line 76.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.Line77">
            <summary>
              The line 77.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.Line78">
            <summary>
              The line 78.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.Line79">
            <summary>
              The line 79.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.Line80">
            <summary>
              The line 80.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.Line81">
            <summary>
              The line 81.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.Line82">
            <summary>
              The line 82.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.Line83">
            <summary>
              The line 83.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.Line84">
            <summary>
              The line 84.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.Line85">
            <summary>
              The line 85.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.Line86">
            <summary>
              The line 86.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.Line87">
            <summary>
              The line 87.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.Line88">
            <summary>
              The line 88.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.DataIdentifier.Line89">
            <summary>
              The line 89.
            </summary>
        </member>
        <member name="T:Solidsoft.Reply.Parsers.AnsiMhDi.Descriptors.EntityDescriptors">
            <summary>
              A descriptor for an ASC MH10.8.2 entity.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.Descriptors.EntityDescriptors._pattern">
            <summary>
              The regular expression pattern of the entity.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.Descriptors.EntityDescriptors._validator">
            <summary>
              The regular expression pattern of the entity.
            </summary>
        </member>
        <member name="M:Solidsoft.Reply.Parsers.AnsiMhDi.Descriptors.EntityDescriptors.#ctor(System.String,System.String,System.Func{System.Text.RegularExpressions.Regex})">
            <summary>
              Initializes a new instance of the <see cref="T:Solidsoft.Reply.Parsers.AnsiMhDi.Descriptors.EntityDescriptors" /> class.
            </summary>
            <param name="dataTitle">
              The data title.
            </param>
            <param name="description">
              The description.
            </param>
            <param name="pattern">
              The pattern.
            </param>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Descriptors.EntityDescriptors.DataTitle">
            <summary>
              Gets the data title of the entity.
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Descriptors.EntityDescriptors.Description">
            <summary>
              Gets the description of the entity.
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Descriptors.EntityDescriptors.Pattern">
            <summary>
              Gets the compiled regular expression object for validating the entity.
            </summary>
        </member>
        <member name="M:Solidsoft.Reply.Parsers.AnsiMhDi.Descriptors.EntityDescriptors.IsValid(System.String,System.Collections.Generic.IList{Solidsoft.Reply.Parsers.Common.ParserException}@)">
            <summary>
              Validate data against the descriptor.
            </summary>
            <param name="value">The data to be validated.</param>
            <param name="validationErrors">A list of validation errors.</param>
            <returns>True, if valid. Otherwise, false.</returns>
        </member>
        <member name="T:Solidsoft.Reply.Parsers.AnsiMhDi.EntityResolver">
            <summary>
              The entity resolver for ASC (MH10.8) data identifiers.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.EntityResolver.Descriptors">
            <summary>
              A dictionary of data identifier descriptors.
            </summary>
        </member>
        <member name="M:Solidsoft.Reply.Parsers.AnsiMhDi.EntityResolver.Resolve(System.String,System.String,System.Int32,System.Boolean)">
            <summary>
              Resolve a first two digits of the data identifier into an entity.
            </summary>
            <param name="data">
              The data buffer.
            </param>
            <param name="dataIdentifier">
              The data identifier.
            </param>
            <param name="currentPosition">
              The position of the data identifier for the current field.
            </param>
            <param name="includeDescriptors">
              Indicates whether the descriptors should be included in the resolved identifier.
            </param>
            <returns>
              An entity.
            </returns>
        </member>
        <member name="M:Solidsoft.Reply.Parsers.AnsiMhDi.EntityResolver.DatePatternDdMmYyRegEx">
            <remarks>
            Pattern:<br/>
            <code>(((0\\d|[12]\\d|3[01])(0[13578]|1[02])(\\d{2}))|((0\\d|[12]\\d|30)(0[13456789]|1[012])(\\d{2}))|((0\\d|1\\d|2[0-8])02(\\d{2}))|(2902((0[048]|[2468][048]|[13579][26]))))</code><br/>
            Explanation:<br/>
            <code>
            ○ 1st capture group.<br/>
                ○ Match with 4 alternative expressions, atomically.<br/>
                    ○ 2nd capture group.<br/>
                        ○ 3rd capture group.<br/>
                            ○ Match with 3 alternative expressions.<br/>
                                ○ Match a sequence of expressions.<br/>
                                    ○ Match '0'.<br/>
                                    ○ Match a Unicode digit.<br/>
                                ○ Match a sequence of expressions.<br/>
                                    ○ Match a character in the set [12].<br/>
                                    ○ Match a Unicode digit.<br/>
                                ○ Match a sequence of expressions.<br/>
                                    ○ Match '3'.<br/>
                                    ○ Match a character in the set [01].<br/>
                        ○ 4th capture group.<br/>
                            ○ Match with 2 alternative expressions.<br/>
                                ○ Match a sequence of expressions.<br/>
                                    ○ Match '0'.<br/>
                                    ○ Match a character in the set [13578].<br/>
                                ○ Match a sequence of expressions.<br/>
                                    ○ Match '1'.<br/>
                                    ○ Match a character in the set [02].<br/>
                        ○ 5th capture group.<br/>
                            ○ Match a Unicode digit exactly 2 times.<br/>
                    ○ 6th capture group.<br/>
                        ○ 7th capture group.<br/>
                            ○ Match with 3 alternative expressions.<br/>
                                ○ Match a sequence of expressions.<br/>
                                    ○ Match '0'.<br/>
                                    ○ Match a Unicode digit.<br/>
                                ○ Match a sequence of expressions.<br/>
                                    ○ Match a character in the set [12].<br/>
                                    ○ Match a Unicode digit.<br/>
                                ○ Match the string "30".<br/>
                        ○ 8th capture group.<br/>
                            ○ Match with 2 alternative expressions.<br/>
                                ○ Match a sequence of expressions.<br/>
                                    ○ Match '0'.<br/>
                                    ○ Match a character in the set [13-9].<br/>
                                ○ Match a sequence of expressions.<br/>
                                    ○ Match '1'.<br/>
                                    ○ Match a character in the set [0-2].<br/>
                        ○ 9th capture group.<br/>
                            ○ Match a Unicode digit exactly 2 times.<br/>
                    ○ 10th capture group.<br/>
                        ○ 11th capture group.<br/>
                            ○ Match with 3 alternative expressions.<br/>
                                ○ Match a sequence of expressions.<br/>
                                    ○ Match '0'.<br/>
                                    ○ Match a Unicode digit.<br/>
                                ○ Match a sequence of expressions.<br/>
                                    ○ Match '1'.<br/>
                                    ○ Match a Unicode digit.<br/>
                                ○ Match a sequence of expressions.<br/>
                                    ○ Match '2'.<br/>
                                    ○ Match a character in the set [0-8].<br/>
                        ○ Match the string "02".<br/>
                        ○ 12th capture group.<br/>
                            ○ Match a Unicode digit exactly 2 times.<br/>
                    ○ 13th capture group.<br/>
                        ○ Match the string "2902".<br/>
                        ○ 14th capture group.<br/>
                            ○ 15th capture group.<br/>
                                ○ Match with 3 alternative expressions, atomically.<br/>
                                    ○ Match a sequence of expressions.<br/>
                                        ○ Match '0'.<br/>
                                        ○ Match a character in the set [048].<br/>
                                    ○ Match a sequence of expressions.<br/>
                                        ○ Match a character in the set [2468].<br/>
                                        ○ Match a character in the set [048].<br/>
                                    ○ Match a sequence of expressions.<br/>
                                        ○ Match a character in the set [13579].<br/>
                                        ○ Match a character in the set [26].<br/>
            </code>
            </remarks>
        </member>
        <member name="M:Solidsoft.Reply.Parsers.AnsiMhDi.EntityResolver.DatePatternDdMmYyyyyRegEx">
            <remarks>
            Pattern:<br/>
            <code>^(((0[1-9]|[12]\\d|30)[-/]?(0[13-9]|1[012])|31[-/]?(0[13578]|1[02])|(0[1-9]|1\\d|2[0-8])[-/]?02)[-/]?\\d{4}|29[-/]?02[-/]?(\\d{2}(([2468][048]|[02468][48])|[13579][26])|([13579][26]|[02468][048]|0\\d|1[0-6])00))$</code><br/>
            Explanation:<br/>
            <code>
            ○ Match if at the beginning of the string.<br/>
            ○ 1st capture group.<br/>
                ○ Match with 2 alternative expressions.<br/>
                    ○ Match a sequence of expressions.<br/>
                        ○ 2nd capture group.<br/>
                            ○ Match with 3 alternative expressions.<br/>
                                ○ Match a sequence of expressions.<br/>
                                    ○ 3rd capture group.<br/>
                                        ○ Match with 3 alternative expressions.<br/>
                                            ○ Match a sequence of expressions.<br/>
                                                ○ Match '0'.<br/>
                                                ○ Match a character in the set [1-9].<br/>
                                            ○ Match a sequence of expressions.<br/>
                                                ○ Match a character in the set [12].<br/>
                                                ○ Match a Unicode digit.<br/>
                                            ○ Match the string "30".<br/>
                                    ○ Match a character in the set [-/] atomically, optionally.<br/>
                                    ○ 4th capture group.<br/>
                                        ○ Match with 2 alternative expressions.<br/>
                                            ○ Match a sequence of expressions.<br/>
                                                ○ Match '0'.<br/>
                                                ○ Match a character in the set [13-9].<br/>
                                            ○ Match a sequence of expressions.<br/>
                                                ○ Match '1'.<br/>
                                                ○ Match a character in the set [0-2].<br/>
                                ○ Match a sequence of expressions.<br/>
                                    ○ Match the string "31".<br/>
                                    ○ Match a character in the set [-/] atomically, optionally.<br/>
                                    ○ 5th capture group.<br/>
                                        ○ Match with 2 alternative expressions.<br/>
                                            ○ Match a sequence of expressions.<br/>
                                                ○ Match '0'.<br/>
                                                ○ Match a character in the set [13578].<br/>
                                            ○ Match a sequence of expressions.<br/>
                                                ○ Match '1'.<br/>
                                                ○ Match a character in the set [02].<br/>
                                ○ Match a sequence of expressions.<br/>
                                    ○ 6th capture group.<br/>
                                        ○ Match with 3 alternative expressions.<br/>
                                            ○ Match a sequence of expressions.<br/>
                                                ○ Match '0'.<br/>
                                                ○ Match a character in the set [1-9].<br/>
                                            ○ Match a sequence of expressions.<br/>
                                                ○ Match '1'.<br/>
                                                ○ Match a Unicode digit.<br/>
                                            ○ Match a sequence of expressions.<br/>
                                                ○ Match '2'.<br/>
                                                ○ Match a character in the set [0-8].<br/>
                                    ○ Match a character in the set [-/] atomically, optionally.<br/>
                                    ○ Match the string "02".<br/>
                        ○ Match a character in the set [-/] atomically, optionally.<br/>
                        ○ Match a Unicode digit exactly 4 times.<br/>
                    ○ Match a sequence of expressions.<br/>
                        ○ Match the string "29".<br/>
                        ○ Match a character in the set [-/] atomically, optionally.<br/>
                        ○ Match the string "02".<br/>
                        ○ Match a character in the set [-/] atomically, optionally.<br/>
                        ○ 7th capture group.<br/>
                            ○ Match with 2 alternative expressions.<br/>
                                ○ Match a sequence of expressions.<br/>
                                    ○ Match a Unicode digit exactly 2 times.<br/>
                                    ○ 8th capture group.<br/>
                                        ○ Match with 2 alternative expressions.<br/>
                                            ○ 9th capture group.<br/>
                                                ○ Match with 2 alternative expressions.<br/>
                                                    ○ Match a sequence of expressions.<br/>
                                                        ○ Match a character in the set [2468].<br/>
                                                        ○ Match a character in the set [048].<br/>
                                                    ○ Match a sequence of expressions.<br/>
                                                        ○ Match a character in the set [02468].<br/>
                                                        ○ Match a character in the set [48].<br/>
                                            ○ Match a sequence of expressions.<br/>
                                                ○ Match a character in the set [13579].<br/>
                                                ○ Match a character in the set [26].<br/>
                                ○ Match a sequence of expressions.<br/>
                                    ○ 10th capture group.<br/>
                                        ○ Match with 4 alternative expressions.<br/>
                                            ○ Match a sequence of expressions.<br/>
                                                ○ Match a character in the set [13579].<br/>
                                                ○ Match a character in the set [26].<br/>
                                            ○ Match a sequence of expressions.<br/>
                                                ○ Match a character in the set [02468].<br/>
                                                ○ Match a character in the set [048].<br/>
                                            ○ Match a sequence of expressions.<br/>
                                                ○ Match '0'.<br/>
                                                ○ Match a Unicode digit.<br/>
                                            ○ Match a sequence of expressions.<br/>
                                                ○ Match '1'.<br/>
                                                ○ Match a character in the set [0-6].<br/>
                                    ○ Match the string "00".<br/>
            ○ Match if at the end of the string or if before an ending newline.<br/>
            </code>
            </remarks>
        </member>
        <member name="M:Solidsoft.Reply.Parsers.AnsiMhDi.EntityResolver.DatePatternMmDdYyRegEx">
            <remarks>
            Pattern:<br/>
            <code>(((0[13578]|1[02])(0\\d|[12]\\d|3[01])(\\d{2}))|((0[13456789]|1[012])(0\\d|[12]\\d|30)(\\d{2}))|(02(0\\d|1\\d|2[0-8])(\\d{2}))|(0229((0[048]|[2468][048]|[13579][26]))))</code><br/>
            Explanation:<br/>
            <code>
            ○ 1st capture group.<br/>
                ○ Match with 4 alternative expressions, atomically.<br/>
                    ○ 2nd capture group.<br/>
                        ○ 3rd capture group.<br/>
                            ○ Match with 2 alternative expressions.<br/>
                                ○ Match a sequence of expressions.<br/>
                                    ○ Match '0'.<br/>
                                    ○ Match a character in the set [13578].<br/>
                                ○ Match a sequence of expressions.<br/>
                                    ○ Match '1'.<br/>
                                    ○ Match a character in the set [02].<br/>
                        ○ 4th capture group.<br/>
                            ○ Match with 3 alternative expressions.<br/>
                                ○ Match a sequence of expressions.<br/>
                                    ○ Match '0'.<br/>
                                    ○ Match a Unicode digit.<br/>
                                ○ Match a sequence of expressions.<br/>
                                    ○ Match a character in the set [12].<br/>
                                    ○ Match a Unicode digit.<br/>
                                ○ Match a sequence of expressions.<br/>
                                    ○ Match '3'.<br/>
                                    ○ Match a character in the set [01].<br/>
                        ○ 5th capture group.<br/>
                            ○ Match a Unicode digit exactly 2 times.<br/>
                    ○ 6th capture group.<br/>
                        ○ 7th capture group.<br/>
                            ○ Match with 2 alternative expressions.<br/>
                                ○ Match a sequence of expressions.<br/>
                                    ○ Match '0'.<br/>
                                    ○ Match a character in the set [13-9].<br/>
                                ○ Match a sequence of expressions.<br/>
                                    ○ Match '1'.<br/>
                                    ○ Match a character in the set [0-2].<br/>
                        ○ 8th capture group.<br/>
                            ○ Match with 3 alternative expressions.<br/>
                                ○ Match a sequence of expressions.<br/>
                                    ○ Match '0'.<br/>
                                    ○ Match a Unicode digit.<br/>
                                ○ Match a sequence of expressions.<br/>
                                    ○ Match a character in the set [12].<br/>
                                    ○ Match a Unicode digit.<br/>
                                ○ Match the string "30".<br/>
                        ○ 9th capture group.<br/>
                            ○ Match a Unicode digit exactly 2 times.<br/>
                    ○ 10th capture group.<br/>
                        ○ Match the string "02".<br/>
                        ○ 11th capture group.<br/>
                            ○ Match with 3 alternative expressions.<br/>
                                ○ Match a sequence of expressions.<br/>
                                    ○ Match '0'.<br/>
                                    ○ Match a Unicode digit.<br/>
                                ○ Match a sequence of expressions.<br/>
                                    ○ Match '1'.<br/>
                                    ○ Match a Unicode digit.<br/>
                                ○ Match a sequence of expressions.<br/>
                                    ○ Match '2'.<br/>
                                    ○ Match a character in the set [0-8].<br/>
                        ○ 12th capture group.<br/>
                            ○ Match a Unicode digit exactly 2 times.<br/>
                    ○ 13th capture group.<br/>
                        ○ Match the string "0229".<br/>
                        ○ 14th capture group.<br/>
                            ○ 15th capture group.<br/>
                                ○ Match with 3 alternative expressions, atomically.<br/>
                                    ○ Match a sequence of expressions.<br/>
                                        ○ Match '0'.<br/>
                                        ○ Match a character in the set [048].<br/>
                                    ○ Match a sequence of expressions.<br/>
                                        ○ Match a character in the set [2468].<br/>
                                        ○ Match a character in the set [048].<br/>
                                    ○ Match a sequence of expressions.<br/>
                                        ○ Match a character in the set [13579].<br/>
                                        ○ Match a character in the set [26].<br/>
            </code>
            </remarks>
        </member>
        <member name="M:Solidsoft.Reply.Parsers.AnsiMhDi.EntityResolver.DatePatternYDddJulianRegEx">
            <remarks>
            Pattern:<br/>
            <code>^(\\d)(00[1-9]|0[1-9]\\d|[1-2]\\d\\d|3[0-5]\\d|36[0-6])$</code><br/>
            Explanation:<br/>
            <code>
            ○ Match if at the beginning of the string.<br/>
            ○ 1st capture group.<br/>
                ○ Match a Unicode digit.<br/>
            ○ 2nd capture group.<br/>
                ○ Match with 4 alternative expressions.<br/>
                    ○ Match a sequence of expressions.<br/>
                        ○ Match '0'.<br/>
                        ○ Match with 2 alternative expressions.<br/>
                            ○ Match a sequence of expressions.<br/>
                                ○ Match '0'.<br/>
                                ○ Match a character in the set [1-9].<br/>
                            ○ Match a sequence of expressions.<br/>
                                ○ Match a character in the set [1-9].<br/>
                                ○ Match a Unicode digit.<br/>
                    ○ Match a sequence of expressions.<br/>
                        ○ Match a character in the set [12].<br/>
                        ○ Match a Unicode digit exactly 2 times.<br/>
                    ○ Match a sequence of expressions.<br/>
                        ○ Match '3'.<br/>
                        ○ Match a character in the set [0-5].<br/>
                        ○ Match a Unicode digit.<br/>
                    ○ Match a sequence of expressions.<br/>
                        ○ Match the string "36".<br/>
                        ○ Match a character in the set [0-6].<br/>
            ○ Match if at the end of the string or if before an ending newline.<br/>
            </code>
            </remarks>
        </member>
        <member name="M:Solidsoft.Reply.Parsers.AnsiMhDi.EntityResolver.DatePatternYyDddJulianRegEx">
            <remarks>
            Pattern:<br/>
            <code>^(\\d{2})(00[1-9]|0[1-9]\\d|[1-2]\\d\\d|3[0-5]\\d|36[0-6])$</code><br/>
            Explanation:<br/>
            <code>
            ○ Match if at the beginning of the string.<br/>
            ○ 1st capture group.<br/>
                ○ Match a Unicode digit exactly 2 times.<br/>
            ○ 2nd capture group.<br/>
                ○ Match with 4 alternative expressions.<br/>
                    ○ Match a sequence of expressions.<br/>
                        ○ Match '0'.<br/>
                        ○ Match with 2 alternative expressions.<br/>
                            ○ Match a sequence of expressions.<br/>
                                ○ Match '0'.<br/>
                                ○ Match a character in the set [1-9].<br/>
                            ○ Match a sequence of expressions.<br/>
                                ○ Match a character in the set [1-9].<br/>
                                ○ Match a Unicode digit.<br/>
                    ○ Match a sequence of expressions.<br/>
                        ○ Match a character in the set [12].<br/>
                        ○ Match a Unicode digit exactly 2 times.<br/>
                    ○ Match a sequence of expressions.<br/>
                        ○ Match '3'.<br/>
                        ○ Match a character in the set [0-5].<br/>
                        ○ Match a Unicode digit.<br/>
                    ○ Match a sequence of expressions.<br/>
                        ○ Match the string "36".<br/>
                        ○ Match a character in the set [0-6].<br/>
            ○ Match if at the end of the string or if before an ending newline.<br/>
            </code>
            </remarks>
        </member>
        <member name="M:Solidsoft.Reply.Parsers.AnsiMhDi.EntityResolver.DatePatternYyMmDdRegEx">
            <remarks>
            Pattern:<br/>
            <code>(((\\d{2})(0[13578]|1[02])(0[1-9]|[12]\\d|3[01]))|((\\d{2})(0[13456789]|1[012])(0[1-9]|[12]\\d|30))|((\\d{2})02(0[1-9]|1\\d|2[0-8]))|(((0[048]|[2468][048]|[13579][26]))0229))</code><br/>
            Explanation:<br/>
            <code>
            ○ 1st capture group.<br/>
                ○ Match with 4 alternative expressions, atomically.<br/>
                    ○ 2nd capture group.<br/>
                        ○ 3rd capture group.<br/>
                            ○ Match a Unicode digit exactly 2 times.<br/>
                        ○ 4th capture group.<br/>
                            ○ Match with 2 alternative expressions.<br/>
                                ○ Match a sequence of expressions.<br/>
                                    ○ Match '0'.<br/>
                                    ○ Match a character in the set [13578].<br/>
                                ○ Match a sequence of expressions.<br/>
                                    ○ Match '1'.<br/>
                                    ○ Match a character in the set [02].<br/>
                        ○ 5th capture group.<br/>
                            ○ Match with 3 alternative expressions, atomically.<br/>
                                ○ Match a sequence of expressions.<br/>
                                    ○ Match '0'.<br/>
                                    ○ Match a character in the set [1-9].<br/>
                                ○ Match a sequence of expressions.<br/>
                                    ○ Match a character in the set [12].<br/>
                                    ○ Match a Unicode digit.<br/>
                                ○ Match a sequence of expressions.<br/>
                                    ○ Match '3'.<br/>
                                    ○ Match a character in the set [01].<br/>
                    ○ 6th capture group.<br/>
                        ○ 7th capture group.<br/>
                            ○ Match a Unicode digit exactly 2 times.<br/>
                        ○ 8th capture group.<br/>
                            ○ Match with 2 alternative expressions.<br/>
                                ○ Match a sequence of expressions.<br/>
                                    ○ Match '0'.<br/>
                                    ○ Match a character in the set [13-9].<br/>
                                ○ Match a sequence of expressions.<br/>
                                    ○ Match '1'.<br/>
                                    ○ Match a character in the set [0-2].<br/>
                        ○ 9th capture group.<br/>
                            ○ Match with 3 alternative expressions, atomically.<br/>
                                ○ Match a sequence of expressions.<br/>
                                    ○ Match '0'.<br/>
                                    ○ Match a character in the set [1-9].<br/>
                                ○ Match a sequence of expressions.<br/>
                                    ○ Match a character in the set [12].<br/>
                                    ○ Match a Unicode digit.<br/>
                                ○ Match the string "30".<br/>
                    ○ 10th capture group.<br/>
                        ○ 11th capture group.<br/>
                            ○ Match a Unicode digit exactly 2 times.<br/>
                        ○ Match the string "02".<br/>
                        ○ 12th capture group.<br/>
                            ○ Match with 3 alternative expressions, atomically.<br/>
                                ○ Match a sequence of expressions.<br/>
                                    ○ Match '0'.<br/>
                                    ○ Match a character in the set [1-9].<br/>
                                ○ Match a sequence of expressions.<br/>
                                    ○ Match '1'.<br/>
                                    ○ Match a Unicode digit.<br/>
                                ○ Match a sequence of expressions.<br/>
                                    ○ Match '2'.<br/>
                                    ○ Match a character in the set [0-8].<br/>
                    ○ 13th capture group.<br/>
                        ○ 14th capture group.<br/>
                            ○ 15th capture group.<br/>
                                ○ Match with 3 alternative expressions.<br/>
                                    ○ Match a sequence of expressions.<br/>
                                        ○ Match '0'.<br/>
                                        ○ Match a character in the set [048].<br/>
                                    ○ Match a sequence of expressions.<br/>
                                        ○ Match a character in the set [2468].<br/>
                                        ○ Match a character in the set [048].<br/>
                                    ○ Match a sequence of expressions.<br/>
                                        ○ Match a character in the set [13579].<br/>
                                        ○ Match a character in the set [26].<br/>
                        ○ Match the string "0229".<br/>
            </code>
            </remarks>
        </member>
        <member name="M:Solidsoft.Reply.Parsers.AnsiMhDi.EntityResolver.DatePatternYyMmDdZerosRegEx">
            <remarks>
            Pattern:<br/>
            <code>(((\\d{2})(0[13578]|1[02])(0\\d|[12]\\d|3[01]))|((\\d{2})(0[13456789]|1[012])(0\\d|[12]\\d|30))|((\\d{2})02(0\\d|1\\d|2[0-8]))|(((0[048]|[2468][048]|[13579][26]))0229))</code><br/>
            Explanation:<br/>
            <code>
            ○ 1st capture group.<br/>
                ○ Match with 4 alternative expressions, atomically.<br/>
                    ○ 2nd capture group.<br/>
                        ○ 3rd capture group.<br/>
                            ○ Match a Unicode digit exactly 2 times.<br/>
                        ○ 4th capture group.<br/>
                            ○ Match with 2 alternative expressions.<br/>
                                ○ Match a sequence of expressions.<br/>
                                    ○ Match '0'.<br/>
                                    ○ Match a character in the set [13578].<br/>
                                ○ Match a sequence of expressions.<br/>
                                    ○ Match '1'.<br/>
                                    ○ Match a character in the set [02].<br/>
                        ○ 5th capture group.<br/>
                            ○ Match with 3 alternative expressions, atomically.<br/>
                                ○ Match a sequence of expressions.<br/>
                                    ○ Match '0'.<br/>
                                    ○ Match a Unicode digit.<br/>
                                ○ Match a sequence of expressions.<br/>
                                    ○ Match a character in the set [12].<br/>
                                    ○ Match a Unicode digit.<br/>
                                ○ Match a sequence of expressions.<br/>
                                    ○ Match '3'.<br/>
                                    ○ Match a character in the set [01].<br/>
                    ○ 6th capture group.<br/>
                        ○ 7th capture group.<br/>
                            ○ Match a Unicode digit exactly 2 times.<br/>
                        ○ 8th capture group.<br/>
                            ○ Match with 2 alternative expressions.<br/>
                                ○ Match a sequence of expressions.<br/>
                                    ○ Match '0'.<br/>
                                    ○ Match a character in the set [13-9].<br/>
                                ○ Match a sequence of expressions.<br/>
                                    ○ Match '1'.<br/>
                                    ○ Match a character in the set [0-2].<br/>
                        ○ 9th capture group.<br/>
                            ○ Match with 3 alternative expressions, atomically.<br/>
                                ○ Match a sequence of expressions.<br/>
                                    ○ Match '0'.<br/>
                                    ○ Match a Unicode digit.<br/>
                                ○ Match a sequence of expressions.<br/>
                                    ○ Match a character in the set [12].<br/>
                                    ○ Match a Unicode digit.<br/>
                                ○ Match the string "30".<br/>
                    ○ 10th capture group.<br/>
                        ○ 11th capture group.<br/>
                            ○ Match a Unicode digit exactly 2 times.<br/>
                        ○ Match the string "02".<br/>
                        ○ 12th capture group.<br/>
                            ○ Match with 3 alternative expressions, atomically.<br/>
                                ○ Match a sequence of expressions.<br/>
                                    ○ Match '0'.<br/>
                                    ○ Match a Unicode digit.<br/>
                                ○ Match a sequence of expressions.<br/>
                                    ○ Match '1'.<br/>
                                    ○ Match a Unicode digit.<br/>
                                ○ Match a sequence of expressions.<br/>
                                    ○ Match '2'.<br/>
                                    ○ Match a character in the set [0-8].<br/>
                    ○ 13th capture group.<br/>
                        ○ 14th capture group.<br/>
                            ○ 15th capture group.<br/>
                                ○ Match with 3 alternative expressions.<br/>
                                    ○ Match a sequence of expressions.<br/>
                                        ○ Match '0'.<br/>
                                        ○ Match a character in the set [048].<br/>
                                    ○ Match a sequence of expressions.<br/>
                                        ○ Match a character in the set [2468].<br/>
                                        ○ Match a character in the set [048].<br/>
                                    ○ Match a sequence of expressions.<br/>
                                        ○ Match a character in the set [13579].<br/>
                                        ○ Match a character in the set [26].<br/>
                        ○ Match the string "0229".<br/>
            </code>
            </remarks>
        </member>
        <member name="M:Solidsoft.Reply.Parsers.AnsiMhDi.EntityResolver.DatePatternYyWwRegEx">
            <remarks>
            Pattern:<br/>
            <code>\\d{2}((0[1-9])|([1-4]\\d)|(5[0-3]))</code><br/>
            Explanation:<br/>
            <code>
            ○ Match a Unicode digit exactly 2 times.<br/>
            ○ 1st capture group.<br/>
                ○ Match with 3 alternative expressions, atomically.<br/>
                    ○ 2nd capture group.<br/>
                        ○ Match '0'.<br/>
                        ○ Match a character in the set [1-9].<br/>
                    ○ 3rd capture group.<br/>
                        ○ Match a character in the set [1-4].<br/>
                        ○ Match a Unicode digit.<br/>
                    ○ 4th capture group.<br/>
                        ○ Match '5'.<br/>
                        ○ Match a character in the set [0-3].<br/>
            </code>
            </remarks>
        </member>
        <member name="M:Solidsoft.Reply.Parsers.AnsiMhDi.EntityResolver.DatePatternYyyyMmDdRegEx">
            <remarks>
            Pattern:<br/>
            <code>(\\d{4}[-/]?((0[13-9]|1[012])[-/]?(0[1-9]|[12]\\d|30)|(0[13578]|1[02])[-/]?31|02[-/]?(0[1-9]|1\\d|2[0-8]))|(\\d{2}(([2468][048]|[02468][48])|[13579][26])|([13579][26]|[02468][048]|0\\d|1[0-6])00)[-/]?02[-/]?29)</code><br/>
            Explanation:<br/>
            <code>
            ○ 1st capture group.<br/>
                ○ Match with 2 alternative expressions, atomically.<br/>
                    ○ Match a sequence of expressions.<br/>
                        ○ Match a Unicode digit exactly 4 times.<br/>
                        ○ Match a character in the set [-/] atomically, optionally.<br/>
                        ○ 2nd capture group.<br/>
                            ○ Match with 3 alternative expressions, atomically.<br/>
                                ○ Match a sequence of expressions.<br/>
                                    ○ 3rd capture group.<br/>
                                        ○ Match with 2 alternative expressions.<br/>
                                            ○ Match a sequence of expressions.<br/>
                                                ○ Match '0'.<br/>
                                                ○ Match a character in the set [13-9].<br/>
                                            ○ Match a sequence of expressions.<br/>
                                                ○ Match '1'.<br/>
                                                ○ Match a character in the set [0-2].<br/>
                                    ○ Match a character in the set [-/] atomically, optionally.<br/>
                                    ○ 4th capture group.<br/>
                                        ○ Match with 3 alternative expressions, atomically.<br/>
                                            ○ Match a sequence of expressions.<br/>
                                                ○ Match '0'.<br/>
                                                ○ Match a character in the set [1-9].<br/>
                                            ○ Match a sequence of expressions.<br/>
                                                ○ Match a character in the set [12].<br/>
                                                ○ Match a Unicode digit.<br/>
                                            ○ Match the string "30".<br/>
                                ○ Match a sequence of expressions.<br/>
                                    ○ 5th capture group.<br/>
                                        ○ Match with 2 alternative expressions.<br/>
                                            ○ Match a sequence of expressions.<br/>
                                                ○ Match '0'.<br/>
                                                ○ Match a character in the set [13578].<br/>
                                            ○ Match a sequence of expressions.<br/>
                                                ○ Match '1'.<br/>
                                                ○ Match a character in the set [02].<br/>
                                    ○ Match a character in the set [-/] atomically, optionally.<br/>
                                    ○ Match the string "31".<br/>
                                ○ Match a sequence of expressions.<br/>
                                    ○ Match the string "02".<br/>
                                    ○ Match a character in the set [-/] atomically, optionally.<br/>
                                    ○ 6th capture group.<br/>
                                        ○ Match with 3 alternative expressions, atomically.<br/>
                                            ○ Match a sequence of expressions.<br/>
                                                ○ Match '0'.<br/>
                                                ○ Match a character in the set [1-9].<br/>
                                            ○ Match a sequence of expressions.<br/>
                                                ○ Match '1'.<br/>
                                                ○ Match a Unicode digit.<br/>
                                            ○ Match a sequence of expressions.<br/>
                                                ○ Match '2'.<br/>
                                                ○ Match a character in the set [0-8].<br/>
                    ○ Match a sequence of expressions.<br/>
                        ○ 7th capture group.<br/>
                            ○ Match with 2 alternative expressions.<br/>
                                ○ Match a sequence of expressions.<br/>
                                    ○ Match a Unicode digit exactly 2 times.<br/>
                                    ○ 8th capture group.<br/>
                                        ○ Match with 2 alternative expressions.<br/>
                                            ○ 9th capture group.<br/>
                                                ○ Match with 2 alternative expressions.<br/>
                                                    ○ Match a sequence of expressions.<br/>
                                                        ○ Match a character in the set [2468].<br/>
                                                        ○ Match a character in the set [048].<br/>
                                                    ○ Match a sequence of expressions.<br/>
                                                        ○ Match a character in the set [02468].<br/>
                                                        ○ Match a character in the set [48].<br/>
                                            ○ Match a sequence of expressions.<br/>
                                                ○ Match a character in the set [13579].<br/>
                                                ○ Match a character in the set [26].<br/>
                                ○ Match a sequence of expressions.<br/>
                                    ○ 10th capture group.<br/>
                                        ○ Match with 4 alternative expressions.<br/>
                                            ○ Match a sequence of expressions.<br/>
                                                ○ Match a character in the set [13579].<br/>
                                                ○ Match a character in the set [26].<br/>
                                            ○ Match a sequence of expressions.<br/>
                                                ○ Match a character in the set [02468].<br/>
                                                ○ Match a character in the set [048].<br/>
                                            ○ Match a sequence of expressions.<br/>
                                                ○ Match '0'.<br/>
                                                ○ Match a Unicode digit.<br/>
                                            ○ Match a sequence of expressions.<br/>
                                                ○ Match '1'.<br/>
                                                ○ Match a character in the set [0-6].<br/>
                                    ○ Match the string "00".<br/>
                        ○ Match a character in the set [-/] atomically, optionally.<br/>
                        ○ Match the string "02".<br/>
                        ○ Match a character in the set [-/] atomically, optionally.<br/>
                        ○ Match the string "29".<br/>
            </code>
            </remarks>
        </member>
        <member name="M:Solidsoft.Reply.Parsers.AnsiMhDi.EntityResolver.DatePatternYyyyMmDdHhMmRegEx">
            <remarks>
            Pattern:<br/>
            <code>(?:(?:(?:(?:(?:[13579][26]|[2468][048])00)|(?:\\d{2}(?:(?:[13579][26])|(?:[2468][048]|0[48]))))(?:(?:(?:09|04|06|11)(?:0[1-9]|1\\d|2\\d|30))|(?:(?:01|03|05|07|08|10|12)(?:0[1-9]|1\\d|2\\d|3[01]))|(?:02(?:0[1-9]|1\\d|2\\d))))|(?:\\d{4}(?:(?:(?:09|04|06|11)(?:0[1-9]|1\\d|2\\d|30))|(?:(?:01|03|05|07|08|10|12)(?:0[1-9]|1\\d|2\\d|3[01]))|(?:02(?:[01]\\d|2[0-8])))))(?:0\\d|1\\d|2[0-3])(?:[0-5]\\d)</code><br/>
            Explanation:<br/>
            <code>
            ○ Match with 2 alternative expressions.<br/>
                ○ Match a sequence of expressions.<br/>
                    ○ Match with 2 alternative expressions.<br/>
                        ○ Match a sequence of expressions.<br/>
                            ○ Match with 2 alternative expressions.<br/>
                                ○ Match a sequence of expressions.<br/>
                                    ○ Match a character in the set [13579].<br/>
                                    ○ Match a character in the set [26].<br/>
                                ○ Match a sequence of expressions.<br/>
                                    ○ Match a character in the set [2468].<br/>
                                    ○ Match a character in the set [048].<br/>
                            ○ Match the string "00".<br/>
                        ○ Match a sequence of expressions.<br/>
                            ○ Match a Unicode digit exactly 2 times.<br/>
                            ○ Match with 3 alternative expressions.<br/>
                                ○ Match a sequence of expressions.<br/>
                                    ○ Match a character in the set [13579].<br/>
                                    ○ Match a character in the set [26].<br/>
                                ○ Match a sequence of expressions.<br/>
                                    ○ Match a character in the set [2468].<br/>
                                    ○ Match a character in the set [048].<br/>
                                ○ Match a sequence of expressions.<br/>
                                    ○ Match '0'.<br/>
                                    ○ Match a character in the set [48].<br/>
                    ○ Match with 3 alternative expressions.<br/>
                        ○ Match a sequence of expressions.<br/>
                            ○ Match with 2 alternative expressions.<br/>
                                ○ Match a sequence of expressions.<br/>
                                    ○ Match '0'.<br/>
                                    ○ Match a character in the set [469].<br/>
                                ○ Match the string "11".<br/>
                            ○ Match with 4 alternative expressions.<br/>
                                ○ Match a sequence of expressions.<br/>
                                    ○ Match '0'.<br/>
                                    ○ Match a character in the set [1-9].<br/>
                                ○ Match a sequence of expressions.<br/>
                                    ○ Match '1'.<br/>
                                    ○ Match a Unicode digit.<br/>
                                ○ Match a sequence of expressions.<br/>
                                    ○ Match '2'.<br/>
                                    ○ Match a Unicode digit.<br/>
                                ○ Match the string "30".<br/>
                        ○ Match a sequence of expressions.<br/>
                            ○ Match with 2 alternative expressions.<br/>
                                ○ Match a sequence of expressions.<br/>
                                    ○ Match '0'.<br/>
                                    ○ Match a character in the set [13578].<br/>
                                ○ Match a sequence of expressions.<br/>
                                    ○ Match '1'.<br/>
                                    ○ Match a character in the set [02].<br/>
                            ○ Match with 4 alternative expressions.<br/>
                                ○ Match a sequence of expressions.<br/>
                                    ○ Match '0'.<br/>
                                    ○ Match a character in the set [1-9].<br/>
                                ○ Match a sequence of expressions.<br/>
                                    ○ Match '1'.<br/>
                                    ○ Match a Unicode digit.<br/>
                                ○ Match a sequence of expressions.<br/>
                                    ○ Match '2'.<br/>
                                    ○ Match a Unicode digit.<br/>
                                ○ Match a sequence of expressions.<br/>
                                    ○ Match '3'.<br/>
                                    ○ Match a character in the set [01].<br/>
                        ○ Match a sequence of expressions.<br/>
                            ○ Match the string "02".<br/>
                            ○ Match with 3 alternative expressions.<br/>
                                ○ Match a sequence of expressions.<br/>
                                    ○ Match '0'.<br/>
                                    ○ Match a character in the set [1-9].<br/>
                                ○ Match a sequence of expressions.<br/>
                                    ○ Match '1'.<br/>
                                    ○ Match a Unicode digit.<br/>
                                ○ Match a sequence of expressions.<br/>
                                    ○ Match '2'.<br/>
                                    ○ Match a Unicode digit.<br/>
                ○ Match a sequence of expressions.<br/>
                    ○ Match a Unicode digit exactly 4 times.<br/>
                    ○ Match with 3 alternative expressions.<br/>
                        ○ Match a sequence of expressions.<br/>
                            ○ Match with 2 alternative expressions.<br/>
                                ○ Match a sequence of expressions.<br/>
                                    ○ Match '0'.<br/>
                                    ○ Match a character in the set [469].<br/>
                                ○ Match the string "11".<br/>
                            ○ Match with 4 alternative expressions.<br/>
                                ○ Match a sequence of expressions.<br/>
                                    ○ Match '0'.<br/>
                                    ○ Match a character in the set [1-9].<br/>
                                ○ Match a sequence of expressions.<br/>
                                    ○ Match '1'.<br/>
                                    ○ Match a Unicode digit.<br/>
                                ○ Match a sequence of expressions.<br/>
                                    ○ Match '2'.<br/>
                                    ○ Match a Unicode digit.<br/>
                                ○ Match the string "30".<br/>
                        ○ Match a sequence of expressions.<br/>
                            ○ Match with 2 alternative expressions.<br/>
                                ○ Match a sequence of expressions.<br/>
                                    ○ Match '0'.<br/>
                                    ○ Match a character in the set [13578].<br/>
                                ○ Match a sequence of expressions.<br/>
                                    ○ Match '1'.<br/>
                                    ○ Match a character in the set [02].<br/>
                            ○ Match with 4 alternative expressions.<br/>
                                ○ Match a sequence of expressions.<br/>
                                    ○ Match '0'.<br/>
                                    ○ Match a character in the set [1-9].<br/>
                                ○ Match a sequence of expressions.<br/>
                                    ○ Match '1'.<br/>
                                    ○ Match a Unicode digit.<br/>
                                ○ Match a sequence of expressions.<br/>
                                    ○ Match '2'.<br/>
                                    ○ Match a Unicode digit.<br/>
                                ○ Match a sequence of expressions.<br/>
                                    ○ Match '3'.<br/>
                                    ○ Match a character in the set [01].<br/>
                        ○ Match a sequence of expressions.<br/>
                            ○ Match the string "02".<br/>
                            ○ Match with 2 alternative expressions.<br/>
                                ○ Match a sequence of expressions.<br/>
                                    ○ Match a character in the set [01].<br/>
                                    ○ Match a Unicode digit.<br/>
                                ○ Match a sequence of expressions.<br/>
                                    ○ Match '2'.<br/>
                                    ○ Match a character in the set [0-8].<br/>
            ○ Match with 3 alternative expressions.<br/>
                ○ Match a sequence of expressions.<br/>
                    ○ Match '0'.<br/>
                    ○ Match a Unicode digit.<br/>
                ○ Match a sequence of expressions.<br/>
                    ○ Match '1'.<br/>
                    ○ Match a Unicode digit.<br/>
                ○ Match a sequence of expressions.<br/>
                    ○ Match '2'.<br/>
                    ○ Match a character in the set [0-3].<br/>
            ○ Match a character in the set [0-5].<br/>
            ○ Match a Unicode digit.<br/>
            </code>
            </remarks>
        </member>
        <member name="M:Solidsoft.Reply.Parsers.AnsiMhDi.EntityResolver.Alphanumeric01UnboundRegEx">
            <remarks>
            Pattern:<br/>
            <code>[0-9A-Z]+</code><br/>
            Explanation:<br/>
            <code>
            ○ Match a character in the set [0-9A-Z] atomically at least once.<br/>
            </code>
            </remarks>
        </member>
        <member name="M:Solidsoft.Reply.Parsers.AnsiMhDi.EntityResolver.AlphanumericWithPlus01UnboundRegEx">
            <remarks>
            Pattern:<br/>
            <code>[0-9A-Z+]+</code><br/>
            Explanation:<br/>
            <code>
            ○ Match a character in the set [+0-9A-Z] atomically at least once.<br/>
            </code>
            </remarks>
        </member>
        <member name="M:Solidsoft.Reply.Parsers.AnsiMhDi.EntityResolver.InvariantNoPlus01UnboundPlusRegEx">
            <remarks>
            Pattern:<br/>
            <code>[-!"%&amp;'()*,./0-9:;&lt;=&gt;?A-Z_a-z]+</code><br/>
            Explanation:<br/>
            <code>
            ○ Match a character in the set [!"%-*,-?A-Z_a-z] atomically at least once.<br/>
            </code>
            </remarks>
        </member>
        <member name="M:Solidsoft.Reply.Parsers.AnsiMhDi.EntityResolver.NumericPlus01UnboundRegEx">
            <remarks>
            Pattern:<br/>
            <code>[0-9+]+</code><br/>
            Explanation:<br/>
            <code>
            ○ Match a character in the set [+0-9] atomically at least once.<br/>
            </code>
            </remarks>
        </member>
        <member name="M:Solidsoft.Reply.Parsers.AnsiMhDi.EntityResolver.LatitudeLongitudeAttitudeRegEx">
            <remarks>
            Pattern:<br/>
            <code>-?\\d{1,2}(.\\d{1,5})?/-?\\d{1,3}(.\\d{1,5})?/-?\\d{1,4}</code><br/>
            Explanation:<br/>
            <code>
            ○ Match '-' atomically, optionally.<br/>
            ○ Match a Unicode digit greedily at least 1 and at most 2 times.<br/>
            ○ Optional (greedy).<br/>
                ○ 1st capture group.<br/>
                    ○ Match any character other than '\n'.<br/>
                    ○ Match a Unicode digit greedily at least 1 and at most 5 times.<br/>
            ○ Match '/'.<br/>
            ○ Match '-' atomically, optionally.<br/>
            ○ Match a Unicode digit greedily at least 1 and at most 3 times.<br/>
            ○ Optional (greedy).<br/>
                ○ 2nd capture group.<br/>
                    ○ Match any character other than '\n'.<br/>
                    ○ Match a Unicode digit greedily at least 1 and at most 5 times.<br/>
            ○ Match '/'.<br/>
            ○ Match '-' atomically, optionally.<br/>
            ○ Match a Unicode digit atomically at least 1 and at most 4 times.<br/>
            </code>
            </remarks>
        </member>
        <member name="M:Solidsoft.Reply.Parsers.AnsiMhDi.EntityResolver.YesNoLetterRegEx">
            <remarks>
            Pattern:<br/>
            <code>[YN]</code><br/>
            Explanation:<br/>
            <code>
            ○ Match a character in the set [NY].<br/>
            </code>
            </remarks>
        </member>
        <member name="M:Solidsoft.Reply.Parsers.AnsiMhDi.EntityResolver.HibccPlusRegEx">
            <remarks>
            Pattern:<br/>
            <code>^\\+$</code><br/>
            Explanation:<br/>
            <code>
            ○ Match if at the beginning of the string.<br/>
            ○ Match '+'.<br/>
            ○ Match if at the end of the string or if before an ending newline.<br/>
            </code>
            </remarks>
        </member>
        <member name="M:Solidsoft.Reply.Parsers.AnsiMhDi.EntityResolver.IccbbaAmpersandRegEx">
            <remarks>
            Pattern:<br/>
            <code>^\\&amp;$</code><br/>
            Explanation:<br/>
            <code>
            ○ Match if at the beginning of the string.<br/>
            ○ Match '&amp;'.<br/>
            ○ Match if at the end of the string or if before an ending newline.<br/>
            </code>
            </remarks>
        </member>
        <member name="M:Solidsoft.Reply.Parsers.AnsiMhDi.EntityResolver.IccbbaEqualRegEx">
            <remarks>
            Pattern:<br/>
            <code>^\\=$</code><br/>
            Explanation:<br/>
            <code>
            ○ Match if at the beginning of the string.<br/>
            ○ Match '='.<br/>
            ○ Match if at the end of the string or if before an ending newline.<br/>
            </code>
            </remarks>
        </member>
        <member name="M:Solidsoft.Reply.Parsers.AnsiMhDi.EntityResolver.Gs1Function1RegEx">
            <remarks>
            Pattern:<br/>
            <code>^\\x1D$</code><br/>
            Explanation:<br/>
            <code>
            ○ Match if at the beginning of the string.<br/>
            ○ Match '\u001d'.<br/>
            ○ Match if at the end of the string or if before an ending newline.<br/>
            </code>
            </remarks>
        </member>
        <member name="M:Solidsoft.Reply.Parsers.AnsiMhDi.EntityResolver.IsoIec15434PreambleRegEx">
            <remarks>
            Pattern:<br/>
            <code>^\\[\\)\\&gt;\\x1E</code><br/>
            Explanation:<br/>
            <code>
            ○ Match if at the beginning of the string.<br/>
            ○ Match the string "[)&gt;\u001e".<br/>
            </code>
            </remarks>
        </member>
        <member name="M:Solidsoft.Reply.Parsers.AnsiMhDi.EntityResolver.IfaAbdataPznHyphenRegEx">
            <remarks>
            Pattern:<br/>
            <code>^\\-$</code><br/>
            Explanation:<br/>
            <code>
            ○ Match if at the beginning of the string.<br/>
            ○ Match '-'.<br/>
            ○ Match if at the end of the string or if before an ending newline.<br/>
            </code>
            </remarks>
        </member>
        <member name="M:Solidsoft.Reply.Parsers.AnsiMhDi.EntityResolver.EurocodeIblsExclamationMarkRegEx">
            <remarks>
            Pattern:<br/>
            <code>^\\!$</code><br/>
            Explanation:<br/>
            <code>
            ○ Match if at the beginning of the string.<br/>
            ○ Match '!'.<br/>
            ○ Match if at the end of the string or if before an ending newline.<br/>
            </code>
            </remarks>
        </member>
        <member name="M:Solidsoft.Reply.Parsers.AnsiMhDi.EntityResolver.DangerousCargoClassRegEx">
            <remarks>
            Pattern:<br/>
            <code>^\\d(.\\d[A-Z]?)?$</code><br/>
            Explanation:<br/>
            <code>
            ○ Match if at the beginning of the string.<br/>
            ○ Match a Unicode digit.<br/>
            ○ Optional (greedy).<br/>
                ○ 1st capture group.<br/>
                    ○ Match any character other than '\n'.<br/>
                    ○ Match a Unicode digit.<br/>
                    ○ Match a character in the set [A-Z] greedily, optionally.<br/>
            ○ Match if at the end of the string or if before an ending newline.<br/>
            </code>
            </remarks>
        </member>
        <member name="M:Solidsoft.Reply.Parsers.AnsiMhDi.EntityResolver.VesselRegistrationNumberRegEx">
            <remarks>
            Pattern:<br/>
            <code>^IMO\\d{7}$</code><br/>
            Explanation:<br/>
            <code>
            ○ Match if at the beginning of the string.<br/>
            ○ Match the string "IMO".<br/>
            ○ Match a Unicode digit exactly 7 times.<br/>
            ○ Match if at the end of the string or if before an ending newline.<br/>
            </code>
            </remarks>
        </member>
        <member name="M:Solidsoft.Reply.Parsers.AnsiMhDi.EntityResolver.ElectronicSealNumbersRegEx">
            <remarks>
            Pattern:<br/>
            <code>^.{{6}}$</code><br/>
            Explanation:<br/>
            <code>
            ○ Match if at the beginning of the string.<br/>
            ○ Match any character other than '\n'.<br/>
            ○ Match the string "{{{{{{}".<br/>
            ○ Match if at the end of the string or if before an ending newline.<br/>
            </code>
            </remarks>
        </member>
        <member name="M:Solidsoft.Reply.Parsers.AnsiMhDi.EntityResolver.SuretyNumberRegEx">
            <remarks>
            Pattern:<br/>
            <code>^.{{6}}$</code><br/>
            Explanation:<br/>
            <code>
            ○ Match if at the beginning of the string.<br/>
            ○ Match any character other than '\n'.<br/>
            ○ Match the string "{{{{{{}".<br/>
            ○ Match if at the end of the string or if before an ending newline.<br/>
            </code>
            </remarks>
        </member>
        <member name="M:Solidsoft.Reply.Parsers.AnsiMhDi.EntityResolver.ForeignPortOfLadingRegEx">
            <remarks>
            Pattern:<br/>
            <code>^.{{6}}$</code><br/>
            Explanation:<br/>
            <code>
            ○ Match if at the beginning of the string.<br/>
            ○ Match any character other than '\n'.<br/>
            ○ Match the string "{{{{{{}".<br/>
            ○ Match if at the end of the string or if before an ending newline.<br/>
            </code>
            </remarks>
        </member>
        <member name="M:Solidsoft.Reply.Parsers.AnsiMhDi.EntityResolver.FormatMmYyRegEx">
            <remarks>
            Pattern:<br/>
            <code>^((0[1-9])|(1[0-2]))\\d{2}$</code><br/>
            Explanation:<br/>
            <code>
            ○ Match if at the beginning of the string.<br/>
            ○ 1st capture group.<br/>
                ○ Match with 2 alternative expressions.<br/>
                    ○ 2nd capture group.<br/>
                        ○ Match '0'.<br/>
                        ○ Match a character in the set [1-9].<br/>
                    ○ 3rd capture group.<br/>
                        ○ Match '1'.<br/>
                        ○ Match a character in the set [0-2].<br/>
            ○ Match a Unicode digit exactly 2 times.<br/>
            ○ Match if at the end of the string or if before an ending newline.<br/>
            </code>
            </remarks>
        </member>
        <member name="M:Solidsoft.Reply.Parsers.AnsiMhDi.EntityResolver.EventDateAndTimeRegEx">
            <remarks>
            Pattern:<br/>
            <code>^(?:(?:(?:(?:(?:[13579][26]|[2468][048])00)|(?:\\d{2}(?:(?:[13579][26])|(?:[2468][048]|0[48]))))(?:(?:(?:09|04|06|11)(?:0[1-9]|1\\d|2\\d|30))|(?:(?:01|03|05|07|08|10|12)(?:0[1-9]|1\\d|2\\d|3[01]))|(?:02(?:0[1-9]|1\\d|2\\d))))|(?:\\d{4}(?:(?:(?:09|04|06|11)(?:0[1-9]|1\\d|2\\d|30))|(?:(?:01|03|05|07|08|10|12)(?:0[1-9]|1\\d|2\\d|3[01]))|(?:02(?:[01]\\d|2[0-8])))))(?:0\\d|1\\d|2[0-3])(?:[0-5]\\d)\\d{{1,3}}$</code><br/>
            Explanation:<br/>
            <code>
            ○ Match if at the beginning of the string.<br/>
            ○ Match with 2 alternative expressions.<br/>
                ○ Match a sequence of expressions.<br/>
                    ○ Match with 2 alternative expressions.<br/>
                        ○ Match a sequence of expressions.<br/>
                            ○ Match with 2 alternative expressions.<br/>
                                ○ Match a sequence of expressions.<br/>
                                    ○ Match a character in the set [13579].<br/>
                                    ○ Match a character in the set [26].<br/>
                                ○ Match a sequence of expressions.<br/>
                                    ○ Match a character in the set [2468].<br/>
                                    ○ Match a character in the set [048].<br/>
                            ○ Match the string "00".<br/>
                        ○ Match a sequence of expressions.<br/>
                            ○ Match a Unicode digit exactly 2 times.<br/>
                            ○ Match with 3 alternative expressions.<br/>
                                ○ Match a sequence of expressions.<br/>
                                    ○ Match a character in the set [13579].<br/>
                                    ○ Match a character in the set [26].<br/>
                                ○ Match a sequence of expressions.<br/>
                                    ○ Match a character in the set [2468].<br/>
                                    ○ Match a character in the set [048].<br/>
                                ○ Match a sequence of expressions.<br/>
                                    ○ Match '0'.<br/>
                                    ○ Match a character in the set [48].<br/>
                    ○ Match with 3 alternative expressions.<br/>
                        ○ Match a sequence of expressions.<br/>
                            ○ Match with 2 alternative expressions.<br/>
                                ○ Match a sequence of expressions.<br/>
                                    ○ Match '0'.<br/>
                                    ○ Match a character in the set [469].<br/>
                                ○ Match the string "11".<br/>
                            ○ Match with 4 alternative expressions.<br/>
                                ○ Match a sequence of expressions.<br/>
                                    ○ Match '0'.<br/>
                                    ○ Match a character in the set [1-9].<br/>
                                ○ Match a sequence of expressions.<br/>
                                    ○ Match '1'.<br/>
                                    ○ Match a Unicode digit.<br/>
                                ○ Match a sequence of expressions.<br/>
                                    ○ Match '2'.<br/>
                                    ○ Match a Unicode digit.<br/>
                                ○ Match the string "30".<br/>
                        ○ Match a sequence of expressions.<br/>
                            ○ Match with 2 alternative expressions.<br/>
                                ○ Match a sequence of expressions.<br/>
                                    ○ Match '0'.<br/>
                                    ○ Match a character in the set [13578].<br/>
                                ○ Match a sequence of expressions.<br/>
                                    ○ Match '1'.<br/>
                                    ○ Match a character in the set [02].<br/>
                            ○ Match with 4 alternative expressions.<br/>
                                ○ Match a sequence of expressions.<br/>
                                    ○ Match '0'.<br/>
                                    ○ Match a character in the set [1-9].<br/>
                                ○ Match a sequence of expressions.<br/>
                                    ○ Match '1'.<br/>
                                    ○ Match a Unicode digit.<br/>
                                ○ Match a sequence of expressions.<br/>
                                    ○ Match '2'.<br/>
                                    ○ Match a Unicode digit.<br/>
                                ○ Match a sequence of expressions.<br/>
                                    ○ Match '3'.<br/>
                                    ○ Match a character in the set [01].<br/>
                        ○ Match a sequence of expressions.<br/>
                            ○ Match the string "02".<br/>
                            ○ Match with 3 alternative expressions.<br/>
                                ○ Match a sequence of expressions.<br/>
                                    ○ Match '0'.<br/>
                                    ○ Match a character in the set [1-9].<br/>
                                ○ Match a sequence of expressions.<br/>
                                    ○ Match '1'.<br/>
                                    ○ Match a Unicode digit.<br/>
                                ○ Match a sequence of expressions.<br/>
                                    ○ Match '2'.<br/>
                                    ○ Match a Unicode digit.<br/>
                ○ Match a sequence of expressions.<br/>
                    ○ Match a Unicode digit exactly 4 times.<br/>
                    ○ Match with 3 alternative expressions.<br/>
                        ○ Match a sequence of expressions.<br/>
                            ○ Match with 2 alternative expressions.<br/>
                                ○ Match a sequence of expressions.<br/>
                                    ○ Match '0'.<br/>
                                    ○ Match a character in the set [469].<br/>
                                ○ Match the string "11".<br/>
                            ○ Match with 4 alternative expressions.<br/>
                                ○ Match a sequence of expressions.<br/>
                                    ○ Match '0'.<br/>
                                    ○ Match a character in the set [1-9].<br/>
                                ○ Match a sequence of expressions.<br/>
                                    ○ Match '1'.<br/>
                                    ○ Match a Unicode digit.<br/>
                                ○ Match a sequence of expressions.<br/>
                                    ○ Match '2'.<br/>
                                    ○ Match a Unicode digit.<br/>
                                ○ Match the string "30".<br/>
                        ○ Match a sequence of expressions.<br/>
                            ○ Match with 2 alternative expressions.<br/>
                                ○ Match a sequence of expressions.<br/>
                                    ○ Match '0'.<br/>
                                    ○ Match a character in the set [13578].<br/>
                                ○ Match a sequence of expressions.<br/>
                                    ○ Match '1'.<br/>
                                    ○ Match a character in the set [02].<br/>
                            ○ Match with 4 alternative expressions.<br/>
                                ○ Match a sequence of expressions.<br/>
                                    ○ Match '0'.<br/>
                                    ○ Match a character in the set [1-9].<br/>
                                ○ Match a sequence of expressions.<br/>
                                    ○ Match '1'.<br/>
                                    ○ Match a Unicode digit.<br/>
                                ○ Match a sequence of expressions.<br/>
                                    ○ Match '2'.<br/>
                                    ○ Match a Unicode digit.<br/>
                                ○ Match a sequence of expressions.<br/>
                                    ○ Match '3'.<br/>
                                    ○ Match a character in the set [01].<br/>
                        ○ Match a sequence of expressions.<br/>
                            ○ Match the string "02".<br/>
                            ○ Match with 2 alternative expressions.<br/>
                                ○ Match a sequence of expressions.<br/>
                                    ○ Match a character in the set [01].<br/>
                                    ○ Match a Unicode digit.<br/>
                                ○ Match a sequence of expressions.<br/>
                                    ○ Match '2'.<br/>
                                    ○ Match a character in the set [0-8].<br/>
            ○ Match with 3 alternative expressions.<br/>
                ○ Match a sequence of expressions.<br/>
                    ○ Match '0'.<br/>
                    ○ Match a Unicode digit.<br/>
                ○ Match a sequence of expressions.<br/>
                    ○ Match '1'.<br/>
                    ○ Match a Unicode digit.<br/>
                ○ Match a sequence of expressions.<br/>
                    ○ Match '2'.<br/>
                    ○ Match a character in the set [0-3].<br/>
            ○ Match a character in the set [0-5].<br/>
            ○ Match a Unicode digit.<br/>
            ○ Match a Unicode digit.<br/>
            ○ Match '{' atomically at least 1 and at most 3 times.<br/>
            ○ Match '}'.<br/>
            ○ Match if at the end of the string or if before an ending newline.<br/>
            </code>
            </remarks>
        </member>
        <member name="M:Solidsoft.Reply.Parsers.AnsiMhDi.EntityResolver.FormatYyyyWwRegEx">
            <remarks>
            Pattern:<br/>
            <code>^([1-2]\\d)(\\d\\d)(0[1-9]|[1-4]\\d|5[0-3])$</code><br/>
            Explanation:<br/>
            <code>
            ○ Match if at the beginning of the string.<br/>
            ○ 1st capture group.<br/>
                ○ Match a character in the set [12].<br/>
                ○ Match a Unicode digit.<br/>
            ○ 2nd capture group.<br/>
                ○ Match a Unicode digit exactly 2 times.<br/>
            ○ 3rd capture group.<br/>
                ○ Match with 3 alternative expressions.<br/>
                    ○ Match a sequence of expressions.<br/>
                        ○ Match '0'.<br/>
                        ○ Match a character in the set [1-9].<br/>
                    ○ Match a sequence of expressions.<br/>
                        ○ Match a character in the set [1-4].<br/>
                        ○ Match a Unicode digit.<br/>
                    ○ Match a sequence of expressions.<br/>
                        ○ Match '5'.<br/>
                        ○ Match a character in the set [0-3].<br/>
            ○ Match if at the end of the string or if before an ending newline.<br/>
            </code>
            </remarks>
        </member>
        <member name="M:Solidsoft.Reply.Parsers.AnsiMhDi.EntityResolver.OldestAndNewestManufacturingDateRegEx">
            <remarks>
            Pattern:<br/>
            <code>^\\d{2}((0[1-9])|([1-4]\\d)|(5[0-3]))\\d{2}((0[1-9])|([1-4]\\d)|(5[0-3]))$</code><br/>
            Explanation:<br/>
            <code>
            ○ Match if at the beginning of the string.<br/>
            ○ Match a Unicode digit exactly 2 times.<br/>
            ○ 1st capture group.<br/>
                ○ Match with 3 alternative expressions.<br/>
                    ○ 2nd capture group.<br/>
                        ○ Match '0'.<br/>
                        ○ Match a character in the set [1-9].<br/>
                    ○ 3rd capture group.<br/>
                        ○ Match a character in the set [1-4].<br/>
                        ○ Match a Unicode digit.<br/>
                    ○ 4th capture group.<br/>
                        ○ Match '5'.<br/>
                        ○ Match a character in the set [0-3].<br/>
            ○ Match a Unicode digit exactly 2 times.<br/>
            ○ 5th capture group.<br/>
                ○ Match with 3 alternative expressions.<br/>
                    ○ 6th capture group.<br/>
                        ○ Match '0'.<br/>
                        ○ Match a character in the set [1-9].<br/>
                    ○ 7th capture group.<br/>
                        ○ Match a character in the set [1-4].<br/>
                        ○ Match a Unicode digit.<br/>
                    ○ 8th capture group.<br/>
                        ○ Match '5'.<br/>
                        ○ Match a character in the set [0-3].<br/>
            ○ Match if at the end of the string or if before an ending newline.<br/>
            </code>
            </remarks>
        </member>
        <member name="M:Solidsoft.Reply.Parsers.AnsiMhDi.EntityResolver.HarvestDateRangeRegEx">
            <remarks>
            Pattern:<br/>
            <code>^(\\d{4}[-/]?((0[13-9]|1[012])[-/]?(0[1-9]|[12]\\d|30)|(0[13578]|1[02])[-/]?31|02[-/]?(0[1-9]|1\\d|2[0-8]))|(\\d{2}(([2468][048]|[02468][48])|[13579][26])|([13579][26]|[02468][048]|0\\d|1[0-6])00)[-/]?02[-/]?29)(\\d{4}[-/]?((0[13-9]|1[012])[-/]?(0[1-9]|[12]\\d|30)|(0[13578]|1[02])[-/]?31|02[-/]?(0[1-9]|1\\d|2[0-8]))|(\\d{2}(([2468][048]|[02468][48])|[13579][26])|([13579][26]|[02468][048]|0\\d|1[0-6])00)[-/]?02[-/]?29)$</code><br/>
            Explanation:<br/>
            <code>
            ○ Match if at the beginning of the string.<br/>
            ○ 1st capture group.<br/>
                ○ Match with 2 alternative expressions.<br/>
                    ○ Match a sequence of expressions.<br/>
                        ○ Match a Unicode digit exactly 4 times.<br/>
                        ○ Match a character in the set [-/] atomically, optionally.<br/>
                        ○ 2nd capture group.<br/>
                            ○ Match with 3 alternative expressions.<br/>
                                ○ Match a sequence of expressions.<br/>
                                    ○ 3rd capture group.<br/>
                                        ○ Match with 2 alternative expressions.<br/>
                                            ○ Match a sequence of expressions.<br/>
                                                ○ Match '0'.<br/>
                                                ○ Match a character in the set [13-9].<br/>
                                            ○ Match a sequence of expressions.<br/>
                                                ○ Match '1'.<br/>
                                                ○ Match a character in the set [0-2].<br/>
                                    ○ Match a character in the set [-/] atomically, optionally.<br/>
                                    ○ 4th capture group.<br/>
                                        ○ Match with 3 alternative expressions.<br/>
                                            ○ Match a sequence of expressions.<br/>
                                                ○ Match '0'.<br/>
                                                ○ Match a character in the set [1-9].<br/>
                                            ○ Match a sequence of expressions.<br/>
                                                ○ Match a character in the set [12].<br/>
                                                ○ Match a Unicode digit.<br/>
                                            ○ Match the string "30".<br/>
                                ○ Match a sequence of expressions.<br/>
                                    ○ 5th capture group.<br/>
                                        ○ Match with 2 alternative expressions.<br/>
                                            ○ Match a sequence of expressions.<br/>
                                                ○ Match '0'.<br/>
                                                ○ Match a character in the set [13578].<br/>
                                            ○ Match a sequence of expressions.<br/>
                                                ○ Match '1'.<br/>
                                                ○ Match a character in the set [02].<br/>
                                    ○ Match a character in the set [-/] atomically, optionally.<br/>
                                    ○ Match the string "31".<br/>
                                ○ Match a sequence of expressions.<br/>
                                    ○ Match the string "02".<br/>
                                    ○ Match a character in the set [-/] atomically, optionally.<br/>
                                    ○ 6th capture group.<br/>
                                        ○ Match with 3 alternative expressions.<br/>
                                            ○ Match a sequence of expressions.<br/>
                                                ○ Match '0'.<br/>
                                                ○ Match a character in the set [1-9].<br/>
                                            ○ Match a sequence of expressions.<br/>
                                                ○ Match '1'.<br/>
                                                ○ Match a Unicode digit.<br/>
                                            ○ Match a sequence of expressions.<br/>
                                                ○ Match '2'.<br/>
                                                ○ Match a character in the set [0-8].<br/>
                    ○ Match a sequence of expressions.<br/>
                        ○ 7th capture group.<br/>
                            ○ Match with 2 alternative expressions.<br/>
                                ○ Match a sequence of expressions.<br/>
                                    ○ Match a Unicode digit exactly 2 times.<br/>
                                    ○ 8th capture group.<br/>
                                        ○ Match with 2 alternative expressions.<br/>
                                            ○ 9th capture group.<br/>
                                                ○ Match with 2 alternative expressions.<br/>
                                                    ○ Match a sequence of expressions.<br/>
                                                        ○ Match a character in the set [2468].<br/>
                                                        ○ Match a character in the set [048].<br/>
                                                    ○ Match a sequence of expressions.<br/>
                                                        ○ Match a character in the set [02468].<br/>
                                                        ○ Match a character in the set [48].<br/>
                                            ○ Match a sequence of expressions.<br/>
                                                ○ Match a character in the set [13579].<br/>
                                                ○ Match a character in the set [26].<br/>
                                ○ Match a sequence of expressions.<br/>
                                    ○ 10th capture group.<br/>
                                        ○ Match with 4 alternative expressions.<br/>
                                            ○ Match a sequence of expressions.<br/>
                                                ○ Match a character in the set [13579].<br/>
                                                ○ Match a character in the set [26].<br/>
                                            ○ Match a sequence of expressions.<br/>
                                                ○ Match a character in the set [02468].<br/>
                                                ○ Match a character in the set [048].<br/>
                                            ○ Match a sequence of expressions.<br/>
                                                ○ Match '0'.<br/>
                                                ○ Match a Unicode digit.<br/>
                                            ○ Match a sequence of expressions.<br/>
                                                ○ Match '1'.<br/>
                                                ○ Match a character in the set [0-6].<br/>
                                    ○ Match the string "00".<br/>
                        ○ Match a character in the set [-/] atomically, optionally.<br/>
                        ○ Match the string "02".<br/>
                        ○ Match a character in the set [-/] atomically, optionally.<br/>
                        ○ Match the string "29".<br/>
            ○ 11th capture group.<br/>
                ○ Match with 2 alternative expressions.<br/>
                    ○ Match a sequence of expressions.<br/>
                        ○ Match a Unicode digit exactly 4 times.<br/>
                        ○ Match a character in the set [-/] atomically, optionally.<br/>
                        ○ 12th capture group.<br/>
                            ○ Match with 3 alternative expressions.<br/>
                                ○ Match a sequence of expressions.<br/>
                                    ○ 13th capture group.<br/>
                                        ○ Match with 2 alternative expressions.<br/>
                                            ○ Match a sequence of expressions.<br/>
                                                ○ Match '0'.<br/>
                                                ○ Match a character in the set [13-9].<br/>
                                            ○ Match a sequence of expressions.<br/>
                                                ○ Match '1'.<br/>
                                                ○ Match a character in the set [0-2].<br/>
                                    ○ Match a character in the set [-/] atomically, optionally.<br/>
                                    ○ 14th capture group.<br/>
                                        ○ Match with 3 alternative expressions.<br/>
                                            ○ Match a sequence of expressions.<br/>
                                                ○ Match '0'.<br/>
                                                ○ Match a character in the set [1-9].<br/>
                                            ○ Match a sequence of expressions.<br/>
                                                ○ Match a character in the set [12].<br/>
                                                ○ Match a Unicode digit.<br/>
                                            ○ Match the string "30".<br/>
                                ○ Match a sequence of expressions.<br/>
                                    ○ 15th capture group.<br/>
                                        ○ Match with 2 alternative expressions.<br/>
                                            ○ Match a sequence of expressions.<br/>
                                                ○ Match '0'.<br/>
                                                ○ Match a character in the set [13578].<br/>
                                            ○ Match a sequence of expressions.<br/>
                                                ○ Match '1'.<br/>
                                                ○ Match a character in the set [02].<br/>
                                    ○ Match a character in the set [-/] atomically, optionally.<br/>
                                    ○ Match the string "31".<br/>
                                ○ Match a sequence of expressions.<br/>
                                    ○ Match the string "02".<br/>
                                    ○ Match a character in the set [-/] atomically, optionally.<br/>
                                    ○ 16th capture group.<br/>
                                        ○ Match with 3 alternative expressions.<br/>
                                            ○ Match a sequence of expressions.<br/>
                                                ○ Match '0'.<br/>
                                                ○ Match a character in the set [1-9].<br/>
                                            ○ Match a sequence of expressions.<br/>
                                                ○ Match '1'.<br/>
                                                ○ Match a Unicode digit.<br/>
                                            ○ Match a sequence of expressions.<br/>
                                                ○ Match '2'.<br/>
                                                ○ Match a character in the set [0-8].<br/>
                    ○ Match a sequence of expressions.<br/>
                        ○ 17th capture group.<br/>
                            ○ Match with 2 alternative expressions.<br/>
                                ○ Match a sequence of expressions.<br/>
                                    ○ Match a Unicode digit exactly 2 times.<br/>
                                    ○ 18th capture group.<br/>
                                        ○ Match with 2 alternative expressions.<br/>
                                            ○ 19th capture group.<br/>
                                                ○ Match with 2 alternative expressions.<br/>
                                                    ○ Match a sequence of expressions.<br/>
                                                        ○ Match a character in the set [2468].<br/>
                                                        ○ Match a character in the set [048].<br/>
                                                    ○ Match a sequence of expressions.<br/>
                                                        ○ Match a character in the set [02468].<br/>
                                                        ○ Match a character in the set [48].<br/>
                                            ○ Match a sequence of expressions.<br/>
                                                ○ Match a character in the set [13579].<br/>
                                                ○ Match a character in the set [26].<br/>
                                ○ Match a sequence of expressions.<br/>
                                    ○ 20th capture group.<br/>
                                        ○ Match with 4 alternative expressions.<br/>
                                            ○ Match a sequence of expressions.<br/>
                                                ○ Match a character in the set [13579].<br/>
                                                ○ Match a character in the set [26].<br/>
                                            ○ Match a sequence of expressions.<br/>
                                                ○ Match a character in the set [02468].<br/>
                                                ○ Match a character in the set [048].<br/>
                                            ○ Match a sequence of expressions.<br/>
                                                ○ Match '0'.<br/>
                                                ○ Match a Unicode digit.<br/>
                                            ○ Match a sequence of expressions.<br/>
                                                ○ Match '1'.<br/>
                                                ○ Match a character in the set [0-6].<br/>
                                    ○ Match the string "00".<br/>
                        ○ Match a character in the set [-/] atomically, optionally.<br/>
                        ○ Match the string "02".<br/>
                        ○ Match a character in the set [-/] atomically, optionally.<br/>
                        ○ Match the string "29".<br/>
            ○ Match if at the end of the string or if before an ending newline.<br/>
            </code>
            </remarks>
        </member>
        <member name="M:Solidsoft.Reply.Parsers.AnsiMhDi.EntityResolver.UniformResourceLocatorRegEx">
            <remarks>
            Pattern:<br/>
            <code>^(http[s]?:\\/\\/((([a-zA-Z0-9]([a-zA-Z0-9]|-)*[a-zA-Z0-9]|[a-zA-Z0-9])\\\\.)*[a-zA-Z]([a-zA-Z0-9]|-)*[a-zA-Z0-9]|[a-zA-Z]|\\d+\\\\.\\d+\\\\.\\d+\\\\.\\d+)(:\\d+)?(\\/([a-zA-Z]|\\d|[-$_.+]|[!*'(),]|%\\d|A-F|a-f\\d|A-F|a-f|;|\\\\?|&amp;|=)*(\\/([a-zA-Z]|\\d|[-$_.+]|[!*'(),]|%\\d|A-F|a-f\\d|A-F|a-f|;|\\\\?|&amp;|=)*)*(\\\\?([a-zA-Z]|\\d|[-$_.+]|[!*'(),]|%\\d|A-F|a-f\\d|A-F|a-f|;|\\\\?|&amp;|=)*)?)?)$</code><br/>
            Explanation:<br/>
            <code>
            ○ Match if at the beginning of the string.<br/>
            ○ 1st capture group.<br/>
                ○ Match the string "http".<br/>
                ○ Match 's' atomically, optionally.<br/>
                ○ Match the string "://".<br/>
                ○ 2nd capture group.<br/>
                    ○ Match with 3 alternative expressions.<br/>
                        ○ Match a sequence of expressions.<br/>
                            ○ Loop greedily any number of times.<br/>
                                ○ 3rd capture group.<br/>
                                    ○ 4th capture group.<br/>
                                        ○ Match with 2 alternative expressions.<br/>
                                            ○ Match a sequence of expressions.<br/>
                                                ○ Match a character in the set [0-9A-Za-z].<br/>
                                                ○ Loop greedily any number of times.<br/>
                                                    ○ 5th capture group.<br/>
                                                        ○ Match a character in the set [-0-9A-Za-z].<br/>
                                                ○ Match a character in the set [0-9A-Za-z].<br/>
                                            ○ Match a character in the set [0-9A-Za-z].<br/>
                                    ○ Match '\\'.<br/>
                                    ○ Match any character other than '\n'.<br/>
                            ○ Match a character in the set [A-Za-z].<br/>
                            ○ Loop greedily any number of times.<br/>
                                ○ 6th capture group.<br/>
                                    ○ Match a character in the set [-0-9A-Za-z].<br/>
                            ○ Match a character in the set [0-9A-Za-z].<br/>
                        ○ Match a character in the set [A-Za-z].<br/>
                        ○ Match a sequence of expressions.<br/>
                            ○ Match a Unicode digit atomically at least once.<br/>
                            ○ Match '\\'.<br/>
                            ○ Match any character other than '\n'.<br/>
                            ○ Match a Unicode digit atomically at least once.<br/>
                            ○ Match '\\'.<br/>
                            ○ Match any character other than '\n'.<br/>
                            ○ Match a Unicode digit atomically at least once.<br/>
                            ○ Match '\\'.<br/>
                            ○ Match any character other than '\n'.<br/>
                            ○ Match a Unicode digit greedily at least once.<br/>
                ○ Optional (greedy).<br/>
                    ○ 7th capture group.<br/>
                        ○ Match ':'.<br/>
                        ○ Match a Unicode digit greedily at least once.<br/>
                ○ Optional (greedy).<br/>
                    ○ 8th capture group.<br/>
                        ○ Match '/'.<br/>
                        ○ Loop greedily any number of times.<br/>
                            ○ 9th capture group.<br/>
                                ○ Match with 9 alternative expressions.<br/>
                                    ○ Match a character in the set [!$'-.A-Z_a-z\d].<br/>
                                    ○ Match a sequence of expressions.<br/>
                                        ○ Match '%'.<br/>
                                        ○ Match a Unicode digit.<br/>
                                    ○ Match the string "A-F".<br/>
                                    ○ Match a sequence of expressions.<br/>
                                        ○ Match the string "a-f".<br/>
                                        ○ Match a Unicode digit.<br/>
                                    ○ Match the string "A-F".<br/>
                                    ○ Match the string "a-f".<br/>
                                    ○ Match ';'.<br/>
                                    ○ Match '\\' greedily, optionally.<br/>
                                    ○ Match a character in the set [&amp;=].<br/>
                        ○ Loop greedily any number of times.<br/>
                            ○ 10th capture group.<br/>
                                ○ Match '/'.<br/>
                                ○ Loop greedily any number of times.<br/>
                                    ○ 11th capture group.<br/>
                                        ○ Match with 9 alternative expressions.<br/>
                                            ○ Match a character in the set [!$'-.A-Z_a-z\d].<br/>
                                            ○ Match a sequence of expressions.<br/>
                                                ○ Match '%'.<br/>
                                                ○ Match a Unicode digit.<br/>
                                            ○ Match the string "A-F".<br/>
                                            ○ Match a sequence of expressions.<br/>
                                                ○ Match the string "a-f".<br/>
                                                ○ Match a Unicode digit.<br/>
                                            ○ Match the string "A-F".<br/>
                                            ○ Match the string "a-f".<br/>
                                            ○ Match ';'.<br/>
                                            ○ Match '\\' greedily, optionally.<br/>
                                            ○ Match a character in the set [&amp;=].<br/>
                        ○ Optional (greedy).<br/>
                            ○ 12th capture group.<br/>
                                ○ Match '\\' greedily, optionally.<br/>
                                ○ Loop greedily any number of times.<br/>
                                    ○ 13th capture group.<br/>
                                        ○ Match with 9 alternative expressions.<br/>
                                            ○ Match a character in the set [!$'-.A-Z_a-z\d].<br/>
                                            ○ Match a sequence of expressions.<br/>
                                                ○ Match '%'.<br/>
                                                ○ Match a Unicode digit.<br/>
                                            ○ Match the string "A-F".<br/>
                                            ○ Match a sequence of expressions.<br/>
                                                ○ Match the string "a-f".<br/>
                                                ○ Match a Unicode digit.<br/>
                                            ○ Match the string "A-F".<br/>
                                            ○ Match the string "a-f".<br/>
                                            ○ Match ';'.<br/>
                                            ○ Match '\\' greedily, optionally.<br/>
                                            ○ Match a character in the set [&amp;=].<br/>
            ○ Match if at the end of the string or if before an ending newline.<br/>
            </code>
            </remarks>
        </member>
        <member name="M:Solidsoft.Reply.Parsers.AnsiMhDi.EntityResolver.AlphanumericCageSnRegEx">
            <remarks>
            Pattern:<br/>
            <code>[0-9A-Z-/]{6,25}</code><br/>
            Explanation:<br/>
            <code>
            ○ Match a character in the set [-/-9A-Z] atomically at least 6 and at most 25 times.<br/>
            </code>
            </remarks>
        </member>
        <member name="M:Solidsoft.Reply.Parsers.AnsiMhDi.EntityResolver.AlphanumericRegEx2">
            <remarks>
            Pattern:<br/>
            <code>[0-9A-Z]{2}</code><br/>
            Explanation:<br/>
            <code>
            ○ Match a character in the set [0-9A-Z] exactly 2 times.<br/>
            </code>
            </remarks>
        </member>
        <member name="M:Solidsoft.Reply.Parsers.AnsiMhDi.EntityResolver.AlphanumericRegEx3">
            <remarks>
            Pattern:<br/>
            <code>[0-9A-Z]{3}</code><br/>
            Explanation:<br/>
            <code>
            ○ Match a character in the set [0-9A-Z] exactly 3 times.<br/>
            </code>
            </remarks>
        </member>
        <member name="M:Solidsoft.Reply.Parsers.AnsiMhDi.EntityResolver.AlphanumericRegEx4">
            <remarks>
            Pattern:<br/>
            <code>[0-9A-Z]{4}</code><br/>
            Explanation:<br/>
            <code>
            ○ Match a character in the set [0-9A-Z] exactly 4 times.<br/>
            </code>
            </remarks>
        </member>
        <member name="M:Solidsoft.Reply.Parsers.AnsiMhDi.EntityResolver.AlphanumericRegEx5">
            <remarks>
            Pattern:<br/>
            <code>[0-9A-Z]{5}</code><br/>
            Explanation:<br/>
            <code>
            ○ Match a character in the set [0-9A-Z] exactly 5 times.<br/>
            </code>
            </remarks>
        </member>
        <member name="M:Solidsoft.Reply.Parsers.AnsiMhDi.EntityResolver.AlphanumericRegEx6">
            <remarks>
            Pattern:<br/>
            <code>[0-9A-Z]{6}</code><br/>
            Explanation:<br/>
            <code>
            ○ Match a character in the set [0-9A-Z] exactly 6 times.<br/>
            </code>
            </remarks>
        </member>
        <member name="M:Solidsoft.Reply.Parsers.AnsiMhDi.EntityResolver.AlphanumericRegEx10">
            <remarks>
            Pattern:<br/>
            <code>[0-9A-Z]{10}</code><br/>
            Explanation:<br/>
            <code>
            ○ Match a character in the set [0-9A-Z] exactly 10 times.<br/>
            </code>
            </remarks>
        </member>
        <member name="M:Solidsoft.Reply.Parsers.AnsiMhDi.EntityResolver.AlphanumericRegEx12">
            <remarks>
            Pattern:<br/>
            <code>[0-9A-Z]{12}</code><br/>
            Explanation:<br/>
            <code>
            ○ Match a character in the set [0-9A-Z] exactly 12 times.<br/>
            </code>
            </remarks>
        </member>
        <member name="M:Solidsoft.Reply.Parsers.AnsiMhDi.EntityResolver.AlphanumericRegEx18">
            <remarks>
            Pattern:<br/>
            <code>[0-9A-Z]{18}</code><br/>
            Explanation:<br/>
            <code>
            ○ Match a character in the set [0-9A-Z] exactly 18 times.<br/>
            </code>
            </remarks>
        </member>
        <member name="M:Solidsoft.Reply.Parsers.AnsiMhDi.EntityResolver.AlphanumericRegEx0103">
            <remarks>
            Pattern:<br/>
            <code>[0-9A-Z]{1,3}</code><br/>
            Explanation:<br/>
            <code>
            ○ Match a character in the set [0-9A-Z] atomically at least 1 and at most 3 times.<br/>
            </code>
            </remarks>
        </member>
        <member name="M:Solidsoft.Reply.Parsers.AnsiMhDi.EntityResolver.AlphanumericRegEx0109">
            <remarks>
            Pattern:<br/>
            <code>[0-9A-Z]{1,9}</code><br/>
            Explanation:<br/>
            <code>
            ○ Match a character in the set [0-9A-Z] atomically at least 1 and at most 9 times.<br/>
            </code>
            </remarks>
        </member>
        <member name="M:Solidsoft.Reply.Parsers.AnsiMhDi.EntityResolver.AlphanumericRegEx0110">
            <remarks>
            Pattern:<br/>
            <code>[0-9A-Z]{1,10}</code><br/>
            Explanation:<br/>
            <code>
            ○ Match a character in the set [0-9A-Z] atomically at least 1 and at most 10 times.<br/>
            </code>
            </remarks>
        </member>
        <member name="M:Solidsoft.Reply.Parsers.AnsiMhDi.EntityResolver.AlphanumericRegEx0120">
            <remarks>
            Pattern:<br/>
            <code>[0-9A-Z]{1,20}</code><br/>
            Explanation:<br/>
            <code>
            ○ Match a character in the set [0-9A-Z] atomically at least 1 and at most 20 times.<br/>
            </code>
            </remarks>
        </member>
        <member name="M:Solidsoft.Reply.Parsers.AnsiMhDi.EntityResolver.AlphanumericRegEx0135">
            <remarks>
            Pattern:<br/>
            <code>[0-9A-Z]{1,35}</code><br/>
            Explanation:<br/>
            <code>
            ○ Match a character in the set [0-9A-Z] atomically at least 1 and at most 35 times.<br/>
            </code>
            </remarks>
        </member>
        <member name="M:Solidsoft.Reply.Parsers.AnsiMhDi.EntityResolver.AlphanumericRegEx0150">
            <remarks>
            Pattern:<br/>
            <code>[0-9A-Z]{1,50}</code><br/>
            Explanation:<br/>
            <code>
            ○ Match a character in the set [0-9A-Z] atomically at least 1 and at most 50 times.<br/>
            </code>
            </remarks>
        </member>
        <member name="M:Solidsoft.Reply.Parsers.AnsiMhDi.EntityResolver.AlphanumericRegEx01100">
            <remarks>
            Pattern:<br/>
            <code>[0-9A-Z]{1,100}</code><br/>
            Explanation:<br/>
            <code>
            ○ Match a character in the set [0-9A-Z] atomically at least 1 and at most 100 times.<br/>
            </code>
            </remarks>
        </member>
        <member name="M:Solidsoft.Reply.Parsers.AnsiMhDi.EntityResolver.AlphanumericRegEx0230">
            <remarks>
            Pattern:<br/>
            <code>[0-9A-Z]{2,30}</code><br/>
            Explanation:<br/>
            <code>
            ○ Match a character in the set [0-9A-Z] atomically at least 2 and at most 30 times.<br/>
            </code>
            </remarks>
        </member>
        <member name="M:Solidsoft.Reply.Parsers.AnsiMhDi.EntityResolver.AlphanumericRegEx0235">
            <remarks>
            Pattern:<br/>
            <code>[0-9A-Z]{2,35}</code><br/>
            Explanation:<br/>
            <code>
            ○ Match a character in the set [0-9A-Z] atomically at least 2 and at most 35 times.<br/>
            </code>
            </remarks>
        </member>
        <member name="M:Solidsoft.Reply.Parsers.AnsiMhDi.EntityResolver.AlphanumericRegEx0309">
            <remarks>
            Pattern:<br/>
            <code>[0-9A-Z]{3,9}</code><br/>
            Explanation:<br/>
            <code>
            ○ Match a character in the set [0-9A-Z] atomically at least 3 and at most 9 times.<br/>
            </code>
            </remarks>
        </member>
        <member name="M:Solidsoft.Reply.Parsers.AnsiMhDi.EntityResolver.AlphanumericRegEx0322">
            <remarks>
            Pattern:<br/>
            <code>[0-9A-Z]{3,22}</code><br/>
            Explanation:<br/>
            <code>
            ○ Match a character in the set [0-9A-Z] atomically at least 3 and at most 22 times.<br/>
            </code>
            </remarks>
        </member>
        <member name="M:Solidsoft.Reply.Parsers.AnsiMhDi.EntityResolver.AlphanumericRegEx0335">
            <remarks>
            Pattern:<br/>
            <code>[0-9A-Z]{3,35}</code><br/>
            Explanation:<br/>
            <code>
            ○ Match a character in the set [0-9A-Z] atomically at least 3 and at most 35 times.<br/>
            </code>
            </remarks>
        </member>
        <member name="M:Solidsoft.Reply.Parsers.AnsiMhDi.EntityResolver.AlphanumericRegEx0411">
            <remarks>
            Pattern:<br/>
            <code>[0-9A-Z]{4,11}</code><br/>
            Explanation:<br/>
            <code>
            ○ Match a character in the set [0-9A-Z] atomically at least 4 and at most 11 times.<br/>
            </code>
            </remarks>
        </member>
        <member name="M:Solidsoft.Reply.Parsers.AnsiMhDi.EntityResolver.AlphanumericRegEx0425">
            <remarks>
            Pattern:<br/>
            <code>[0-9A-Z]{4,25}</code><br/>
            Explanation:<br/>
            <code>
            ○ Match a character in the set [0-9A-Z] atomically at least 4 and at most 25 times.<br/>
            </code>
            </remarks>
        </member>
        <member name="M:Solidsoft.Reply.Parsers.AnsiMhDi.EntityResolver.AlphanumericRegEx0529">
            <remarks>
            Pattern:<br/>
            <code>[0-9A-Z]{5,29}</code><br/>
            Explanation:<br/>
            <code>
            ○ Match a character in the set [0-9A-Z] atomically at least 5 and at most 29 times.<br/>
            </code>
            </remarks>
        </member>
        <member name="M:Solidsoft.Reply.Parsers.AnsiMhDi.EntityResolver.AlphanumericRegEx0516">
            <remarks>
            Pattern:<br/>
            <code>[0-9A-Z]{5,16}</code><br/>
            Explanation:<br/>
            <code>
            ○ Match a character in the set [0-9A-Z] atomically at least 5 and at most 16 times.<br/>
            </code>
            </remarks>
        </member>
        <member name="M:Solidsoft.Reply.Parsers.AnsiMhDi.EntityResolver.AlphanumericRegEx0522">
            <remarks>
            Pattern:<br/>
            <code>[0-9A-Z]{5,22}</code><br/>
            Explanation:<br/>
            <code>
            ○ Match a character in the set [0-9A-Z] atomically at least 5 and at most 22 times.<br/>
            </code>
            </remarks>
        </member>
        <member name="M:Solidsoft.Reply.Parsers.AnsiMhDi.EntityResolver.AlphanumericRegEx0635">
            <remarks>
            Pattern:<br/>
            <code>[0-9A-Z]{6,35}</code><br/>
            Explanation:<br/>
            <code>
            ○ Match a character in the set [0-9A-Z] atomically at least 6 and at most 35 times.<br/>
            </code>
            </remarks>
        </member>
        <member name="M:Solidsoft.Reply.Parsers.AnsiMhDi.EntityResolver.AlphanumericRegEx1012">
            <remarks>
            Pattern:<br/>
            <code>[0-9A-Z]{10,12}</code><br/>
            Explanation:<br/>
            <code>
            ○ Match a character in the set [0-9A-Z] atomically at least 10 and at most 12 times.<br/>
            </code>
            </remarks>
        </member>
        <member name="M:Solidsoft.Reply.Parsers.AnsiMhDi.EntityResolver.AlphanumericRegEx1015">
            <remarks>
            Pattern:<br/>
            <code>[0-9A-Z]{10,15}</code><br/>
            Explanation:<br/>
            <code>
            ○ Match a character in the set [0-9A-Z] atomically at least 10 and at most 15 times.<br/>
            </code>
            </remarks>
        </member>
        <member name="M:Solidsoft.Reply.Parsers.AnsiMhDi.EntityResolver.AlphanumericRegEx1315">
            <remarks>
            Pattern:<br/>
            <code>[0-9A-Z]{13,15}</code><br/>
            Explanation:<br/>
            <code>
            ○ Match a character in the set [0-9A-Z] atomically at least 13 and at most 15 times.<br/>
            </code>
            </remarks>
        </member>
        <member name="M:Solidsoft.Reply.Parsers.AnsiMhDi.EntityResolver.AlphanumericRegEx1626">
            <remarks>
            Pattern:<br/>
            <code>[0-9A-Z]{16,26}</code><br/>
            Explanation:<br/>
            <code>
            ○ Match a character in the set [0-9A-Z] atomically at least 16 and at most 26 times.<br/>
            </code>
            </remarks>
        </member>
        <member name="M:Solidsoft.Reply.Parsers.AnsiMhDi.EntityResolver.Alphanumeric04Alphanumeric0110RegEx">
            <remarks>
            Pattern:<br/>
            <code>[0-9A-Z]{4}.[0-9A-Z]{1,10}</code><br/>
            Explanation:<br/>
            <code>
            ○ Match a character in the set [0-9A-Z] exactly 4 times.<br/>
            ○ Match any character other than '\n'.<br/>
            ○ Match a character in the set [0-9A-Z] atomically at least 1 and at most 10 times.<br/>
            </code>
            </remarks>
        </member>
        <member name="M:Solidsoft.Reply.Parsers.AnsiMhDi.EntityResolver.Alphanumeric0132Alphanumeric03WithDashesRegEx">
            <remarks>
            Pattern:<br/>
            <code>[0-9A-Z]{1,32}([0-9A-Z]{3}|-[0-9A-Z]{2}|--[0-9A-Z]{1}|---)</code><br/>
            Explanation:<br/>
            <code>
            ○ Match a character in the set [0-9A-Z] greedily at least 1 and at most 32 times.<br/>
            ○ 1st capture group.<br/>
                ○ Match with 4 alternative expressions, atomically.<br/>
                    ○ Match a character in the set [0-9A-Z] exactly 3 times.<br/>
                    ○ Match a sequence of expressions.<br/>
                        ○ Match '-'.<br/>
                        ○ Match a character in the set [0-9A-Z] exactly 2 times.<br/>
                    ○ Match a sequence of expressions.<br/>
                        ○ Match the string "--".<br/>
                        ○ Match a character in the set [0-9A-Z].<br/>
                    ○ Match the string "---".<br/>
            </code>
            </remarks>
        </member>
        <member name="M:Solidsoft.Reply.Parsers.AnsiMhDi.EntityResolver.Alphanumeric11Numeric02">
            <remarks>
            Pattern:<br/>
            <code>[0-9A-Z]{11}\\d{2}$</code><br/>
            Explanation:<br/>
            <code>
            ○ Match a character in the set [0-9A-Z] exactly 11 times.<br/>
            ○ Match a Unicode digit exactly 2 times.<br/>
            ○ Match if at the end of the string or if before an ending newline.<br/>
            </code>
            </remarks>
        </member>
        <member name="M:Solidsoft.Reply.Parsers.AnsiMhDi.EntityResolver.Numeric02AlphanumericDash0106NumericDot05Alphanumeric02RegEx">
            <remarks>
            Pattern:<br/>
            <code>\\d{2}[A-Z0-9-]{1,6}[0-9.]{5}[0-9A-Z]{2}$</code><br/>
            Explanation:<br/>
            <code>
            ○ Match a Unicode digit exactly 2 times.<br/>
            ○ Match a character in the set [-0-9A-Z] greedily at least 1 and at most 6 times.<br/>
            ○ Match a character in the set [.0-9] exactly 5 times.<br/>
            ○ Match a character in the set [0-9A-Z] exactly 2 times.<br/>
            ○ Match if at the end of the string or if before an ending newline.<br/>
            </code>
            </remarks>
        </member>
        <member name="M:Solidsoft.Reply.Parsers.AnsiMhDi.EntityResolver.Alphanumeric0335Alpha0103RegEx">
            <remarks>
            Pattern:<br/>
            <code>[0-9A-Z]{3,35}\\+[A-Z]{1,3}$</code><br/>
            Explanation:<br/>
            <code>
            ○ Match a character in the set [0-9A-Z] atomically at least 3 and at most 35 times.<br/>
            ○ Match '+'.<br/>
            ○ Match a character in the set [A-Z] atomically at least 1 and at most 3 times.<br/>
            ○ Match if at the end of the string or if before an ending newline.<br/>
            </code>
            </remarks>
        </member>
        <member name="M:Solidsoft.Reply.Parsers.AnsiMhDi.EntityResolver.Alpha02Alphanumeric0327RegEx">
            <remarks>
            Pattern:<br/>
            <code>[A-Z]{2}[0-9A-Z]{3,27}$</code><br/>
            Explanation:<br/>
            <code>
            ○ Match a character in the set [A-Z] exactly 2 times.<br/>
            ○ Match a character in the set [0-9A-Z] atomically at least 3 and at most 27 times.<br/>
            ○ Match if at the end of the string or if before an ending newline.<br/>
            </code>
            </remarks>
        </member>
        <member name="M:Solidsoft.Reply.Parsers.AnsiMhDi.EntityResolver.Alpha03Numeric14Alphanumeric0133RegEx">
            <remarks>
            Pattern:<br/>
            <code>[A-Z]{3}\\d{14}[0-9A-Za-z*+-./()!]{1,33}$</code><br/>
            Explanation:<br/>
            <code>
            ○ Match a character in the set [A-Z] exactly 3 times.<br/>
            ○ Match a Unicode digit exactly 14 times.<br/>
            ○ Match a character in the set [!(-9A-Za-z] atomically at least 1 and at most 33 times.<br/>
            ○ Match if at the end of the string or if before an ending newline.<br/>
            </code>
            </remarks>
        </member>
        <member name="M:Solidsoft.Reply.Parsers.AnsiMhDi.EntityResolver.Alpha01Numeric04Alphanumeric0520RegEx">
            <remarks>
            Pattern:<br/>
            <code>[A-Z]{1}\\d{4}[0-9A-Z]{5,20}$</code><br/>
            Explanation:<br/>
            <code>
            ○ Match a character in the set [A-Z].<br/>
            ○ Match a Unicode digit exactly 4 times.<br/>
            ○ Match a character in the set [0-9A-Z] atomically at least 5 and at most 20 times.<br/>
            ○ Match if at the end of the string or if before an ending newline.<br/>
            </code>
            </remarks>
        </member>
        <member name="M:Solidsoft.Reply.Parsers.AnsiMhDi.EntityResolver.Numeric0108Alphanumeric02RegEx">
            <remarks>
            Pattern:<br/>
            <code>\\d{1,8}[0-9A-Z]{2}$</code><br/>
            Explanation:<br/>
            <code>
            ○ Match a Unicode digit greedily at least 1 and at most 8 times.<br/>
            ○ Match a character in the set [0-9A-Z] exactly 2 times.<br/>
            ○ Match if at the end of the string or if before an ending newline.<br/>
            </code>
            </remarks>
        </member>
        <member name="M:Solidsoft.Reply.Parsers.AnsiMhDi.EntityResolver.Numeric0110Alphanumeric03RegEx">
            <remarks>
            Pattern:<br/>
            <code>\\d{1,10}[0-9A-Z]{3}$</code><br/>
            Explanation:<br/>
            <code>
            ○ Match a Unicode digit greedily at least 1 and at most 10 times.<br/>
            ○ Match a character in the set [0-9A-Z] exactly 3 times.<br/>
            ○ Match if at the end of the string or if before an ending newline.<br/>
            </code>
            </remarks>
        </member>
        <member name="M:Solidsoft.Reply.Parsers.AnsiMhDi.EntityResolver.Numeric02Alphanumeric0342RegEx">
            <remarks>
            Pattern:<br/>
            <code>\\d{2}[0-9A-Z]{3,42}$</code><br/>
            Explanation:<br/>
            <code>
            ○ Match a Unicode digit exactly 2 times.<br/>
            ○ Match a character in the set [0-9A-Z] atomically at least 3 and at most 42 times.<br/>
            ○ Match if at the end of the string or if before an ending newline.<br/>
            </code>
            </remarks>
        </member>
        <member name="M:Solidsoft.Reply.Parsers.AnsiMhDi.EntityResolver.Alpha02Alphanumeric0318RegEx">
            <remarks>
            Pattern:<br/>
            <code>[A-Z]{2}[0-9A-Z]{3,18}$</code><br/>
            Explanation:<br/>
            <code>
            ○ Match a character in the set [A-Z] exactly 2 times.<br/>
            ○ Match a character in the set [0-9A-Z] atomically at least 3 and at most 18 times.<br/>
            ○ Match if at the end of the string or if before an ending newline.<br/>
            </code>
            </remarks>
        </member>
        <member name="M:Solidsoft.Reply.Parsers.AnsiMhDi.EntityResolver.AlphanumericSpace0160RegEx">
            <remarks>
            Pattern:<br/>
            <code>[0-9A-Z ]{1,60}$</code><br/>
            Explanation:<br/>
            <code>
            ○ Match a character in the set [ 0-9A-Z] atomically at least 1 and at most 60 times.<br/>
            ○ Match if at the end of the string or if before an ending newline.<br/>
            </code>
            </remarks>
        </member>
        <member name="M:Solidsoft.Reply.Parsers.AnsiMhDi.EntityResolver.AlphanumericPlus0150RegEx">
            <remarks>
            Pattern:<br/>
            <code>[0-9A-Z ]{1,50}$</code><br/>
            Explanation:<br/>
            <code>
            ○ Match a character in the set [ 0-9A-Z] atomically at least 1 and at most 50 times.<br/>
            ○ Match if at the end of the string or if before an ending newline.<br/>
            </code>
            </remarks>
        </member>
        <member name="M:Solidsoft.Reply.Parsers.AnsiMhDi.EntityResolver.AlphanumericPlus2050RegEx">
            <remarks>
            Pattern:<br/>
            <code>[0-9A-Z+]{20,50}$</code><br/>
            Explanation:<br/>
            <code>
            ○ Match a character in the set [+0-9A-Z] atomically at least 20 and at most 50 times.<br/>
            ○ Match if at the end of the string or if before an ending newline.<br/>
            </code>
            </remarks>
        </member>
        <member name="M:Solidsoft.Reply.Parsers.AnsiMhDi.EntityResolver.AlphanumericPlus0160RegEx">
            <remarks>
            Pattern:<br/>
            <code>[0-9A-Z ]{1,60}$</code><br/>
            Explanation:<br/>
            <code>
            ○ Match a character in the set [ 0-9A-Z] atomically at least 1 and at most 60 times.<br/>
            ○ Match if at the end of the string or if before an ending newline.<br/>
            </code>
            </remarks>
        </member>
        <member name="M:Solidsoft.Reply.Parsers.AnsiMhDi.EntityResolver.Alpha04Numeric07RegEx">
            <remarks>
            Pattern:<br/>
            <code>[A-Z]{4}\\d{7}$</code><br/>
            Explanation:<br/>
            <code>
            ○ Match a character in the set [A-Z] exactly 4 times.<br/>
            ○ Match a Unicode digit exactly 7 times.<br/>
            ○ Match if at the end of the string or if before an ending newline.<br/>
            </code>
            </remarks>
        </member>
        <member name="M:Solidsoft.Reply.Parsers.AnsiMhDi.EntityResolver.Alpha04Numeric0103RegEx">
            <remarks>
            Pattern:<br/>
            <code>[A-Z]{4}\\d{1,3}$</code><br/>
            Explanation:<br/>
            <code>
            ○ Match a character in the set [A-Z] exactly 4 times.<br/>
            ○ Match a Unicode digit atomically at least 1 and at most 3 times.<br/>
            ○ Match if at the end of the string or if before an ending newline.<br/>
            </code>
            </remarks>
        </member>
        <member name="M:Solidsoft.Reply.Parsers.AnsiMhDi.EntityResolver.Alpha03Numeric03RegEx">
            <remarks>
            Pattern:<br/>
            <code>[A-Z]{3}\\d{3}$</code><br/>
            Explanation:<br/>
            <code>
            ○ Match a character in the set [A-Z] exactly 3 times.<br/>
            ○ Match a Unicode digit exactly 3 times.<br/>
            ○ Match if at the end of the string or if before an ending newline.<br/>
            </code>
            </remarks>
        </member>
        <member name="M:Solidsoft.Reply.Parsers.AnsiMhDi.EntityResolver.Alpha02RegEx">
            <remarks>
            Pattern:<br/>
            <code>[A-Z]{2}$</code><br/>
            Explanation:<br/>
            <code>
            ○ Match a character in the set [A-Z] exactly 2 times.<br/>
            ○ Match if at the end of the string or if before an ending newline.<br/>
            </code>
            </remarks>
        </member>
        <member name="M:Solidsoft.Reply.Parsers.AnsiMhDi.EntityResolver.Invariant0212RegEx">
            <remarks>
            Pattern:<br/>
            <code>[-!"%&amp;'()*+,./0-9:;&lt;=&gt;?A-Z_a-z]{2,12}$</code><br/>
            Explanation:<br/>
            <code>
            ○ Match a character in the set [!"%-?A-Z_a-z] atomically at least 2 and at most 12 times.<br/>
            ○ Match if at the end of the string or if before an ending newline.<br/>
            </code>
            </remarks>
        </member>
        <member name="M:Solidsoft.Reply.Parsers.AnsiMhDi.EntityResolver.Alpha02Invariant0327RegEx">
            <remarks>
            Pattern:<br/>
            <code>[A-Z]{2}[-!"%&amp;'()*+,./0-9:;&lt;=&gt;?A-Z_a-z]{3,27}$</code><br/>
            Explanation:<br/>
            <code>
            ○ Match a character in the set [A-Z] exactly 2 times.<br/>
            ○ Match a character in the set [!"%-?A-Z_a-z] atomically at least 3 and at most 27 times.<br/>
            ○ Match if at the end of the string or if before an ending newline.<br/>
            </code>
            </remarks>
        </member>
        <member name="M:Solidsoft.Reply.Parsers.AnsiMhDi.EntityResolver.Numeric01RegEx">
            <remarks>
            Pattern:<br/>
            <code>\\d{1}$</code><br/>
            Explanation:<br/>
            <code>
            ○ Match a Unicode digit.<br/>
            ○ Match if at the end of the string or if before an ending newline.<br/>
            </code>
            </remarks>
        </member>
        <member name="M:Solidsoft.Reply.Parsers.AnsiMhDi.EntityResolver.Numeric05RegEx">
            <remarks>
            Pattern:<br/>
            <code>\\d{5}$</code><br/>
            Explanation:<br/>
            <code>
            ○ Match a Unicode digit exactly 5 times.<br/>
            ○ Match if at the end of the string or if before an ending newline.<br/>
            </code>
            </remarks>
        </member>
        <member name="M:Solidsoft.Reply.Parsers.AnsiMhDi.EntityResolver.Numeric09RegEx">
            <remarks>
            Pattern:<br/>
            <code>\\d{9}$</code><br/>
            Explanation:<br/>
            <code>
            ○ Match a Unicode digit exactly 9 times.<br/>
            ○ Match if at the end of the string or if before an ending newline.<br/>
            </code>
            </remarks>
        </member>
        <member name="M:Solidsoft.Reply.Parsers.AnsiMhDi.EntityResolver.Numeric14RegEx">
            <remarks>
            Pattern:<br/>
            <code>\\d{14}$</code><br/>
            Explanation:<br/>
            <code>
            ○ Match a Unicode digit exactly 14 times.<br/>
            ○ Match if at the end of the string or if before an ending newline.<br/>
            </code>
            </remarks>
        </member>
        <member name="M:Solidsoft.Reply.Parsers.AnsiMhDi.EntityResolver.Numeric18RegEx">
            <remarks>
            Pattern:<br/>
            <code>\\d{18}$</code><br/>
            Explanation:<br/>
            <code>
            ○ Match a Unicode digit exactly 18 times.<br/>
            ○ Match if at the end of the string or if before an ending newline.<br/>
            </code>
            </remarks>
        </member>
        <member name="M:Solidsoft.Reply.Parsers.AnsiMhDi.EntityResolver.Numeric0102RegEx">
            <remarks>
            Pattern:<br/>
            <code>\\d{1,2}$</code><br/>
            Explanation:<br/>
            <code>
            ○ Match a Unicode digit atomically at least 1 and at most 2 times.<br/>
            ○ Match if at the end of the string or if before an ending newline.<br/>
            </code>
            </remarks>
        </member>
        <member name="M:Solidsoft.Reply.Parsers.AnsiMhDi.EntityResolver.Numeric0406RegEx">
            <remarks>
            Pattern:<br/>
            <code>\\d{4,6}$</code><br/>
            Explanation:<br/>
            <code>
            ○ Match a Unicode digit atomically at least 4 and at most 6 times.<br/>
            ○ Match if at the end of the string or if before an ending newline.<br/>
            </code>
            </remarks>
        </member>
        <member name="M:Solidsoft.Reply.Parsers.AnsiMhDi.EntityResolver.Numeric0626RegEx">
            <remarks>
            Pattern:<br/>
            <code>\\d{6,26}$</code><br/>
            Explanation:<br/>
            <code>
            ○ Match a Unicode digit atomically at least 6 and at most 26 times.<br/>
            ○ Match if at the end of the string or if before an ending newline.<br/>
            </code>
            </remarks>
        </member>
        <member name="M:Solidsoft.Reply.Parsers.AnsiMhDi.EntityResolver.Numeric0712RegEx">
            <remarks>
            Pattern:<br/>
            <code>\\d{7,12}$</code><br/>
            Explanation:<br/>
            <code>
            ○ Match a Unicode digit atomically at least 7 and at most 12 times.<br/>
            ○ Match if at the end of the string or if before an ending newline.<br/>
            </code>
            </remarks>
        </member>
        <member name="M:Solidsoft.Reply.Parsers.AnsiMhDi.EntityResolver.Numeric0913RegEx">
            <remarks>
            Pattern:<br/>
            <code>\\d{9,13}$</code><br/>
            Explanation:<br/>
            <code>
            ○ Match a Unicode digit atomically at least 9 and at most 13 times.<br/>
            ○ Match if at the end of the string or if before an ending newline.<br/>
            </code>
            </remarks>
        </member>
        <member name="M:Solidsoft.Reply.Parsers.AnsiMhDi.EntityResolver.Numeric1012RegEx">
            <remarks>
            Pattern:<br/>
            <code>\\d{10,12}$</code><br/>
            Explanation:<br/>
            <code>
            ○ Match a Unicode digit atomically at least 10 and at most 12 times.<br/>
            ○ Match if at the end of the string or if before an ending newline.<br/>
            </code>
            </remarks>
        </member>
        <member name="M:Solidsoft.Reply.Parsers.AnsiMhDi.EntityResolver.Numeric1314RegEx">
            <remarks>
            Pattern:<br/>
            <code>\\d{13,14}$</code><br/>
            Explanation:<br/>
            <code>
            ○ Match a Unicode digit atomically at least 13 and at most 14 times.<br/>
            ○ Match if at the end of the string or if before an ending newline.<br/>
            </code>
            </remarks>
        </member>
        <member name="M:Solidsoft.Reply.Parsers.AnsiMhDi.EntityResolver.Numeric1426RegEx">
            <remarks>
            Pattern:<br/>
            <code>\\d{14,26}$</code><br/>
            Explanation:<br/>
            <code>
            ○ Match a Unicode digit atomically at least 14 and at most 26 times.<br/>
            ○ Match if at the end of the string or if before an ending newline.<br/>
            </code>
            </remarks>
        </member>
        <member name="M:Solidsoft.Reply.Parsers.AnsiMhDi.EntityResolver.NumericDot0110RegEx">
            <remarks>
            Pattern:<br/>
            <code>[0-9.]{1,10}$</code><br/>
            Explanation:<br/>
            <code>
            ○ Match a character in the set [.0-9] atomically at least 1 and at most 10 times.<br/>
            ○ Match if at the end of the string or if before an ending newline.<br/>
            </code>
            </remarks>
        </member>
        <member name="M:Solidsoft.Reply.Parsers.AnsiMhDi.EntityResolver.NumericDot0120RegEx">
            <remarks>
            Pattern:<br/>
            <code>[0-9.]{1,20}$</code><br/>
            Explanation:<br/>
            <code>
            ○ Match a character in the set [.0-9] atomically at least 1 and at most 20 times.<br/>
            ○ Match if at the end of the string or if before an ending newline.<br/>
            </code>
            </remarks>
        </member>
        <member name="M:Solidsoft.Reply.Parsers.AnsiMhDi.EntityResolver.NumericDot0105RegEx">
            <remarks>
            Pattern:<br/>
            <code>[0-9.]{1,5}$</code><br/>
            Explanation:<br/>
            <code>
            ○ Match a character in the set [.0-9] atomically at least 1 and at most 5 times.<br/>
            ○ Match if at the end of the string or if before an ending newline.<br/>
            </code>
            </remarks>
        </member>
        <member name="M:Solidsoft.Reply.Parsers.AnsiMhDi.EntityResolver.NumericDot0106RegEx">
            <remarks>
            Pattern:<br/>
            <code>[0-9.]{1,6}$</code><br/>
            Explanation:<br/>
            <code>
            ○ Match a character in the set [.0-9] atomically at least 1 and at most 6 times.<br/>
            ○ Match if at the end of the string or if before an ending newline.<br/>
            </code>
            </remarks>
        </member>
        <member name="M:Solidsoft.Reply.Parsers.AnsiMhDi.EntityResolver.MinusNumeric0104RegEx">
            <remarks>
            Pattern:<br/>
            <code>-?\\d{1,4}$</code><br/>
            Explanation:<br/>
            <code>
            ○ Match '-' atomically, optionally.<br/>
            ○ Match a Unicode digit atomically at least 1 and at most 4 times.<br/>
            ○ Match if at the end of the string or if before an ending newline.<br/>
            </code>
            </remarks>
        </member>
        <member name="M:Solidsoft.Reply.Parsers.AnsiMhDi.EntityResolver.GetDescriptors(System.Int32)">
            <summary>
              Returns the descriptors tuple for the given data identifier descriptor key.
            </summary>
            <param name="descriptorKey">The data identifier descriptor key.</param>
            <returns>The descriptors tuple for the given The data identifier descriptor key.</returns>
        </member>
        <member name="M:Solidsoft.Reply.Parsers.AnsiMhDi.EntityResolver.Validate(Solidsoft.Reply.Parsers.AnsiMhDi.ResolvedDataIdentifier)">
            <summary>
              Validates a resolved entity.
            </summary>
            <param name="resolvedEntity">The resolved entity to be validated.</param>
            <returns>A resolved entity object. If the value is invalid, the object records the error.</returns>
        </member>
        <member name="T:Solidsoft.Reply.Parsers.AnsiMhDi.Extensions">
            <summary>
                Extension methods.
            </summary>
        </member>
        <member name="M:Solidsoft.Reply.Parsers.AnsiMhDi.Extensions.ToInvariantString(System.Char)">
            <summary>
                Converts the value of this instance to its equivalent string representation using culture-invariant format
                information.
            </summary>
            <param name="thisCharacter">The character to be converted.</param>
            <returns>A culture-invariant string.</returns>
        </member>
        <member name="M:Solidsoft.Reply.Parsers.AnsiMhDi.Extensions.ToInvariantUpper(System.String)">
            <summary>
              Returns a copy of the string converted to uppercase, using culture-neutral casing rules.
            </summary>
            <param name="thisString">The string to be converted.</param>
            <returns>A string converted to uppercase.</returns>
        </member>
        <member name="T:Solidsoft.Reply.Parsers.AnsiMhDi.Parser">
            <summary>
              Barcode Parser for ANSI MH10.8 data.
            </summary>
        </member>
        <member name="M:Solidsoft.Reply.Parsers.AnsiMhDi.Parser.Parse(System.String,System.Action{Solidsoft.Reply.Parsers.Common.IResolvedEntity},System.Int32)">
            <summary>
              Parse ANSI MH10.8-encoded data.
            </summary>
            <param name="data">The data to be parsed.</param>
            <param name="processResolvedEntity">
              The function for processing resolved entities.
            </param>
            <param name="initialPosition">
              The initial character position.
            </param>
            <return>The pack identifier.</return>
        </member>
        <member name="M:Solidsoft.Reply.Parsers.AnsiMhDi.Parser.MatchDataIdentifierRegex">
            <remarks>
            Pattern:<br/>
            <code>^\\d{0,3}[a-zA-Z]</code><br/>
            Options:<br/>
            <code>RegexOptions.IgnoreCase</code><br/>
            Explanation:<br/>
            <code>
            ○ Match if at the beginning of the string.<br/>
            ○ Match a Unicode digit atomically at most 3 times.<br/>
            ○ Match a character in the set [A-Za-z\u0130\u212A].<br/>
            </code>
            </remarks>
        </member>
        <member name="M:Solidsoft.Reply.Parsers.AnsiMhDi.Parser.DoParseFields(System.String,System.Action{Solidsoft.Reply.Parsers.Common.IResolvedEntity},System.Int32)">
            <summary>
              Parse the fields in the record buffer.
            </summary>
            <param name="recordBuffer">
              The record buffer.
            </param>
            <param name="processResolvedEntity">
              The function for processing resolved entities.
            </param>
            <param name="currentPosition">
              The current character position.
            </param>
        </member>
        <member name="M:Solidsoft.Reply.Parsers.AnsiMhDi.Parser.DoParseRecords(System.String,System.Action{Solidsoft.Reply.Parsers.Common.IResolvedEntity},System.Int32)">
            <summary>
              Parse the records in the data buffer.
            </summary>
            <param name="dataBuffer">
              The data buffer.
            </param>
            <param name="processResolvedEntity">
              The function for processing resolved entities.
            </param>
            <param name="currentPosition">
              The current character position.
            </param>
        </member>
        <member name="T:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di0">
            <summary>
              Looks up a localized string similar to The &apos;PLUS&apos; character. Health Industry Business Communications Council (HIBCC).
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di10000">
            <summary>
              Looks up a localized string similar to Unique license plate number..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di10001">
            <summary>
              Looks up a localized string similar to Unique license plate number assigned to a transport unit which is the lowest level of packaging, the unbreakable unit..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di10002">
            <summary>
              Looks up a localized string similar to Unique license plate number assigned to a transport unit which contains multiple packages..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di10003">
            <summary>
              Looks up a localized string similar to Unique license plate number assigned to a transport unit which is the lowest level of packaging, the unbreakable unit and which has EDI data associated with the unit..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di10004">
            <summary>
              Looks up a localized string similar to Unique license plate number assigned to a transport unit which contains multiple packages and which is associated with EDI data..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di10005">
            <summary>
              Looks up a localized string similar to Unique license plate number assigned to a mixed transport unit containing unlike items on a single customer transaction and may or may not have associated EDI data..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di10006">
            <summary>
              Looks up a localized string similar to Unique license plate number assigned to a master transport unit containing like items on a single customer transaction and may or may not have associated EDI data..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di10007">
            <summary>
              Looks up a localized string similar to Vehicle Registration License Plate Number (not unique without identification of country and issuing governmental region/authority).
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di10008">
            <summary>
              Looks up a localized string similar to Maritime Mobile Service Identity (MMSI).\nA nine digit number regulated by the International Telecommunications Union to uniquely identify a ship or a coast radio station. Example:  8J211123456..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di11000">
            <summary>
              Looks up a localized string similar to Order Number assigned by Customer to identify a Purchasing Transaction (e.g., purchase order number)..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di11001">
            <summary>
              Looks up a localized string similar to Order Number assigned by Supplier to identify a Purchasing Transaction..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di11002">
            <summary>
              Looks up a localized string similar to Bill of Lading/Waybill/Shipment Identification Code assigned by Supplier/Shipper..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di11003">
            <summary>
              Looks up a localized string similar to Bill of Lading/Waybill/Shipment Identification Code assigned by Carrier..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di11004">
            <summary>
              Looks up a localized string similar to Line Number of the order assigned by Customer to identify a Purchasing Transaction..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di11005">
            <summary>
              Looks up a localized string similar to Reference Number assigned by the Customer to identify a Shipment Authorization (Release) against an established Purchase Order..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di11006">
            <summary>
              Looks up a localized string similar to PRO# Assigned by Carrier..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di11007">
            <summary>
              Looks up a localized string similar to Carrier Mode in Free Text format mutually defined between Customer and Supplier (e.g., Air, Truck, Boat, Rail)..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di11008">
            <summary>
              Looks up a localized string similar to Contract Number..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di11009">
            <summary>
              Looks up a localized string similar to Generic Transaction Reference Code (internally assigned or mutually defined)..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di11010">
            <summary>
              Looks up a localized string similar to Invoice Number..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di11011">
            <summary>
              Looks up a localized string similar to Packing List Number..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di11012">
            <summary>
              Looks up a localized string similar to SCAC (Standard Carrier Alpha Code) (an4 - dash &apos;-&apos; filled left) and carrier assigned PROgressive number..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di11013">
            <summary>
              Looks up a localized string similar to Bill of Lading Number /Transport Receipt Number SCAC + Container cargo&apos;s B/L number or waybill number..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di11014">
            <summary>
              Looks up a localized string similar to Combined Order Number and Line Number in the format nn...nn+nn...n where a plus (+) symbol is used as a delimiter between the Order Number and Line Number..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di11015">
            <summary>
              Looks up a localized string similar to KANBAN Number..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di11016">
            <summary>
              Looks up a localized string similar to DELINS Number:  code assigned to identify a document which contains delivery information..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di11017">
            <summary>
              Looks up a localized string similar to Check Number..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di11018">
            <summary>
              Looks up a localized string similar to Structured Reference..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di11019">
            <summary>
              Looks up a localized string similar to Foreign Military Sales Case Number..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di11020">
            <summary>
              Looks up a localized string similar to License Identifier, being a globally unique identifier for a license or contract under which items are generated, submitted for processing and/or paid for, that is constructed by concatenating:\n - an ISO/IEC 15459 issuing agency code;\n - a license or contract number which accords with specifications of the issuing agency concerned;\n and that:\n - comprises only upper case alphabetic and/or numeric characters;\n - is unique (that is, is distinct from any other ISO/IEC 15459 compliant identifier) within th [rest of string was truncated]&quot;;.
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di11021">
            <summary>
              Looks up a localized string similar to Customer Data, being data that:\n - from a customer perspective, is related to or associated with an item or transaction, or to a batch or related items or transactions, and\n - comprises up to 35 printable characters and/or spaces, other than plus (+), drawn from the character set defined in ISO/IEC 646..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di11022">
            <summary>
              Looks up a localized string similar to &apos;22K&apos; Transaction Authentication Information, being a value, constructed by concatenating:\n - an ISO/IEC 15459 issuing agency code;\n - a value which accords with specifications of the issuing agency concerned,\n that allows verification of the authenticity of the transaction concerned and, in particular, that the transaction was initiated by the party, claimed within the transaction to have been its initiator, by:\n - the recipient of a transaction, and/or\n - one or more of the parties involved in its ha [rest of string was truncated]&quot;;.
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di11025">
            <summary>
              Looks up a localized string similar to Global Unique Identification of Groupings of Transport Units Assigned by the Carrier, defined as:\nIdentification of a Party to a Transaction as defined assigned by a holder of a Company Identification Number (CIN) and including the related Issuing Agency Code (IAC) in accordance with ISO/IEC 15459 and its registry, structured as a sequence of 3 concatenated data elements:  IAC, followed by CIN, followed by the Bill of Lading or Waybill or Shipment Identification Code that is unique within the CIN holder&apos;s  [rest of string was truncated]&quot;;.
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di11026">
            <summary>
              Looks up a localized string similar to Global Unique Identification of Groupings of Transport Units Assigned by the Shipper, defined as:\nIdentification of a Party to a Transaction assigned by a holder of a Company Identification Number (CIN) and including the related Issuing Agency Code (IAC) in accordance with ISO/IEC 15459 and its registry, structured as a sequence of 3 concatenated data elements:  IAC, followed by CIN, followed by the Bill of Lading or Waybill or Shipment Identification Code that is unique within the CIN holder&apos;s domain..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di11027">
            <summary>
              Looks up a localized string similar to Supplier Assigned Quotation Number - Number assigned to a quotation by the supplier in response to a request for quote from the customer..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di12000">
            <summary>
              Looks up a localized string similar to Storage Location..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di12001">
            <summary>
              Looks up a localized string similar to Location..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di12002">
            <summary>
              Looks up a localized string similar to &apos;Ship To:&apos; Location Code defined by an industry standard or mutually defined..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di12003">
            <summary>
              Looks up a localized string similar to &apos;Ship From:&apos; Location Code defined by an industry standard or mutually defined..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di12004">
            <summary>
              Looks up a localized string similar to Country of Origin, two-character ISO 3166 country code. With agreement of trading partners and when the Country of Origin is mixed, Country Code &apos;AA&apos; shall be used..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di12005">
            <summary>
              Looks up a localized string similar to &apos;Ship For:&apos; Location Code defined by an industry standard or mutually defined..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di12006">
            <summary>
              Looks up a localized string similar to Route Code assigned by the supplier to designate a specific transportation path..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di12007">
            <summary>
              Looks up a localized string similar to 6-character Department of Defense Activity Code (DoDAAC)..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di12008">
            <summary>
              Looks up a localized string similar to Port of Embarkation - Mutually Defined..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di12009">
            <summary>
              Looks up a localized string similar to Port of Debarkation - Mutually Defined..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di12011">
            <summary>
              Looks up a localized string similar to Location (Latitude/Longitude/Altitude) encoded in the format xnn.nnnnn/xnnn.nnnnnn/xnnnn..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di12012">
            <summary>
              Looks up a localized string similar to &apos;Ship To:&apos; Location (Latitude/Longitude/Altitude) encoded in the format xnn.nnnnn/xnnn.nnnnnn/xnnnn..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di12013">
            <summary>
              Looks up a localized string similar to &apos;Ship From:&apos; Location (Latitude/Longitude/Altitude) encoded in the format xnn.nnnnn/xnnn.nnnnnn/xnnnn..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di12015">
            <summary>
              Looks up a localized string similar to Ship For: Location (Latitude/Longitude/Altitude) encoded in the format xnn.nnnnn/xnnn.nnnnnn/xnnnn..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di12016">
            <summary>
              Looks up a localized string similar to Tag Activation Location.\nEnglish location name (character set:  0-9, A-Z &lt;Space&gt;)..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di12017">
            <summary>
              Looks up a localized string similar to Tag Deactivation Location.\nEnglish location name (character set:  0-9, A-Z &lt;Space&gt;)..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di12018">
            <summary>
              Looks up a localized string similar to FAO fishing area code as defined by the Fisheries and Aquaculture Department of the FAO (http://www.fao.org. Search for Fishing Area Code sub-site).\nAll characters of the GS1 General Specification-defined subset of ISO/IEC 646 are allowed.\nExamples:\n18L37.1.3 Western Mediterranean Sea, Sardinia;\n18L47.B.1 Atlantic, Southeast, SEAFO Division, Namibia EEZ;\n18L67    Pacific, Northeast..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di12020">
            <summary>
              Looks up a localized string similar to First Level (internally assigned)..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di12021">
            <summary>
              Looks up a localized string similar to Second Level (internally assigned)..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di12022">
            <summary>
              Looks up a localized string similar to Third Level (internally assigned..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di12023">
            <summary>
              Looks up a localized string similar to Fourth Level (internally assigned)..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di12024">
            <summary>
              Looks up a localized string similar to Fifth Level (internally assigned)..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di12025">
            <summary>
              Looks up a localized string similar to Identification of a Party to a Transaction, e.g., 25L IAC CIN LOC assigned by a holder of a Company Identification Number (CIN) and including the related Issuing Agency Code (IAC) in accordance with ISO/IEC 15459 and its registry, structured as a sequence of 3 concatenated data elements:  IAC, followed by CIN, followed by the physical internal location (LOC) that is unique within the CIN holder&apos;s domain..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di12026">
            <summary>
              Looks up a localized string similar to &apos;26L&apos; Location Code, being a code identifying a location or geographic area, or an associated group of such locations or areas, that has relevance to a related transaction and that complies with one or the structures defined in (a) to (f) below:\na) two upper case alphabetic character corresponding to the ISO 3166-1 two alpha country code of the country in which, or consisting of which, the location(s) or area(s) are situated;\nb) three upper case alphabetic characters corresponding to the IATA code of the  [rest of string was truncated]&quot;;.
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di12027">
            <summary>
              Looks up a localized string similar to Event Location UN/LOCODE.\nUN/LOCODE followed by a plus (+) character followed by one or more code values from EDIFACT Code List 3227  &apos;Location function code qualifier&apos;, e.g.,\n7 Place of Final Delivery;\n5 Port of Departure;\n9 Port of Lading;\n11 Port of Unlading;\n13 Place of transhipment;\n24 Port of Entry;\n35 Exportation country;\n88 Place of Carrier Receipt;\n125 Foreign Port prior to Depart to U.S;\n147 Stowage cell/position;\n159 Place of delivery (to consignee);\n248 Loading Location\nhttp://www. [rest of string was truncated]&quot;;.
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di12028">
            <summary>
              Looks up a localized string similar to Number and Street Address.\nUsed in conjunction with H, 6H, 28L, 29L, 30L, 31L, 32L..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di12029">
            <summary>
              Looks up a localized string similar to City Name.\nUsed in conjunction with H, 6H, 28L, 29L, 30L, 31L, 32L..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di12030">
            <summary>
              Looks up a localized string similar to Country Sub-entity Details.\nUsed in conjunction with H, 6H, 28L, 29L, 30L, 31L, 32L..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di12031">
            <summary>
              Looks up a localized string similar to Postal Code.\nUsed in conjunction with H, 6H, 28L, 29L, 30L, 31L, 32L (If a &apos;-&apos; dash is used, it shall be expressly encoded)..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di12032">
            <summary>
              Looks up a localized string similar to Country Code.\nISO 3166-1 Alpha 2 Code\nUsed in conjunction with H, 6H, 28L, 29L, 30L, 31L, 32L..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di12033">
            <summary>
              Looks up a localized string similar to Uniform Resource Locator (URL).\nIncludes all characters that form a URL, including header data such as e.g., http://. Character set as listed in RFC 1738..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di12034">
            <summary>
              Looks up a localized string similar to Pointer to Process URL (P2P URL) for initiating a URL to carry all other data elements encoded in an AIDC media according to the following rule: Scan the code and initiate the URL starting with the P2P URL string, omitting DI 34L and ISO/IEC 15434 envelope syntax (prefix and postfix) and append all other data elements that have been scanned in same sequence as encoded in the media, including DIs and data element separators. Convert special characters in the appended data into RFC 1738 format (e.g., Group Se [rest of string was truncated]&quot;;.
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di12035">
            <summary>
              Looks up a localized string similar to A government-assigned approval number of vessel / aquaculture site / farm / processor, starting with an ISO 31661 alpha-2 country code, followed by the approval number.\nAll characters of the GS1 General Specification-defined subset of ISO/IEC 646 are allowed.\nExample:\n35LIECK0107EC = Country; Ireland. Vessel Name; FV Endurance DA31..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di12036">
            <summary>
              Looks up a localized string similar to A government-assigned approval number of producer or farm or first deboning / cutting hall, starting with an ISO 3166-1 alpha-2 country code, followed by the approval number.\nAll characters of the GS1 General Specification-defined subset of ISO/IEC 646 are allowed.\nExample:\n36LIECK0107EC = Country; Ireland. Vessel Name; FV Endurance DA31..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di12051">
            <summary>
              Looks up a localized string similar to &apos;Ship From:&apos; - Location code defined by a postal authority (e.g., 5-digit and 9-digit ZIP codes identifying U.S. locations or 6-character postal codes identifying Canadian locations)..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di12052">
            <summary>
              Looks up a localized string similar to &apos;Ship To:&apos; - Location code defined by a postal authority (e.g., 5-digit and 9-digit ZIP codes identifying U.S. locations or 6character postal codes identifying Canadian locations)..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di12054">
            <summary>
              Looks up a localized string similar to &apos;Ship From:&apos; - Location code defined by a postal authority in the format:  postal codes (e.g., 5-digit ZIP codes identifying U.S. locations or 6- or 7-character postal codes identifying United Kingdom locations) followed by two character ISO 3166 country code  (e.g., US or GB)..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di12055">
            <summary>
              Looks up a localized string similar to &apos;Ship To:&apos; - Location code defined by a postal authority in the format:  postal codes (e.g., 5-digit ZIP codes identifying U.S. locations or 6- or 7-character postal codes identifying United Kingdom locations) followed by two character ISO 3166 country code  (e.g., US or GB)..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di13010">
            <summary>
              Looks up a localized string similar to Army Form 2410 data. Format is data value preceded by the block number of the form 2410. Field lengths and acceptable characters can be found at;\nhttp://www.apd.army.mil/pdffiles/p738_751.pdf.\n2020 Update: The URL has been modified to:\nhttps://armypubs.army.mil/ProductMaps/PubForm/Details.asp x?PUB_ID=1408.
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di13011">
            <summary>
              Looks up a localized string similar to Army Form 2408 data. Format is data value preceded by the block number of the form 2408. Field lengths and acceptable characters can be found at;\nhttp://www.apd.army.mil/pdffiles/p738_751.pdf.\n2020 Update: The URL has been modified to:\nhttps://armypubs.army.mil/ProductMaps/PubForm/Details.asp x?PUB_ID=1400.
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di13012">
            <summary>
              Looks up a localized string similar to Army Form 2407 data. Format is data value preceded by the block number of the form 2407. Field lengths and acceptable characters can be found at;\nhttp://www.apd.army.mil/pdffiles/p738_751.pdf.\n2020 Update: The URL has been modified to:\nhttps://armypubs.army.mil/ProductMaps/PubForm/Details.asp x?PUB_ID=1391.
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di13013">
            <summary>
              Looks up a localized string similar to Air Force Form 95 data. Format is data value preceded by the block number of the form 95. Field lengths and acceptable characters can be found at;\nhttp://www.gsa.gov/portal/forms/download/116418.\n2020 Update: The Name of the Form is â€œAir Force Technical Order Form 95 (AFTO Form 95).â€ Details about the Form are sourced in Air Force Technical Order (TO) 00-20-1. The URL for this TO has been modified to:\nhttps://www.tinker.af.mil/Portals/106/Documents/Technical%20Orders/AFD-180615-00-20-1.pdf.
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di13014">
            <summary>
              Looks up a localized string similar to Navy Form 4790 data. Format is data value preceded by the block number of the form 2410. Field lengths and acceptable characters can be found at;\nhttp://www.navair.navy.mil/logistics/4790/library/Chapter%201 5.pdf.\n2020 Update: The URL is no longer valid..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di14000">
            <summary>
              Looks up a localized string similar to National/NATO Stock Number (NSN)..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di14001">
            <summary>
              Looks up a localized string similar to Product Characteristic Data defined by the Chemical Industry Data Exchange (CIDX)..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di14003">
            <summary>
              Looks up a localized string similar to Coding Structure in Accordance with Format Defined by Electronic Industries Association Japan (EIAJ)..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di14004">
            <summary>
              Looks up a localized string similar to Coding Structure and Formats in Accordance with GS1 Application Identifiers (AI plus data) (GS1)..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di14005">
            <summary>
              Looks up a localized string similar to Coding Structure and Formats in Accordance with AIAG Recommendations. The full Data Identifier is in the form 5Nxx where the &apos;xx&apos; is found in the full code list that can be found at https://www.aiag.org/.
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di14006">
            <summary>
              Looks up a localized string similar to U.S. DOD Requisition and Issue Procedure Codes. The format is the appropriate MILSTRIP code followed by the data value associated with that code. (The full list of codes is available at;\nhttp://www2.dla.mil/j6/dlmso/elibrary/Manuals/DLM/MILSTRIP/MILSTRIP.pdf.\n2020 Update: The URL has been modified to:\nhttps://www.dla.mil/HQ/InformationOperations/DLMS/elibrary/manuals/MILSTRIP/.
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di14007">
            <summary>
              Looks up a localized string similar to U.S. Defense Transportation Regulation Codes. The format is the DTR code followed by the appropriate data value associated with that code. (The full list of codes is available at;\nhttp://www.transcom.mil/dtr/part-ii/dtr_part_ii_toc.pdf.\n2020 Update: The URL has been modified to:\nhttps://www.ustranscom.mil/dtr/part-ii/dtr_part_ii_toc.pdf.
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di14008">
            <summary>
              Looks up a localized string similar to Production Animal Identification Codes. The format is the production animal code followed by the appropriate data value associated with that code. The Technical Report and the full list of Extended Data Elements (codes) is maintained at;\nhttp://www.aimglobal.org/store/view_product.asp?id=4926441  Extended Data Elements (Codes).\nhttp://www.aimglobal.org/store/view_product.asp?id=4926483 Technical Report.\n2020 Update: The URLs have been modified to:\nhttps://web.aimglobal.org/external/wcpages/wcecommerce/e [rest of string was truncated]&quot;;.
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di14009">
            <summary>
              Looks up a localized string similar to Pharmacy Product Number maintained by IFA (www.ifaffm.de) with the following elements; Data Identifier (DI), two-digit product registration agency code (PRAC), the product reference (PR), and the two PPN check digits (CC), in the form DI PRAC PR CC.\nNOTE â€“ space is added as a separator for visual clarity and is not part of the data.\nExamples:\n  â€¢ 9N1112345678CC\n  â€¢ 9N1312345MEDDEVICE1245678900CC.
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di14010">
            <summary>
              Looks up a localized string similar to Data in the format and using semantics defined by the holder of a Company Identification Number (CIN) that has been issued by an Issuing Agency Code (IAC) in accordance with ISO/IEC 15459, defined as a sequence of concatenated data elements:  IAC, followed by CIN, followed by the separator character &apos;:&apos; (colon) followed by the data in the format and using semantics as defined by the CIN holder.\nNOTE: Only the data syntax rules (if any) as provided by the declared IAC+CIN within each DI &apos;10N&apos; data stream sh [rest of string was truncated]&quot;;.
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di14011">
            <summary>
              Looks up a localized string similar to The Data construct is defined and controlled by the RLA, and is comprised of 2 segments: the field identifier code, immediately followed by the data as defined for that element according to the data dictionary of the RLA. It is essentially a catalog of fields with standardized content. The Field Identifiers are posted at http://rla.org/11ncodes. The use and structure of these codes are defined at:  http://rla.org/11nformat   Additional examples can be found at that site as well. DI &apos;11N&apos; shall never be enco [rest of string was truncated]&quot;;.
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di14012">
            <summary>
              Looks up a localized string similar to The Data construct is defined and controlled by the RLA, comprised of 2 segments: the field identifier (FI) code, immediately followed by the data as defined for that element according to the data dictionary of the RLA. It is essentially a catalog of fields with standardized content. The Field Identifiers are posted at http://rla.org/12ncodes  The use and structure of these codes are defined at:  http://rla.org/12nformat. Examples can be found at that site.\n2020 Update: The URL has changed to:\nhttps://rla [rest of string was truncated]&quot;;.
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di14015">
            <summary>
              Looks up a localized string similar to Representing Industrial Internet Identifier Codes controlled and maintained by CAICT, used in the Industrial Internet Identifier Resolution System of China and constructed as &lt;DI&gt;&lt;IAC&gt;&lt;TTC&gt;&lt;STC&gt;&lt;CIN&gt;&lt;SN&gt;, in the form an3+a3+n3+n3+n8+an1â€¦33, where an3 is the Data Identifier (DI), a3 is the Issuing Agency Code (IAC = â€œVAAâ€), n3 is the Top-Tier Code (TTC), n3 is the Secondary-Tier Code (STC), n8 is the Company Identification Number (CIN) controlled and assigned by the Secondary-Tier platform and an1â€¦33 [rest of string was truncated]&quot;;.
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di16000">
            <summary>
              Looks up a localized string similar to Item Identification Code assigned by Customer..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di16001">
            <summary>
              Looks up a localized string similar to Item Identification Code assigned by Supplier..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di16002">
            <summary>
              Looks up a localized string similar to Code Assigned to Specify the Revision Level for an Item (e.g., engineering change level, edition, or revision)..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di16003">
            <summary>
              Looks up a localized string similar to Combined Manufacturer Identification Code/Item Code Under the 12/13-digit GS1 Formats, plus supplemental codes, if any.\n2020 Update: GS1 recommends this DI no longer be used and that users of this DI migrate to GS1 data qualifiers (Application Identifiers) per ISO/IEC 15418 and ISO/IEC 15459-3..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di16004">
            <summary>
              Looks up a localized string similar to Item Code Portion of GS1 Formats.\n2020 Update: GS1 recommends this DI no longer be used and that users of this DI migrate to GS1 data qualifiers (Application Identifiers) per ISO/IEC 15418 and ISO/IEC 15459-3..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di16005">
            <summary>
              Looks up a localized string similar to Freight Classification Item Number Assigned by Carrier for Purposes of Rating Hazardous Materials (e.g., Motor Freight, Air, Boat, Rail Classification)..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di16006">
            <summary>
              Looks up a localized string similar to Combined Supplier Identification and Item Code (internally assigned or mutually defined)..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di16007">
            <summary>
              Looks up a localized string similar to Common Language Equipment Identification (CLEI) assigned by the manufacturer to some telecommunications equipment..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di16008">
            <summary>
              Looks up a localized string similar to 14-digit GS1 format for GTIN-14 code structure.\n2020 Update: GS1 recommends this DI no longer be used and that users of this DI migrate to GS1 data qualifiers (Application Identifiers) per ISO/IEC 15418 and ISO/IEC 15459-3..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di16009">
            <summary>
              Looks up a localized string similar to Combined Manufacturer Identification Code (9-digit DUNS number assigned by Dun &amp; Bradstreet) and the Item Code/Part Number (assigned by the manufacturer)..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di16010">
            <summary>
              Looks up a localized string similar to Hazardous Material Code as defined by ANSI X12.3 in the format Data Element 208 (1-character code qualifier) followed by Data Element 209 (Hazardous Material Code)..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di16011">
            <summary>
              Looks up a localized string similar to 10-character CLEI Code for telecommunications equipment..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di16012">
            <summary>
              Looks up a localized string similar to Document Type (e.g., Pick List, Design Drawing, etc.) (internally assigned or mutually defined)..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di16013">
            <summary>
              Looks up a localized string similar to VMRS System Code..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di16014">
            <summary>
              Looks up a localized string similar to VMRS System and Assembly Code..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di16015">
            <summary>
              Looks up a localized string similar to VMRS System, Assembly, &amp; Part Code..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di16016">
            <summary>
              Looks up a localized string similar to VMRS System, Assembly, or Part Code. (User Modified)..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di16017">
            <summary>
              Looks up a localized string similar to Combined GS1 Supplier Identification and Item Code Assigned By The Supplier.\n2020 Update: GS1 recommends this DI no longer be used and that users of this DI migrate to GS1 data qualifiers (Application Identifiers) per ISO/IEC 15418 and ISO/IEC 15459-3..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di16018">
            <summary>
              Looks up a localized string similar to Combined VMRS supplier ID and Supplier Assigned Part Number..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di16019">
            <summary>
              Looks up a localized string similar to Component of an Item. (One product contained in multiple packages)..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di16020">
            <summary>
              Looks up a localized string similar to First Level (Customer Assigned)..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di16021">
            <summary>
              Looks up a localized string similar to Second Level (Customer Assigned)..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di16022">
            <summary>
              Looks up a localized string similar to Third Level (Customer Assigned)..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di16023">
            <summary>
              Looks up a localized string similar to Fourth Level (Customer Assigned)..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di16024">
            <summary>
              Looks up a localized string similar to Fifth Level (Customer Assigned)..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di16025">
            <summary>
              Looks up a localized string similar to Identification of a Party to a Transaction Assigned by a Holder of a Company Identification Number (CIN) and including the related Issuing Agency Code (IAC) in accordance with ISO/IEC 15459 and its registry, structured as a sequence of 3 concatenated data elements:  IAC, followed by CIN, followed by the supplier assigned part number that is unique within the CIN holder&apos;s domain..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di16026">
            <summary>
              Looks up a localized string similar to Part Number of Next Higher Assembly..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di16027">
            <summary>
              Looks up a localized string similar to Commodity HTS-6 Code; Using the format:  4012.11 or 4012.11.4000  (Decimal point is expressly encoded) The Harmonized System (HS) Classification is a 6-digit standardized numerical method of classifying traded products. HS numbers are used by customs authorities around the world to identify products for the application of duties and taxes. Additional digits are added to the HS number by some governments to further distinguish products in certain categories. In the United States, numbers used to classify exp [rest of string was truncated]&quot;;.
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di16028">
            <summary>
              Looks up a localized string similar to Cargo Name. Plain language description (English)..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di16029">
            <summary>
              Looks up a localized string similar to Product Classification Code as defined with the GMDN (Global Medical Device Nomenclature - http://www.gmdnagency.org)..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di16030">
            <summary>
              Looks up a localized string similar to First Level (Supplier Assigned)..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di16031">
            <summary>
              Looks up a localized string similar to Second Level (Supplier Assigned)..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di16032">
            <summary>
              Looks up a localized string similar to Third Level (Supplier Assigned)..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di16033">
            <summary>
              Looks up a localized string similar to Fourth Level (Supplier Assigned)..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di16034">
            <summary>
              Looks up a localized string similar to Fifth Level (Supplier Assigned)..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di16040">
            <summary>
              Looks up a localized string similar to A Code Assigned by a Customer to the Identification Number of the Manufacturer&apos;s Material Safety Data Sheet (MSDS) document that describes the uses, hazards, and chemical composition of a hazardous material..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di16049">
            <summary>
              Looks up a localized string similar to Export Controlled Item. Subject to export control and or restrictions as identified in the Wassenaar Arrangement. DI followed by the Alpha-2 ISO 3166 Country Code of the country that imposed the restriction followed by Wassenaar Code (http://www.wassenaar.org/controllists/index.html).\n2020 Update: The URL has changed to https://www.wassenaar.org/control-lists/.
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di16050">
            <summary>
              Looks up a localized string similar to Manufacturer-Assigned Item Identifier - comprising an item number assigned by the item manufacturer, followed by a plus (+) sign, followed - if required to uniquely identify the item within the manufacturer&apos;s product range - by a manufacturerassigned item version.\nExample 50PABC+6 would represent item number ABC, item version 6\nNOTE - The item number shall always be followed by a plus sign, even if no item version is present. This is required to permit the unambiguous concatenation of manufacturerassigned [rest of string was truncated]&quot;;.
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di16051">
            <summary>
              Looks up a localized string similar to Globally Unique Item Identifier comprising the Identification of a party to a transaction assigned by a holder of a Company Identification Number (CIN) and including the related Issuing Agency Code (IAC) in accordance with ISO/IEC 15459 and its registry, followed by a plus (+) sign, followed by the Manufacturer-assigned item identifier as defined with 50P\nExample: 51PJ4LBE0431863103+ABC+ would represent the item with item number ABC and no version number manufactured by the company with Belgian VAT number  [rest of string was truncated]&quot;;.
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di16052">
            <summary>
              Looks up a localized string similar to Color Code.\nColor of an item/object identified by a code or term mutually agreed upon between trading partners..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di16053">
            <summary>
              Looks up a localized string similar to Identifier for Specific Marine Equipment approved under the European Union Directive on Marine Equipment (2014/90/EU) and Implementing Regulation (EU) 2018/608.\nFormat:\nâ€¢ DI (an3);\nâ€¢ Type of conformity assessment (CA) module(s) set out in Annex II to Directive 2014/90/EU used for the conformity assessment (a1);\nâ€¢ Notified body (NB) identification number assigned by the Commission in accordance with point 3.1 of Annex IV to Directive 2014/90/EU (n4);\nâ€¢ Certificate (an5â€¦20).
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di16054">
            <summary>
              Looks up a localized string similar to UDI-DI (Unique Device Identification - Device Identifier) for Medical Devices (MD) and In-vitro-Diagnostics (IvD) as the unique key to public UDI data bases (GUDID, EUDAMED, etc.), according to national regulatory requirements, as outlined by the International Medical Device Regulators Forum (IMDRF). All printable characters of the UTF-8 character set are allowed..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di16055">
            <summary>
              Looks up a localized string similar to DNV certification reference. Indicates that the data contains a reference to a product certificate/verification statement/report, issued by DNV. Data identifier shall be followed by letters â€œNVâ€ and certificate number. When certificate Number has postfix, it should be included in the datastream by using the â€œ-â€œ separator character. Revision indicators shall not be provided.\nExamples:\n1. 55PNVXXXXXXX, where 55P is the data identifier, XXXXXXX is DNV Certificate Number.\n2. 55PNVXXXXXXX-Y, where 55P [rest of string was truncated]&quot;;.
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di17000">
            <summary>
              Looks up a localized string similar to Quantity, Number of Pieces, or Amount (numeric only) (unit of measure and significance mutually defined)..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di17001">
            <summary>
              Looks up a localized string similar to Theoretical Length/Weight (numeric only)..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di17002">
            <summary>
              Looks up a localized string similar to Actual Weight (numeric only)..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di17003">
            <summary>
              Looks up a localized string similar to Unit of Measure, as defined by the two character ANSI X12.3 Data Element Number 355 Unit of Measurement Code..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di17004">
            <summary>
              Looks up a localized string similar to Gross Amount..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di17005">
            <summary>
              Looks up a localized string similar to Net Amount..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di17006">
            <summary>
              Looks up a localized string similar to Where Multiple Containers Comprise a Single Product (the contents of each container must be combined with the content of the other containers to constitute a single product) the Data Identifier &apos;6Q&apos; shall be used to link the various containers. The format # of # (&apos;this is the nth piece of x pieces to define the product&apos;) Presented in the format &apos;n/x&apos;, where the &apos;/&apos; (slash) is used as a delimiter between two values..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di17007">
            <summary>
              Looks up a localized string similar to Quantity, Amount, or Number of Pieces in the format: Quantity followed by the two character ANSI X12.3 Data Element Number 355 Unit of Measurement Code..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di17008">
            <summary>
              Looks up a localized string similar to Container Rated Weight\nManufacturer-assigned weight carrying capability of the container. Assigned at time of manufacture. Unit of measure is kg..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di17009">
            <summary>
              Looks up a localized string similar to Piece Weight\nWeight of a single item..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di17011">
            <summary>
              Looks up a localized string similar to Tare Weight: weight of an empty container.\nContainer body weight.\nManufacturer-assigned weight of the empty container. Assigned at time of manufacture. Unit of measure is kg (Tare weight)..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di17012">
            <summary>
              Looks up a localized string similar to Monetary Value established by the Supplier in the format of: the value followed by an ISO 4217 data element code for representing unit of value of currencies and funds (e.g., 12Q2.50USD) (2.50 Monetary Value in USA Dollars) significance mutually defined.\nEntry Value;\nValue followed by an ISO 4217 data element code for representing unit of value of currencies and funds (e.g., 12Q2.50USD) (2.50 Monetary Value in USA Dollars).
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di17013">
            <summary>
              Looks up a localized string similar to # of # (&apos;this is the nth piece of x pieces in this shipment&apos;).\nPresented in the format &apos;n/x&apos;, where the &apos;/&apos; (slash) is used as a delimiter between two values..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di17014">
            <summary>
              Looks up a localized string similar to Beginning Secondary Quantity..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di17015">
            <summary>
              Looks up a localized string similar to Ending Secondary Quantity..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di17016">
            <summary>
              Looks up a localized string similar to Number Of Pieces in Van..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di17017">
            <summary>
              Looks up a localized string similar to Number Of Shipments in Van..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di17018">
            <summary>
              Looks up a localized string similar to Cube expressed in cubic metres or cubic feet followed by the ANSI X12.3 data element number 355 unit of measure code (CR of CF). No implied decimal point..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di17019">
            <summary>
              Looks up a localized string similar to Width expressed in linear metres or linear feet followed by the ANSI X12.3 data element number 355 unit of measure code (LC or LF). No implied decimal point..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di17020">
            <summary>
              Looks up a localized string similar to Height expressed in linear metres or linear feet followed by the ANSI X12.3 data element number 355 unit of measure code (LC or LF). No implied decimal point..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di17021">
            <summary>
              Looks up a localized string similar to Length expressed in linear metres or linear feet followed by the ANSI X12.3 data element number 355 unit of measure code (LC or LF). No implied decimal point..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di17022">
            <summary>
              Looks up a localized string similar to Net Weight Of Shipment expressed in pounds or kilograms (kilos) followed by the ANSI X12.3 data element number 355 unit of measure (LB or KG). No implied decimal point..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di17023">
            <summary>
              Looks up a localized string similar to Van Length expressed in linear metres or linear feet followed by the ANSI X12.3 data element number 355 unit of measure (LC or LF). No implied decimal point..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di17024">
            <summary>
              Looks up a localized string similar to Inside Cube of a Van expressed in cubic metres or cubic feet followed by the ANSI X12.3 data element number 355 of unit measure code (CR or CF). No implied decimal point..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di17025">
            <summary>
              Looks up a localized string similar to Net Explosive Weight (a computed value of explosive equivalent expressed in pound of TNT). The measure of NEW is used internationally for explosive safety quantity distance arc computations. No implied decimal point..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di17026">
            <summary>
              Looks up a localized string similar to Packaging Level, specifying the hierarchical level of packaging in accordance with HIBC (Health Industry Bar Code) specifications..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di17027">
            <summary>
              Looks up a localized string similar to Single Product Price Value, Net, &apos;.&apos; (dot) used as decimal point (e.g. 27Q1000.5 for the price value of 1000.50).\nStructure:  an3+an1...20\n   &lt;DI&gt;&lt;price value&gt;.\nCharacter set:  0 to 9, dot (ISO 646 ASCII value decimal 46, hexadecimal 2E).\nExample of encoding using a net price value of 1000:\n27Q1000.\nExample of encoding using a net price value of 1000.50:\n27Q1000.5.\nNOTE - If currency is required it can be taken from another data element used in same code, e.g. 12Q..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di17028">
            <summary>
              Looks up a localized string similar to Single Price Charge Value For Postage And Packaging, &apos;.&apos; (dot) represents the position of a comma (e.g. 30Q100.50 for the value of 100,50).\nStructure:  an3+an1...10\n   &lt;DI&gt;&lt;price value&gt;.\nCharacter set:  0 to 9, dot.\nExample of encoding using postage &amp; packing value of 100:\n30Q100.\nExample of encoding using postage &amp; packing value of 100,50:\n30Q100.50.\nNOTE - If currency is required it can be taken from another data element used in same code, e.g. 12Q..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di17029">
            <summary>
              Looks up a localized string similar to Discount Percentage, &apos;.&apos; (dot) represents the position of a comma (e.g. 31Q8.5 for a discount value of 8,5%).\nStructure:  an3+n1...6 (12.456)\n   &lt;DI&gt;&lt;discount percentage (%)&gt;.\nCharacter set:  0 to 9, dot\nExample of encoding using discount percentage of 10%:\n31Q10.\nExample of encoding using discount percentage of 8,5%:\n31Q8.5..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di17030">
            <summary>
              Looks up a localized string similar to VAT Percentage, &apos;.&apos; (dot) represents the position of a comma (e.g. 27Q8.5 for the VAT value of 8.5%).\nStructure:  an3+an1...5 (12.45)\n    &lt;DI&gt;&lt;VAT percentage (%)&gt;.\nCharacter set:  0 to 9, dot.\nExample of encoding using VAT percentage of 10%:\n27Q19.\nExample of encoding using VAT percentage of 8,5%:\n27Q8.5..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di17031">
            <summary>
              Looks up a localized string similar to Currency, ISO 4217 currency code.\nStructure:  an3+an3\n  &lt;DI&gt;&lt;Currency, e.g. EUR&gt;.\nCharacter set:  A-Z, 0 to 9.\nExample of encoding using ISO alphabetic code of US Dollar:\n31QUSD.\nExample of encoding using ISO alphabetic code of EURO:\n31QEUR.\nExample of encoding using ISO numeric code of EURO:\n31Q978..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di17032">
            <summary>
              Looks up a localized string similar to Clinical term code as defined with the clinical nomenclature: â€œThe international standard for identifying health measurements, observations, and documents â€“ LOINCâ€ (https://loinc.org), in the following sequence: &lt;DI&gt;&lt;LOINC Code&gt;&lt;Plus Sign&gt;&lt;Value&gt;. The unit and format of the Value is defined by the LOINC Code.\nExample: 32Q28903-3+60 = LOINC Code 28903-3: Left contact lens Axis (degrees); with Value = 60..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di18001">
            <summary>
              Looks up a localized string similar to Return Authorization Code (RMA) assigned by the Supplier.
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di18002">
            <summary>
              Looks up a localized string similar to Return Code Assigned by the Customer.
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di18004">
            <summary>
              Looks up a localized string similar to U.S. Department of Defense Identification Code (DoDIC).
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di18005">
            <summary>
              Looks up a localized string similar to Data in the format and using semantics defined by the holder of a Company Identification Number (CIN) that has been issued by an Issuing Agency Code (IAC) in accordance with ISO/IEC 15459, defined as a sequence of concatenated data elements:  IAC, followed by CIN, followed by the separator character &apos;:&apos; (colon) followed by the data in the format and using semantics as defined by the CIN holder.\nNOTE - Only the data syntax rules (if any) as provided by the declared IAC+CIN within each DI &apos;5R&apos; data stream sh [rest of string was truncated]&quot;;.
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di18006">
            <summary>
              Looks up a localized string similar to ISO/IEC 20248 digital signature data construct. If the underlying data carrier encoding is 7 bits, then only the ISO/IEC 20248 raw format may be used.\nExample with an URL format:\n&lt;6R&gt;&lt;https://20248.sigvr.it/?Oo586eJAMEYCIQCf31EqIJML GclBpHLlRgBdO&gt;\nExample with a raw format:\n&lt;6R&gt;&lt;Oo586eJAMEYCIQCf31EqIJMLGclBpHLlRgBdO&gt;\nAn ISO/IEC 20248 data structure contains a digital signature which is used to verify the specified data elements of the message of data elements. The value of 6R, as the first parameter, a [rest of string was truncated]&quot;;.
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di18007">
            <summary>
              Looks up a localized string similar to Aquatic Sciences and Fisheries Information System (ASFIS) &apos;Inter-agency 3-alpha species code&apos;, maintained by the Food and Agriculture Organisation of the United Nations (www.fao.org, then search for &apos;ASFIS&apos;).\nExamples;\n7RMUC = Mud carp;\n7RPCD = Australian freshwater herring;\n7RWSH = Great white shark..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di18008">
            <summary>
              Looks up a localized string similar to Food and Agricultural Organisation (FAO) International Standard Classification of Fishing Gears (ISSCFG) code. (www.fao.org)\nAll characters of the GS1 General Specification-defined subset of ISO/IEC 646 are allowed.\nExamples:\n8R02.1.0 = Beach seines;\n8R03.1.5 = Shrimp trawls;\n8R05.1.0 = Portable lift net..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di18009">
            <summary>
              Looks up a localized string similar to Production method for fish and seafood as specified by the Fisheries and Aquaculture Department of the Food and Agricultural Organisation (FAO) of the United Nations, according to EU Regulation 1379/2013. (www.fao.org).\nAll characters of the GS1 General Specification-defined subset of ISO/IEC 646 are allowed.\nExamples;\n9R01 = Caught at sea;\n9R02 = Caught in fresh water;\n9R03 = Farmed..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di19000">
            <summary>
              Looks up a localized string similar to Serial Number or Code Assigned by the Supplier to an Entity for its Lifetime, (e.g., computer serial number, traceability number, contract tool identification).
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di19001">
            <summary>
              Looks up a localized string similar to Additional Code Assigned by the Supplier to an Entity for its Lifetime (e.g., traceability number, computer serial number).
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di19002">
            <summary>
              Looks up a localized string similar to Advance Shipment Notification (ASN) Shipment ID (SID) corresponds to ANSI ASC X12 Data Element 396.
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di19003">
            <summary>
              Looks up a localized string similar to Unique Package Identification Assigned by Supplier (lowest level of packaging which has a package ID code; shall contain like items).
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di19004">
            <summary>
              Looks up a localized string similar to Package Identification Assigned by Supplier to master packaging containing like items on a single customer order.
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di19005">
            <summary>
              Looks up a localized string similar to Package Identification Assigned by Supplier to master packaging containing unlike items on a single customer order.
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di19006">
            <summary>
              Looks up a localized string similar to Package Identification Assigned by Supplier to master packaging containing like items over multiple customer orders.
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di19007">
            <summary>
              Looks up a localized string similar to Package Identification Assigned by Supplier to master packaging containing unlike items over multiple customer.
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di19008">
            <summary>
              Looks up a localized string similar to Supplier ID/Unique Container ID presented in the data format specified by the GS1 SSCC-18\n2020 Update: Refer to the GS1 General Specifications pertaining to the most recent version of SSCC..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di19009">
            <summary>
              Looks up a localized string similar to Package Identification, Generic (mutually defined).
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di19010">
            <summary>
              Looks up a localized string similar to Machine, Cell, or Tool ID Code.
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di19011">
            <summary>
              Looks up a localized string similar to Fixed Asset ID Code.
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di19012">
            <summary>
              Looks up a localized string similar to Document Number (internally assigned or mutually defined).
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di19013">
            <summary>
              Looks up a localized string similar to Container Security Seal.
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di19014">
            <summary>
              Looks up a localized string similar to 4th Class Non-identical parcel post manifesting.
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di19015">
            <summary>
              Looks up a localized string similar to Serial Number Assigned by the Vendor Entity, that can only be used in conjunction with &apos;13V&apos;.
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di19016">
            <summary>
              Looks up a localized string similar to Version Number, e.g., Software Version.
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di19017">
            <summary>
              Looks up a localized string similar to Combined 6-digit GS1 Supplier Identification and Unique Package Identification Assigned by the Supplier\n2020 Update: GS1 recommends this DI no longer be used and that users of this DI migrate to GS1 data qualifiers (Application Identifiers) per ISO/IEC 15418 and ISO/IEC 15459-3..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di19018">
            <summary>
              Looks up a localized string similar to CAGE Code &amp; Serial Number Unique Within CAGE.
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di19019">
            <summary>
              Looks up a localized string similar to Combined Dun &amp; Bradstreet company identification of the supplier followed by a unique package identification assigned by the supplier, in the format nn...nn+nn...n where a plus symbol (+) is used as a delimiter between the DUNS Number and unique package identification.
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di19020">
            <summary>
              Looks up a localized string similar to Traceability Code for an Entity Assigned by the Customer.
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di19021">
            <summary>
              Looks up a localized string similar to Tire Identification Number as defined by the U.S. Department of Transportation (D.O.T) under U.S. Code 49 CFR 574.5..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di19022">
            <summary>
              Looks up a localized string similar to Unique Individual Identity for Cellular Mobile Telephones.
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di19023">
            <summary>
              Looks up a localized string similar to Media Access Control (MAC) Address conforming with IEEE 802.11.
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di19024">
            <summary>
              Looks up a localized string similar to According to ISO/IEC 15963 (value is a conversion of its bit value to 8-bit ASCII values). This Data Identifier could possibly assume any ASCII-256 value. For freight container tags the Registration Authority (RA) for manufacturers is the RA for ISO 14816. (ISO 646).
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di19025">
            <summary>
              Looks up a localized string similar to Identification of a party to a transaction assigned by a holder of a Company Identification Number (CIN) and including the related Issuing Agency Code (IAC) in accordance with ISO/IEC 15459 and its registry, structured as a sequence of 3 concatenated data elements:  IAC, followed by CIN, followed by the supplier assign serial number that is unique within the CIN holder&apos;s domain  (See Annex C.11).
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di19026">
            <summary>
              Looks up a localized string similar to Equipment Identifier, being a globally unique identifier for a device, an item of equipment or instance of a computer application used in the production, transport, processing or other handling of items, that is constructed by concatenating:\n - an ISO/IEC 15459 issuing agency code;\n - an equipment number which accords with specifications of the issuing agency concerned; and that:\n - comprises only upper case alphabetic and/or numeric characters;\n - is unique (that is, is distinct from any other ISO/IEC  [rest of string was truncated]&quot;;.
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di19027">
            <summary>
              Looks up a localized string similar to Item Number Within Batch, being a string of numeric digits:\n - that uniquely distinguishes an item, within an identifiable batch of related items, from all other items in the same batch;\n - whose length is the same for all items within the batch concerned..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di19028">
            <summary>
              Looks up a localized string similar to Batch-and-Item Number, being the concatenation of a data identifier 27T batch number and the data identifier 27S item number of an item belonging to the batch concerned..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di19030">
            <summary>
              Looks up a localized string similar to Additional Traceability Code For An Entity Assigned by the Supplier in addition to or different from the traceability code(s) provided by &apos;S&apos; or &apos;1S&apos;.
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di19031">
            <summary>
              Looks up a localized string similar to Beginning Serial Number for serial numbers in sequence.
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di19032">
            <summary>
              Looks up a localized string similar to Ending Serial Number for serial numbers in sequence.
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di19033">
            <summary>
              Looks up a localized string similar to Serial Number of Next Higher Assembly.
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di19034">
            <summary>
              Looks up a localized string similar to Serial Number or Part Number of End Item.
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di19035">
            <summary>
              Looks up a localized string similar to Bumper Number (Used in Unit DOD Move).
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di19036">
            <summary>
              Looks up a localized string similar to Pallet Identifier (Used for loaded 463L air pallets).
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di19037">
            <summary>
              Looks up a localized string similar to Unique Item Identifier comprised of a sequence of 5 data elements: &apos;IAC&apos;, followed by &apos;CIN&apos;, followed by &apos;Part Number (PN)&apos;, followed by the &apos;+&apos; character, followed by the supplier assigned (or managed) &apos;Part Serial Number (PSN)&apos; that is globally unique within the CIN holder&apos;s domain; in the format IAC CIN PN + PSN (spaces provided for visual clarity only; they are not part of the data). See Annex C.11..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di19042">
            <summary>
              Looks up a localized string similar to Unique Item Identifier (UII) in 25S format preceded by numeric value indicating serial number element length for use by systems that require the &apos;serial number&apos; component of a concatenated Serial Number element (IAC+CIN+SN)  Format: DI+LI+IAC+CIN+SN (LI=length of SN).
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di19043">
            <summary>
              Looks up a localized string similar to Integrated Circuit Card Identifier (ICCID) in accordance with ITU-T Recommendation E.118 and ETSI Recommendation GSM 11.11; a maximum of 20 digits consisting of Issuer identification number (IIN; maximum of 7 digits), Individual account identification (variable; length determined by IIN, but the same length within individual IINs), Check digit (single digit calculated using Luhn algorithm\nhttp://en.wikipedia.org/wiki/Luhn_algorithm).\n43Siiiiiiinnnnnnnnnnnnc (i = IIN, n = account identification, c = check  [rest of string was truncated]&quot;;.
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di19050">
            <summary>
              Looks up a localized string similar to First Level (Supplier Assigned).
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di19051">
            <summary>
              Looks up a localized string similar to Second Level (Supplier Assigned).
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di19052">
            <summary>
              Looks up a localized string similar to Third Level (Supplier Assigned).
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di19053">
            <summary>
              Looks up a localized string similar to Fourth Level (Supplier Assigned).
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di19054">
            <summary>
              Looks up a localized string similar to Fifth Level (Supplier Assigned).
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di19096">
            <summary>
              Looks up a localized string similar to EPC number (Typically Serialized Global Trade Identification Number - SGTIN)\n2020 Update: The term â€œEPC numberâ€ is no longer used by GS1. Refer to GS1 General Specifications and the Tag Data Standard for current terminology.
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di19097">
            <summary>
              Looks up a localized string similar to Encrypted serial number assigned by the Supplier to an entity, which can be authenticated by an independent trusted third party. The encrypted serial number does not describe any parameters of the entity without decryption by an independent third party..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di2">
            <summary>
              Looks up a localized string similar to The &apos;AMPERSAND&apos; character. ICCBBA.
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di2000">
            <summary>
              Looks up a localized string similar to Container Type (internally assigned or mutually defined)..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di20000">
            <summary>
              Looks up a localized string similar to Traceability Number assigned by the Customer to identify/trace a unique group of entities (e.g., lot, batch, heat)..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di20001">
            <summary>
              Looks up a localized string similar to Traceability Number assigned by the Supplier to identify/trace a unique group of entities (e.g., lot, batch, heat)..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di20003">
            <summary>
              Looks up a localized string similar to Exclusive Assignment (U.S. EPA vehicle identification for emissions testing)..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di2001">
            <summary>
              Looks up a localized string similar to Returnable Container Identification Code assigned by the container owner or the appropriate regulatory agency (e.g., a metal tub, basket, reel, unit load device (ULD), trailer, tank, or intermodal container) (excludes gas cylinders See &apos;2B&apos;)..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di2002">
            <summary>
              Looks up a localized string similar to Gas Cylinder Container Identification Code assigned by the manufacturer in conformance with U.S. Department of Transportation (D.O.T.) standards..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di20020">
            <summary>
              Looks up a localized string similar to First Level (Customer Assigned)..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di20021">
            <summary>
              Looks up a localized string similar to Second Level (Customer Assigned)..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di20022">
            <summary>
              Looks up a localized string similar to Third Level (Customer Assigned)..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di20023">
            <summary>
              Looks up a localized string similar to Fourth Level (Customer Assigned..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di20024">
            <summary>
              Looks up a localized string similar to Fifth Level (Customer Assigned..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di20025">
            <summary>
              Looks up a localized string similar to Identification of a party to a transaction assigned by a holder of a Company Identification Number (CIN) and including the related Issuing Agency Code (IAC) in accordance with ISO/IEC 15459 and its registry, structured as a sequence of 3 concatenated data elements:  IAC, followed by CIN, followed by the supplier assigned traceability number that is unique within the CIN holder&apos;s domain..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di20026">
            <summary>
              Looks up a localized string similar to Batch Identifier comprising the concatenation of either:\n - a data identifier 26S mail processing equipment identifier, or\n - a data identifier 20K license identifier, or\n - a data identifier 18V party identifier that:\n - is distinct from any other ISO/IEC 15459 compliant identifier within the domain of the issuing agency concerned;\n - cannot be derived from another party identifier or any other ISO/IEC 15459 compliant identifier, issued under the same issuing agency, by the simple addition of characte [rest of string was truncated]&quot;;.
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di20027">
            <summary>
              Looks up a localized string similar to Batch Number, issued under the control of an identified party or unit of processing equipment, or under the provisions of an identified license, that:\n - uniquely distinguishes one batch of related items from all other batches to which a batch number is assigned by the party or equipment, or under the license, concerned;\n - comprises a string of maximum length 10 characters, of which the first (numeric) character indicates the number of following characters, each of which is taken from the set {0-9; A-Z}..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di2003">
            <summary>
              Looks up a localized string similar to Motor Freight Transport Equipment Identification Code assigned by the manufacturer in conformance with International Organisation for Standardization (ISO) standards..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di20030">
            <summary>
              Looks up a localized string similar to First Level (Supplier Assigned)..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di20031">
            <summary>
              Looks up a localized string similar to Second Level (Supplier Assigned)..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di20032">
            <summary>
              Looks up a localized string similar to Third Level (Supplier Assigned)..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di20033">
            <summary>
              Looks up a localized string similar to Fourth Level (Supplier Assigned)..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di20034">
            <summary>
              Looks up a localized string similar to Fifth Level (Supplier Assigned)..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di2004">
            <summary>
              Looks up a localized string similar to Standard Carrier Alpha Code (SCAC) (4 alphanumeric characters) and an optional carrier assigned trailer number (one to ten alphanumeric characters). When used, the carrier assigned trailer number is separated from the SCAC by a dash &apos;-&apos;..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di2005">
            <summary>
              Looks up a localized string similar to Receptacle Asset Number - Consisting of two joined parts:\n- Identification of an organisation in accordance with ISO/IEC 15459 and a unique entity identification assigned in accordance with rules established by the issuing agency.\n- A unique serial number assigned by the entity, ending with a 3-character container type code taken from EDIFACT Code List 8053 or UPU standard M82-3. (If the container type code listed is less than three characters in length, the field will be dash &apos;-&apos; filled left to the lengt [rest of string was truncated]&quot;;.
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di2007">
            <summary>
              Looks up a localized string similar to Container Serial Number.\nAccording to ISO 6346. OC EI CSN CD, where the OC is the three letter owner code assigned in cooperation with BIC, the EI is the one letter equipment category identifier, the CSN is a 6-digit unique container identification assigned by the equipment owner, and CD is a modulus 11 check digit calculated in accordance with Annex A, ISO 6346..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di2008">
            <summary>
              Looks up a localized string similar to Identification of a Returnable Container owner assigned in cooperation with BIC..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di2009">
            <summary>
              Looks up a localized string similar to Container Size/Type Code.\nAccording to ISO 6346, Section 4.2..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di2010">
            <summary>
              Looks up a localized string similar to Container Ownership Code. Actual four-character abbreviation marked on the container by the owner. For DOD owned containers see Defense Transportation Regulation App EE-6.\n2020 Update: data source reference updated to the Defense Transportation Regulation, Part II, App TT located at:\nhttps://www.ustranscom.mil/dtr/dtrp2.cfm.
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di2011">
            <summary>
              Looks up a localized string similar to Van Number (complete number minus check digit)..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di2012">
            <summary>
              Looks up a localized string similar to Check digit of Van Number identified in 11B..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di2013">
            <summary>
              Looks up a localized string similar to Container Number Code (last 5 digits of number not counting check digit)..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di2014">
            <summary>
              Looks up a localized string similar to Tag Status.\nY=Authorized / N=Unauthorized..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di2015">
            <summary>
              Looks up a localized string similar to Dangerous Cargo Class.\nIMDG Class in the format &apos;n.na&apos; where n = numeric, decimal point expressly encoded, and a = conditional alphabetic qualifier. http://docs.imo.org/..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di2016">
            <summary>
              Looks up a localized string similar to UN Code for Dangerous Goods.\nFor dangerous cargo provided by shipper in accordance with UN Code.\nwww.unece.org/trans/danger/publi/unrec/English/part3.pdf\n2020 Update: URL changed to http://www.unece.org/trans/danger/danger.html.
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di2017">
            <summary>
              Looks up a localized string similar to Name Of Transportation Subject.\nVessel name or vehicle code/train trip number in English..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di2018">
            <summary>
              Looks up a localized string similar to Vessel Registration Number.\nThe three letters &apos;IMO&apos; followed by the seven-digit number assigned to all ships by IHS Fairplay when constructed. http://www.imonumbers.lrfairplay.com/..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di2019">
            <summary>
              Looks up a localized string similar to Voyage number/Trip number.\nLetter and number..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di2020">
            <summary>
              Looks up a localized string similar to Vessel Country.\nISO 3166-1 Alpha 2 Code..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di2021">
            <summary>
              Looks up a localized string similar to Reserved for Electronic Seal Numbers.\nComprised of the 18185-1 seal tag ID - 32 bits and the ISO 14816 16-bit manufacturers ID (ISO 646)..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di2022">
            <summary>
              Looks up a localized string similar to Entry Number/Type.\nComprised of the three-digit filer code, followed by the sevendigit entry number, and completed with the one digit check digit. Entry Filer Code represents the three-character alphanumeric filer code assigned to the filer or importer by CBP. Entry Number represents the seven-digit number assigned by the filer. The number may be assigned in any manner convenient, provided that the same number is not assigned to more than one CBP Form 7501. Leading zeros must be shown. Check Digit is compu [rest of string was truncated]&quot;;.
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di2023">
            <summary>
              Looks up a localized string similar to Surety Number.\nThe three-digit numeric code that identifies the surety company on the Customs Bond. This code can be found in block 7 of the CBP Form 301, or is available through CBP&apos;s automated system to ABI filers, via the importer bond query transaction. For U.S. Government importations and entry types not requiring surety, code 999 should appear in this block. When cash or Government securities are used in lieu of surety, use code 998..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di2024">
            <summary>
              Looks up a localized string similar to Foreign Port of Lading.\n&apos;Schedule K&apos; (Classification of Foreign Ports by Geographic Trade Area and Country) for the foreign port at which the merchandise was actually laden on the vessel that carried the merchandise to the U.S. http://www.navigationdatacenter.us/wcsc/scheduleK/schedule k.htm.\n2020 Update: URL changed to: https://www.cbp.gov/sites/default/files/assets/documents/2017-Feb/appendix_f_0.pdf.
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di2025">
            <summary>
              Looks up a localized string similar to Identification of a Party to a Transaction as defined in ISO 17364, assigned by a holder of a Company Identification Number (CIN) and including the related Issuing Agency Code (IAC) in accordance with ISO/IEC 15459 and its registry, structured as a sequence of 3 concatenated data elements:  IAC, followed by CIN, followed by the RTI serial number that is unique within the CIN holder&apos;s domain..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di2026">
            <summary>
              Looks up a localized string similar to Unique Returnable Transport Item Identifier comprised of a sequence of 5 data elements: &apos;IAC&apos;, followed by &apos;CIN&apos;, followed by &apos;RTI Number&apos; (RTIN), followed by the &apos;+&apos; character, followed by the supplier assigned (or managed) &apos;RTI Serial Number&apos; (RTISN) that is globally unique within the CIN holder&apos;s domain; in the format IAC CIN RTIN + RTISN (spaces added for visual clarity only; they are not part of the data). See Annex C.11..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di2027">
            <summary>
              Looks up a localized string similar to Globally Unique Asset Identifier of a Large Load Carrier (LLC) Returnable Transport Item (RTI) with a side  base of = 1000 mm, as defined in ISO 17365:2013, tertiary packaging, layer 3 comprised of a sequence of 5 data elements: &apos;IAC&apos;, followed by &apos;CIN&apos;, followed by RTI Type Code &apos;RTITC&apos;, followed by the &apos;+&apos; character, followed by the owner assigned (or managed) RTI Serial Number &apos;RTISN&apos; that is globally unique within the CIN holder&apos;s domain in the format IAC CIN RTITC + RTISN (spaces added for visual clari [rest of string was truncated]&quot;;.
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di2028">
            <summary>
              Looks up a localized string similar to Globally Unique Asset Identifier of a Small Load Carrier (SLC) Returnable Transport Item with a side base of &lt; 1000 mm, as defined in ISO 17364:2013 (RTI), tertiary packaging, layer 2  comprised of a sequence of 5 data elements: &apos;IAC&apos;, followed by &apos;CIN&apos;, followed by RTI Type Code &apos;RTITC&apos;, followed by the &apos;+&apos; character, followed by the owner assigned (or managed) RTI Serial Number &apos;RTISN&apos; that is globally unique within the CIN holder&apos;s domain in the format IAC CIN RTITC + RTISN (spaces added for visual clari [rest of string was truncated]&quot;;.
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di2029">
            <summary>
              Looks up a localized string similar to Globally Unique Returnable Packaging Item (RPI) identifier of the category packaging aid (lid, blister, inlay, ...) comprised of a sequence of 5 data elements: &apos;IAC&apos;, followed by &apos;CIN&apos;, followed by &apos;RPI Number&apos; RPIN, followed by the &apos;+&apos; character, followed by the owner assigned (or managed) &apos;RPI Serial Number&apos; RPISN that is globally unique within the CIN holder&apos;s domain in the format IAC CIN RPIN + RPISN (spaces added for visual clarity only; they are not part of the data)..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di2030">
            <summary>
              Looks up a localized string similar to Packaging Item Number.\nNumber to identify the type of packaging item (material) used when packing products and packages.\nThe number will enable packaging item (material) be identified and separated from products, packages, Returnable Transport Items (RTIs) and Returnable Packaging Items (RPIs) during packing.\nThe number is constructed as a sequence of minimum 1 data element:\nPackaging item (material) number that is unique within the holder&apos;s domain..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di2031">
            <summary>
              Looks up a localized string similar to Global Unique Packaging Number\nGlobal unique number to identify the type of packaging item (material) used when packing products and packages.\nThe global unique number will enable packaging items (materials) be identified and separated from products, packages, Returnable Transport Items (RTIs) and Returnable Packaging Items (RPIs) during packing.\nThe number is constructed as a sequence of 3 concatenated data elements:\nThe IAC, followed by the CIN, followed by the Packaging item (material) number that is [rest of string was truncated]&quot;;.
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di2055">
            <summary>
              Looks up a localized string similar to Global Unique Returnable Packaging Item (RPI) as defined in ISO 17364, assigned by a holder of a Company Identification Number (CIN) and including the related Issuing Agency Code (IAC) in accordance with ISO/IEC 15459 and its registry, structured as a sequence of 3 concatenated data elements:  IAC, followed by CIN, followed by the RPI serial number that is unique within the CIN holder&apos;s domain..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di21005">
            <summary>
              Looks up a localized string similar to Specification of a postal service and associated process data in accordance with UPU standard S25 data construct &apos;Service Data&apos;.
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di21006">
            <summary>
              Looks up a localized string similar to Licensing Post Data, in accordance with the specification in UPU standard S25..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di21015">
            <summary>
              Looks up a localized string similar to Specification of supplementary postal service and associated process data in accordance with UPU standard S25 data construct &apos;Supplementary Service Data&apos;..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di21016">
            <summary>
              Looks up a localized string similar to Postal Administration Identifications, being the identification, expressed in accordance with the specification in UPU standard S25, of one or more postal administrations involved in the processing of a mail item or batch..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di21017">
            <summary>
              Looks up a localized string similar to UPU Location Code, being a code identifying a location or geographic area, or an associated group of such locations or areas, that has relevance to a related transaction and that complies with one of the structures defined in a) to g) below:\na) two upper case alphabetic characters corresponding to the ISO 3166-1 two alpha country code of the country in which, or consisting of which, the location(s) or area(s) are situated;\nb) three upper case alphabetic characters corresponding to the IATA code of the air [rest of string was truncated]&quot;;.
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di21018">
            <summary>
              Looks up a localized string similar to Qualified UPU Location Code, concatenation of:\n - a location category drawn from UPU code list 139;\n - a data identifier 17U UPU location code..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di21019">
            <summary>
              Looks up a localized string similar to License Plate with Service Data and Location Code is a compound data construct, compliant with the specification in UPU standard S25, which includes specification of:\n - an ISO/IEC 15459-compliant item identifier;\n - a data identifier 5U compliant specification of the service to be provided in respect of the item;\n - a data identifier 17U compliant UPU location code or a data identifier 18U compliant qualified UPU location code.\n Note - For further details, please refer to UPU standard S25. The distinct [rest of string was truncated]&quot;;.
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di21055">
            <summary>
              Looks up a localized string similar to OCR Data Locator..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di22000">
            <summary>
              Looks up a localized string similar to Supplier Code Assigned by Customer..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di22001">
            <summary>
              Looks up a localized string similar to Supplier Code Assigned by Supplier..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di22002">
            <summary>
              Looks up a localized string similar to U.P.C. Company Prefix.\n2020 Update: GS1 recommends this DI no longer be used and that users of this DI migrate to GS1 data qualifiers (Application Identifiers) per ISO/IEC 15418 and ISO/IEC 15459-3.\nAccording to GS1, the term â€œU.P.C.â€ is no longer used and the metadata (an2+n8) is no longer correct.GS1 recommends this DI not be used for future applications..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di22003">
            <summary>
              Looks up a localized string similar to GS1 Company Prefix.\n2020 Update: GS1 recommends this DI no longer be used and that users of this DI migrate to GS1 data qualifiers (Application Identifiers) per ISO/IEC 15418 and ISO/IEC 15459-3.\nAccording to GS1, the metadata (an2+n9) is no longer correct.GS1 recommends this DI not be used for future applications..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di22004">
            <summary>
              Looks up a localized string similar to Carrier Identification Code assigned by an industry standard mutually defined by the Supplier, Carrier, and Customer..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di22005">
            <summary>
              Looks up a localized string similar to Financial Institution Identification Code (mutually defined)..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di22006">
            <summary>
              Looks up a localized string similar to Manufacturer&apos;s Identification Code (mutually defined..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di22007">
            <summary>
              Looks up a localized string similar to Code assigned to a party which has financial liability for an entity or group of entities (e.g., owner of inventory) (mutually defined)..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di22008">
            <summary>
              Looks up a localized string similar to Customer Code Assigned by the Customer..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di22009">
            <summary>
              Looks up a localized string similar to Customer Code Assigned by the Supplier..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di22010">
            <summary>
              Looks up a localized string similar to Manufacturer ID\nNOTE - See Appendix 2, CBP 7501 Instructions..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di22011">
            <summary>
              Looks up a localized string similar to Organisation with budget responsibility for an entity, process, or procedure (e.g., shop, division, department)(internally assigned)..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di22012">
            <summary>
              Looks up a localized string similar to DUNS Number Identifying Manufacturer..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di22013">
            <summary>
              Looks up a localized string similar to DUNS Number Identifying Supplier..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di22014">
            <summary>
              Looks up a localized string similar to DUNS Number Identifying Customer..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di22015">
            <summary>
              Looks up a localized string similar to Carrier-Assigned Shipper Number..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di22016">
            <summary>
              Looks up a localized string similar to VMRS Supplier ID..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di22017">
            <summary>
              Looks up a localized string similar to U.S. DoD CAGE Code..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di22018">
            <summary>
              Looks up a localized string similar to Identification of a party to a transaction in which the data format consists of two concatenated segments. The first segment is the Issuing Agency Code (IAC) in accordance with ISO/IEC 15459, the second segment is a unique entity identification Company Identification Number (CIN) assigned in accordance with rules established by the issuing agency (see http://www.aimglobal.org/?page=Reg_Authority15459&amp;hhSear chTerms=%22IAC%22)..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di22019">
            <summary>
              Looks up a localized string similar to Specification of a party&apos;s role(s), in a transaction, consisting of one or more code values from EDIFACT Code List 3035 &apos;Party Qualifier&apos;, separated by plus (+) characters (Never to be concatenated with other DIs in a linear symbol or other media where the concatenation character is a plus (+) character)..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di22020">
            <summary>
              Looks up a localized string similar to Identification of a party to a transaction assigned by a holder of a Company Identification Number (CIN) and including the related Issuing Agency Code (IAC) in accordance with ISO/IEC 15459 and its registry, structured as a sequence of 3 concatenated data elements:  IAC, followed by CIN, followed by a plus (+) character followed by one or more code values from EDIFACT Code List 3035 &apos;Party Qualifier&apos;, separated by plus (+) characters (Never to be concatenated with other DIs in a linear symbol or other media [rest of string was truncated]&quot;;.
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di22021">
            <summary>
              Looks up a localized string similar to Identification of a party to a transaction, e.g., 21V IAC CIN OSU, assigned by a holder of a Company Identification Number (CIN) and including the related Issuing Agency Code (IAC) in accordance with ISO/IEC 15459 and its registry, structured as a sequence of 3 concatenated data elements:  IAC, followed by CIN, followed by the organisational sub-unit identification assigned by the CIN that is unique within the CIN holder&apos;s domain..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di22022">
            <summary>
              Looks up a localized string similar to Carrier SCAC.\nStandard Carrier Alpha Code - The National Motor Freight Traffic Association, Inc., (NMFTA) assigns SCACs for all companies except those codes used for identification of freight containers not operating exclusively in North America, intermodal chassis and trailers, non-railroad owned rail cars, and railroads. http://www.nmfta.org/Pages/welcome.aspx\nCompanies seeking identification codes for freight containers not operating in North America should contact the Bureau International des Containe [rest of string was truncated]&quot;;.
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di22023">
            <summary>
              Looks up a localized string similar to Government-assigned Value Added Tax identification number identifying supplier, starting with an ISO 3166-1 alpha-2 country code (except for Greece, which uses the ISO 639-1 language code EL), followed by the government-assigned VAT number.\nExample:\n23VIE6388047V  assigned to Google IrelanD..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di22024">
            <summary>
              Looks up a localized string similar to Government-assigned Value Added Tax identification number identifying customer, starting with an ISO 3166-1 alpha-2 country code (except for Greece, which uses the ISO 639-1 language code EL), followed by the government-assigned VAT number.\nExample:\n24VIE6388047V  assigned to Google Ireland..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di22025">
            <summary>
              Looks up a localized string similar to Declaring that the NCAGE/CAGE code that follows DI 25V is the Manufacturer. Party to a transaction wherein the NATO Commercial And Government Entity (NCAGE) / Commercial And Government Entity (CAGE) code used behind DI 25V is declared to be the manufacturer of the item(s) involved in the transaction. Data following DI 25V will consist of five upper\u0002case alphanumeric characters, excluding the letters â€œIâ€ and â€œOâ€..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di23000">
            <summary>
              Looks up a localized string similar to Work Order Number (e.g., &apos;Production Paper&apos;) (internally assigned)..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di23001">
            <summary>
              Looks up a localized string similar to Operation Sequence Number. A number that defines the order of a particular operation in a series of operations, generally in a manufacturing or assembly process..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di23002">
            <summary>
              Looks up a localized string similar to Operation Code/Work Code - the type of work to be performed (internally assigned or mutually defined)..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di23003">
            <summary>
              Looks up a localized string similar to Combined Work Order Number and Operation Sequence Number in the format nn...n+nn...n where a plus symbol (+) is used as a delimiter between the Work Order Number and the Operation Sequence Number..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di23004">
            <summary>
              Looks up a localized string similar to Status Code (internally assigned or mutually defined)..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di23005">
            <summary>
              Looks up a localized string similar to Work Unit Code - identifies system, subsystem, assembly, component etc. on which maintenance is performed..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di23006">
            <summary>
              Looks up a localized string similar to Nomenclature - (internally assigned or mutually defined)..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di23010">
            <summary>
              Looks up a localized string similar to Form Control Number - Preprinted control number on forms..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di23011">
            <summary>
              Looks up a localized string similar to Quality Assurance Inspector - Last Name..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di23012">
            <summary>
              Looks up a localized string similar to Telephone Number of the Person/Activity Completing the Form - expressed in the format (country code) city or area code plus local number i.e. (1) 319 555 1212..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di26000">
            <summary>
              Looks up a localized string similar to Mutually Defined Between Customer and Supplier.
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di26001">
            <summary>
              Looks up a localized string similar to Mutually Defined Between Carrier and Supplier.
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di26002">
            <summary>
              Looks up a localized string similar to Mutually Defined Between Customer and Carrier.
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di26003">
            <summary>
              Looks up a localized string similar to Free Text.
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di26004">
            <summary>
              Looks up a localized string similar to Mutually Defined Between Carrier and Trading Partner.
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di26010">
            <summary>
              Looks up a localized string similar to Structured Free Text  (Header Data).
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di26011">
            <summary>
              Looks up a localized string similar to Structured Free Text (Line 1 Data).
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di26012">
            <summary>
              Looks up a localized string similar to Structured Free Text (Line 2 Data).
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di26013">
            <summary>
              Looks up a localized string similar to Structured Free Text (Line 3 Data).
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di26014">
            <summary>
              Looks up a localized string similar to Structured Free Text (Line 4 Data).
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di26015">
            <summary>
              Looks up a localized string similar to Structured Free Text (Line 5 Data).
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di26016">
            <summary>
              Looks up a localized string similar to Structured Free Text (Line 6 Data).
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di26017">
            <summary>
              Looks up a localized string similar to Structured Free Text (Line 7 Data).
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di26018">
            <summary>
              Looks up a localized string similar to Structured Free Text (Line 8 Data).
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di26019">
            <summary>
              Looks up a localized string similar to Structured Free Text (Line 9 Data).
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di26020">
            <summary>
              Looks up a localized string similar to Structured Free Text (Line 10 Data).
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di26021">
            <summary>
              Looks up a localized string similar to Structured Free Text (Line 11 Data).
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di26022">
            <summary>
              Looks up a localized string similar to Structured Free Text (Line 12 Data).
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di26023">
            <summary>
              Looks up a localized string similar to Structured Free Text (Line 13 Data).
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di26024">
            <summary>
              Looks up a localized string similar to Structured Free Text (Line 14 Data).
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di26025">
            <summary>
              Looks up a localized string similar to Structured Free Text (Line 15 Data).
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di26026">
            <summary>
              Looks up a localized string similar to Structured Free Text (Line 16 Data).
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di26027">
            <summary>
              Looks up a localized string similar to Structured Free Text (Line 17 Data).
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di26028">
            <summary>
              Looks up a localized string similar to Structured Free Text (Line 18 Data).
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di26029">
            <summary>
              Looks up a localized string similar to Structured Free Text (Line 19 Data).
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di26030">
            <summary>
              Looks up a localized string similar to Structured Free Text (Line 20 Data).
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di26031">
            <summary>
              Looks up a localized string similar to Structured Free Text (Line 21 Data).
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di26032">
            <summary>
              Looks up a localized string similar to Structured Free Text (Line 22 Data).
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di26033">
            <summary>
              Looks up a localized string similar to Structured Free Text (Line 23 Data).
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di26034">
            <summary>
              Looks up a localized string similar to Structured Free Text (Line 24 Data).
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di26035">
            <summary>
              Looks up a localized string similar to Structured Free Text (Line 25 Data).
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di26036">
            <summary>
              Looks up a localized string similar to Structured Free Text (Line 26 Data).
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di26037">
            <summary>
              Looks up a localized string similar to Structured Free Text (Line 27 Data).
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di26038">
            <summary>
              Looks up a localized string similar to Structured Free Text (Line 28 Data).
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di26039">
            <summary>
              Looks up a localized string similar to Structured Free Text (Line 29 Data).
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di26040">
            <summary>
              Looks up a localized string similar to Structured Free Text (Line 30 Data).
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di26041">
            <summary>
              Looks up a localized string similar to Structured Free Text (Line 31 Data).
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di26042">
            <summary>
              Looks up a localized string similar to Structured Free Text (Line 32 Data).
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di26043">
            <summary>
              Looks up a localized string similar to Structured Free Text (Line 33 Data).
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di26044">
            <summary>
              Looks up a localized string similar to Structured Free Text (Line 34 Data).
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di26045">
            <summary>
              Looks up a localized string similar to Structured Free Text (Line 35 Data).
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di26046">
            <summary>
              Looks up a localized string similar to Structured Free Text (Line 36 Data).
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di26047">
            <summary>
              Looks up a localized string similar to Structured Free Text (Line 37 Data).
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di26048">
            <summary>
              Looks up a localized string similar to Structured Free Text (Line 38 Data).
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di26049">
            <summary>
              Looks up a localized string similar to Structured Free Text (Line 39 Data).
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di26050">
            <summary>
              Looks up a localized string similar to Structured Free Text (Line 40 Data).
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di26051">
            <summary>
              Looks up a localized string similar to Structured Free Text (Line 41 Data).
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di26052">
            <summary>
              Looks up a localized string similar to Structured Free Text (Line 42 Data).
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di26053">
            <summary>
              Looks up a localized string similar to Structured Free Text (Line 43 Data).
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di26054">
            <summary>
              Looks up a localized string similar to Structured Free Text (Line 44 Data).
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di26055">
            <summary>
              Looks up a localized string similar to Structured Free Text (Line 45 Data).
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di26056">
            <summary>
              Looks up a localized string similar to Structured Free Text (Line 46 Data).
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di26057">
            <summary>
              Looks up a localized string similar to Structured Free Text (Line 47 Data).
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di26058">
            <summary>
              Looks up a localized string similar to Structured Free Text (Line 48 Data).
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di26059">
            <summary>
              Looks up a localized string similar to Structured Free Text (Line 49 Data).
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di26060">
            <summary>
              Looks up a localized string similar to Structured Free Text (Line 50 Data).
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di26061">
            <summary>
              Looks up a localized string similar to Structured Free Text (Line 51 Data).
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di26062">
            <summary>
              Looks up a localized string similar to Structured Free Text (Line 52 Data).
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di26063">
            <summary>
              Looks up a localized string similar to Structured Free Text (Line 53 Data).
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di26064">
            <summary>
              Looks up a localized string similar to Structured Free Text (Line 54 Data).
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di26065">
            <summary>
              Looks up a localized string similar to Structured Free Text (Line 55 Data).
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di26066">
            <summary>
              Looks up a localized string similar to Structured Free Text (Line 56 Data).
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di26067">
            <summary>
              Looks up a localized string similar to Structured Free Text (Line 57 Data).
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di26068">
            <summary>
              Looks up a localized string similar to Structured Free Text (Line 58 Data).
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di26069">
            <summary>
              Looks up a localized string similar to Structured Free Text (Line 59 Data).
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di26070">
            <summary>
              Looks up a localized string similar to Structured Free Text (Line 60 Data).
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di26071">
            <summary>
              Looks up a localized string similar to Structured Free Text (Line 61 Data).
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di26072">
            <summary>
              Looks up a localized string similar to Structured Free Text (Line 62 Data).
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di26073">
            <summary>
              Looks up a localized string similar to Structured Free Text (Line 63 Data).
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di26074">
            <summary>
              Looks up a localized string similar to Structured Free Text (Line 64 Data).
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di26075">
            <summary>
              Looks up a localized string similar to Structured Free Text (Line 65 Data).
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di26076">
            <summary>
              Looks up a localized string similar to Structured Free Text (Line 66 Data).
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di26077">
            <summary>
              Looks up a localized string similar to Structured Free Text (Line 67 Data).
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di26078">
            <summary>
              Looks up a localized string similar to Structured Free Text (Line 68 Data).
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di26079">
            <summary>
              Looks up a localized string similar to Structured Free Text (Line 69 Data).
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di26080">
            <summary>
              Looks up a localized string similar to Structured Free Text (Line 70 Data).
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di26081">
            <summary>
              Looks up a localized string similar to Structured Free Text (Line 71 Data).
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di26082">
            <summary>
              Looks up a localized string similar to Structured Free Text (Line 72 Data).
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di26083">
            <summary>
              Looks up a localized string similar to Structured Free Text (Line 73 Data).
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di26084">
            <summary>
              Looks up a localized string similar to Structured Free Text (Line 74 Data).
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di26085">
            <summary>
              Looks up a localized string similar to Structured Free Text (Line 75 Data).
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di26086">
            <summary>
              Looks up a localized string similar to Structured Free Text (Line 76 Data).
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di26087">
            <summary>
              Looks up a localized string similar to Structured Free Text (Line 77 Data).
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di26088">
            <summary>
              Looks up a localized string similar to Structured Free Text (Line 78 Data).
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di26089">
            <summary>
              Looks up a localized string similar to Structured Free Text (Line 79 Data).
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di26090">
            <summary>
              Looks up a localized string similar to Structured Free Text (Line 80 Data).
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di26091">
            <summary>
              Looks up a localized string similar to Structured Free Text (Line 81 Data).
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di26092">
            <summary>
              Looks up a localized string similar to Structured Free Text (Line 82 Data).
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di26093">
            <summary>
              Looks up a localized string similar to Structured Free Text (Line 83 Data).
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di26094">
            <summary>
              Looks up a localized string similar to Structured Free Text (Line 84 Data).
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di26095">
            <summary>
              Looks up a localized string similar to Structured Free Text (Line 85 Data).
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di26096">
            <summary>
              Looks up a localized string similar to Structured Free Text (Line 86 Data).
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di26097">
            <summary>
              Looks up a localized string similar to Structured Free Text (Line 87 Data).
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di26098">
            <summary>
              Looks up a localized string similar to Structured Free Text (Line 88 Data).
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di26099">
            <summary>
              Looks up a localized string similar to Structured Free Text (Line 89 Data).
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di3">
            <summary>
              Looks up a localized string similar to The &apos;EQUAL&apos; character. ICCBB.
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di3000">
            <summary>
              Looks up a localized string similar to Continuation of an Item Code (Category 16) assigned by Customer that is too long for a required field size..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di3001">
            <summary>
              Looks up a localized string similar to Continuation of Traceability Code (Category 20) assigned by Supplier..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di3002">
            <summary>
              Looks up a localized string similar to Continuation of Serial Number (Category 19) assigned by Supplier..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di3003">
            <summary>
              Looks up a localized string similar to Continuation of Free Text (Category 26) mutually defined between Supplier/Carrier/Customer..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di3004">
            <summary>
              Looks up a localized string similar to Continuation of Transaction Reference (Category 11) mutually defined between Supplier/Carrier/Customer..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di3005">
            <summary>
              Looks up a localized string similar to Continuation of Item Code (Category 16) Assigned by Supplier..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di4">
            <summary>
              Looks up a localized string similar to Function 1 (FUNC1) character. Appears in the first position following the symbology start character of a Code 128, Code 49, or Code 16K Symbol to signify a GS1-controlled symbol..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di4000">
            <summary>
              Looks up a localized string similar to Format YYMMDD..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di4001">
            <summary>
              Looks up a localized string similar to Format DDMMYY..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di4002">
            <summary>
              Looks up a localized string similar to Format MMDDYY..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di4003">
            <summary>
              Looks up a localized string similar to Format YDDD (Julian)..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di4004">
            <summary>
              Looks up a localized string similar to Format YYDDD (Julian)..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di4005">
            <summary>
              Looks up a localized string similar to ISO format YYMMDD immediately followed by an ANSI X12.3 Data Element Number 374 Qualifier providing a code specifying type of date (e.g., ship date, manufacture date)..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di4006">
            <summary>
              Looks up a localized string similar to ISO format YYYYMMDD immediately followed by an ANSI X12.3 Data Element Number 374 Qualifier providing a code specifying type of date (e.g., ship date, manufacture date)..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di4007">
            <summary>
              Looks up a localized string similar to Format MMYY..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di4008">
            <summary>
              Looks up a localized string similar to Event, Date, And Time.\nISO format YYYYMMDDHHMM (24 hour clock - UTC) immediately followed by a UN/EDIFACT Code Qualifier 2005 providing a code specifying type of date), e.g.,\n11 [Date when goods are expected to be dispatched/shipped message is issued.];\n17 [Estimated delivery date/time when goods are expected to be delivered];\n35 [Date on which goods are delivered to their destination.];\n118 [Booking Confirmed];\n129 [Date when the vessel/merchandise departed the last foreign port in the exporting coun [rest of string was truncated]&quot;;.
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di4009">
            <summary>
              Looks up a localized string similar to Date (structure and significance mutually defined)..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di4010">
            <summary>
              Looks up a localized string similar to Format YYWW..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di4011">
            <summary>
              Looks up a localized string similar to Format YYYYWW..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di4012">
            <summary>
              Looks up a localized string similar to Format YYYYMMDD..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di4013">
            <summary>
              Looks up a localized string similar to Oldest and Newest Manufacturing Date in the format YYWWYYWW..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di4014">
            <summary>
              Looks up a localized string similar to Expiration Date (YYYYMMDD)..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di4015">
            <summary>
              Looks up a localized string similar to Expiration Date (DDMMYYYY)..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di4016">
            <summary>
              Looks up a localized string similar to Production Date (YYYYMMDD) - Date of manufacture..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di4017">
            <summary>
              Looks up a localized string similar to Production Date (DDMMYYYY)..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di4018">
            <summary>
              Looks up a localized string similar to Tag Activation Time.\nYYYYMMDDHHMM (24 hour clock - UTC)..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di4019">
            <summary>
              Looks up a localized string similar to Tag Deactivation Time.\nYYYYMMDDHHMM (24 hour clock - UTC)..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di4020">
            <summary>
              Looks up a localized string similar to Inspection Date (DDMMYYYY)..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di4021">
            <summary>
              Looks up a localized string similar to Required Delivery Date (DDD Julian) or DOD MILSTAMP Code..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di4022">
            <summary>
              Looks up a localized string similar to Record Time.\nYYYYMMDDHHMM (24 hour clock - UTC)..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di4023">
            <summary>
              Looks up a localized string similar to Date, represented in modified UTC compliant form:\nyyyy[mm[dd[hh[mm[ss[fff]]]]]][poooo] where square brackets indicate optionality and yyyy is the year, mmdd the month and day, hhmmss the time of day in hours minutes and seconds, fff the fractions of sections and poooo the offset from UTC expressed in hours and minutes, the offset being positive if p is a point (.), negative if P is a minus sign (-).\nEXAMPLE:\n2005 - (UTC) calendar year 2005;\n200505 - (UTC) calendar month May 2005;\n20050518 - (UTC) 18 Ma [rest of string was truncated]&quot;;.
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di4024">
            <summary>
              Looks up a localized string similar to Qualified Date, comprising the concatenation of:\n- an ISO/IEC 15459 issuing agency code;\n- a date qualifier conforming to the specifications of that issuing agency;\n- a date whose format and interpretation comply with the specifications of the issuing agency for that date qualifier..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di4025">
            <summary>
              Looks up a localized string similar to Best before date: (YYYYMMDD).\nExample: 25D20170202 = February 2, 2017.
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di4026">
            <summary>
              Looks up a localized string similar to First freeze date (YYYYMMDD).\nThe first freeze date is defined as the date on which products are frozen directly after slaughtering, harvesting, catching or after initial processing.\nExample: 26D20170721 = July 21, 2017..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di4027">
            <summary>
              Looks up a localized string similar to Harvest date (YYYYMMDD).\nThe date when an animal was slaughtered or killed, a fish has been harvested, or a crop was harvested.\nExample: 27D20170615 = June 15, 2017..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di4028">
            <summary>
              Looks up a localized string similar to Harvest date range (YYYYMMDDYYYYMMDD).\nThe start date and end date range over which harvesting occurred.\nFor example; animals were slaughtered or killed, fish were harvested, or a crop was harvested.\nThe data stream is defined as the first YYYYMMDD as the start date and the last YYYYMMDD as the end date.\nExample:\n28D2017012320170214 = Start; January 23, 2017. End; February 14, 2017..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di5">
            <summary>
              Looks up a localized string similar to &apos;Left Square Bracket&apos;, &apos;Right Parenthesis&apos;, &apos;Greater Than Sign&apos;, &apos;Record Separator&apos; characters. Data structure compliant to ISO/IEC 15434, Information technology - Automatic Identification and Data Capture Techniques - Syntax for High Capacity ADC Media..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di5000">
            <summary>
              Looks up a localized string similar to Restricted Substances Classification - &apos;Environmental Classification Code&apos; including Lead-Free (Pb-Free) finish categories defined in JESD97 (IPC JEDEC J-STD-609), and future industry or governmental agency assigned codes related to environmental regulatory compliance and hazardous material content..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di5001">
            <summary>
              Looks up a localized string similar to Air Pressure - (altitude) expressed in Pascal&apos;s as the standard international measure..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di5002">
            <summary>
              Looks up a localized string similar to Maximum Allowed Temperature. Maximum permitted temperature; Degrees Celsius, &apos;-&apos; (minus) encoded, if required..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di5003">
            <summary>
              Looks up a localized string similar to Minimum Allowed Temperature.\nMinimum permitted temperature; Degrees Celsius, &apos;-&apos; (minus) encoded, if required..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di5004">
            <summary>
              Looks up a localized string similar to Maximum Allowed Relative Humidity.\nMaximum permitted relative humidity, implied as percent..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di5005">
            <summary>
              Looks up a localized string similar to Minimum Allowed Relative Humidity.\nMaximum permitted relative humidity, expressed as percent..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di5006">
            <summary>
              Looks up a localized string similar to Refrigerator Container Temperature.\nFor temperature-controlled cargo, target specified by shipper, Degrees Celsius, &apos;-&apos; (minus) encoded, if required..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di5010">
            <summary>
              Looks up a localized string similar to Cumulative Time Temperature Index - expressed as the number of measurements or counts..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di5011">
            <summary>
              Looks up a localized string similar to Time Temperature Index - Next Higher Assembly - expressed as the number of measurements or counts..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di5012">
            <summary>
              Looks up a localized string similar to Declaration of Packaging Material Category*, Code* and Weight for a given packaging material used in a given packaging according to the EU packaging and packaging waste directive. (Material category and code defined in Annex M).\n12ECCMMMMMMNNNNNUU where:  - &apos;12E&apos; (an3) is the Data Identifier;\n  - &apos;CC&apos; (n2) is the Material Category per Annex M;\n  - &apos;MMMMMM&apos; (an1...6) is the Material Code per Annex M;\n  - &apos;NNNNN&apos; (n5) Material Weight, including decimal point (e.g., 12.12);\n - &apos;UU&apos; (an2) is the Unit of me [rest of string was truncated]&quot;;.
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di5013">
            <summary>
              Looks up a localized string similar to The data following DI 13E will be one of the MSL indicators (1, 2, 2a, 3, 4, 5, 5a, 6) as shown in the LEVEL column in Table 5-1 of JEDEC standard IPC/JEDEC J-STD-020E. The Table is shown below for reference only; the currently released version of the referenced standard shall be used to obtain the correct MSL for the actual component. Example: 13E2a.
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di6">
            <summary>
              Looks up a localized string similar to The &apos;HYPHEN&apos; or &apos;MINUS&apos; character. Pharmaceutical Central Number (PZN), controlled by IFA-ABDATA, Germany (Registration of this system identifier expires on 2016-07-01). Replaced by &apos;9N&apos;..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di6000">
            <summary>
              Looks up a localized string similar to Looping Header..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di6001">
            <summary>
              Looks up a localized string similar to My parent ______ is . . . Unique identifier followed by a Data Identifier and associated data (for use with returnable packaging). This Data Identifier must immediately follow the field (constructed of a Data Identifier, data and a group separator) with which it is associated..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di6003">
            <summary>
              Looks up a localized string similar to I have ______ children . . . (for use with returnable packaging, e.g.; 3F10, for ten children). This Data Identifier must immediately follow the field (constructed of a Data Identifier, data and a group separator) with which it is associated..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di6004">
            <summary>
              Looks up a localized string similar to Logical Assignment of a Page of Information within a group of pages that are spread across several data carriers, structured as a sequence of up to three (3) concatenated data elements, separated by a slash ( / ) :\n  Page number (required), followed by page count (optional, required for the last page), followed by an alphanumeric group ID (optional; if used then required for all pages and structured in accordance with ISO/IEC 15459-3 as a sequence of 3 data elements: Issuing Agency Code, followed by the Co [rest of string was truncated]&quot;;.
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di6005">
            <summary>
              Looks up a localized string similar to I have ______ children and they are . . . (for use with returnable packaging) This Data Identifier must immediately follow the field (constructed of a Data Identifier, data and a group separator) with which it is associated..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di7">
            <summary>
              Looks up a localized string similar to The &apos;EXCLAMATION MARK&apos;. Eurocode-IBLS.
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di8000">
            <summary>
              Looks up a localized string similar to Name of Party.\nName of a party followed by a plus (+) character followed by one or more code values from EDIFACT Code List 3035 &apos;Party Qualifier&apos;, e.g.;\nBY [Buyer];\nCF   [Container operator];\nCN [Consignee];\nCS [Consolidator];\nDEI  [Vessel operator/captain of vessel];\nFA [Operational staff code];\nIM [Importer];\nMF   [Manufacturer];\nOS [Shipper];\nSE [Seller];\nST [Ship To];\nUC [Ultimate consignee]..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di8001">
            <summary>
              Looks up a localized string similar to Employee Identification Code assigned by employer..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di8002">
            <summary>
              Looks up a localized string similar to U.S. Social Security Number..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di8003">
            <summary>
              Looks up a localized string similar to ID Number for Non-Employee (internally assigned or mutually defined) (e.g., contract workers, vendors, service, and delivery personnel)..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di8004">
            <summary>
              Looks up a localized string similar to National Social Security Number..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di8005">
            <summary>
              Looks up a localized string similar to Last Name..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di8006">
            <summary>
              Looks up a localized string similar to Party Name (Line 2)..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di8007">
            <summary>
              Looks up a localized string similar to Contact Phone.\nCountry Code, Area Code, Exchange, number [XX YYY ZZZ ZZZZ]..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di8008">
            <summary>
              Looks up a localized string similar to Contact Email..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di8009">
            <summary>
              Looks up a localized string similar to Consignee Number.\nThe unique identifying number can be the IRS, EIN, SSN, or the CBP assigned number, as required on the Security Filing. Only the following formats shall be used: IRS EIN: NN-NNNNNNN;\nIRS EIN w/ suffix:\nNN-NNNNNNNXX;\nSSN:   NNN-NN-NNNN;\nCBP assigned nbr: YYDDPP-NNNNN..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di8010">
            <summary>
              Looks up a localized string similar to Personal Identification Code (first initial, Last initial, last four of SSN)..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di8011">
            <summary>
              Looks up a localized string similar to First Name and Middle Initial..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di8012">
            <summary>
              Looks up a localized string similar to Military Grade (E1-E9, W1-W5, and O1-O10).\n2020 Update: Metadata format has been changed to agree with the actual officer grades in use by the military: â€œan2+an3â€. The Explanation information has been changed to: â€œMilitary Grade (E1-E9, W1-W5, and O1-O11)..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di8015">
            <summary>
              Looks up a localized string similar to A National Identification Number, National Identity Number, or National Insurance Number used as a means of identifying individuals within a country for the purposes of work, taxation, government benefits, health care, and other governmentally-related functions.\nThis structure of the identifier is DI (15H) followed by the ISO 3166-1 Alpha2 Country Code followed by the predominant government assigned identification code for individuals..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di8025">
            <summary>
              Looks up a localized string similar to Globally Unique Personal ID. assigned by a holder of a Company Identification Code (CIN) and including the related Issuing Agency Code (IAC) in accordance with ISO/IEC 15459 and its registry, structured as sequence of 3 concatenated data elements: IAC followed by CIN, followed by the ID unique within the holder&apos;s domain..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di8026">
            <summary>
              Looks up a localized string similar to Globally Unique Personal ID, with a \Party Qualifier\&quot; code value from EDIFACT Code List 3035.
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di9000">
            <summary>
              Looks up a localized string similar to Exclusive Assignment - Vehicle Identification Number (VIN) as defined in the U.S. under 49 CFR, Section Section  565 and internationally by ISO 3779. (These are completely compatible data structures)..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di9002">
            <summary>
              Looks up a localized string similar to Abbreviated VIN Code..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di9004">
            <summary>
              Looks up a localized string similar to Globally unique transport vehicle identifier (e.g., Trucks) consisting of the Vehicle Identification Number (VIN) as defined in the U.S. under 49 CFR Section Section  565, and internationally by ISO 3779, followed by the &apos;+&apos; character, then followed by the government-issued Vehicle Registration License Plate Number in the form of &apos;4I&apos; &apos;VIN&apos; &apos;+&apos; &apos;government-issued Vehicle Registration License Plate Number&apos; (quotes and spaces shown for clarity only; they are not part of the data)..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.AnsiMh10_8_2DataIdentifier.di9005">
            <summary>
              Looks up a localized string similar to Unique production vehicle identifier that will be used during the vehicle production processes, consisting of the Body Tag Number (BTN; or any other descriptor used to identify the raw car body, or stated another way, the assemblage of parts that are used to start the vehicleâ€™s production), followed by the â€œ+â€ character, then followed by the Production Order Number (PON), followed by the â€œ+â€ character, and then followed by the Manufacturer-assigned Serial Number (SN). NOTE â€“ The SN component sha [rest of string was truncated]&quot;;.
            </summary>
        </member>
        <member name="T:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.Resources.Ansi_Mh10_8_2_001">
            <summary>
              Looks up a localized string similar to header.
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.Resources.Ansi_Mh10_8_2_002">
            <summary>
              Looks up a localized string similar to trailer.
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.Resources.Ansi_Mh10_8_2_Error_001">
            <summary>
              Looks up a localized string similar to No records provided..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.Resources.Ansi_Mh10_8_2_Error_002">
            <summary>
              Looks up a localized string similar to Invalid format. No format {0} provided..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.Resources.Ansi_Mh10_8_2_Error_003">
            <summary>
              Looks up a localized string similar to No data provided..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.Resources.Ansi_Mh10_8_2_Error_004">
            <summary>
              Looks up a localized string similar to Invalid field. No data identifier..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.Resources.Ansi_Mh10_8_2_Error_005">
            <summary>
              Looks up a localized string similar to Validation for DI{0} timed out..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.Resources.Ansi_Mh10_8_2_Error_006">
            <summary>
              Looks up a localized string similar to The entity value cannot be null for DI{0}..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.Resources.Ansi_Mh10_8_2_Error_007">
            <summary>
              Looks up a localized string similar to The value{0} is invalid for DI {1}..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.Resources.Ansi_Mh10_8_2_Error_008">
            <summary>
              Looks up a localized string similar to The value is invalid for DI{0}..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.Resources.Ansi_Mh10_8_2_Error_009">
            <summary>
              Looks up a localized string similar to Invalid data identifier {0}..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.Resources.Ansi_Mh10_8_2_Error_010">
            <summary>
              Looks up a localized string similar to Invalid data identifier..
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.Properties.Resources.Ansi_Mh10_8_2_Error_011">
            <summary>
              Looks up a localized string similar to The value{0} does not match the specified pattern for the data element..
            </summary>
        </member>
        <member name="T:Solidsoft.Reply.Parsers.AnsiMhDi.ResolvedDataIdentifier">
            <summary>
              Represents a resolved ASC (MH10.8) application identifier and its associated data.
            </summary>
        </member>
        <member name="F:Solidsoft.Reply.Parsers.AnsiMhDi.ResolvedDataIdentifier._exceptions">
            <summary>
              A list of resolver exceptions.
            </summary>
        </member>
        <member name="M:Solidsoft.Reply.Parsers.AnsiMhDi.ResolvedDataIdentifier.#ctor(System.Int32,System.String,System.Int32,System.String,System.String,System.String,System.Int32)">
            <summary>
              Initializes a new instance of the <see cref="T:Solidsoft.Reply.Parsers.AnsiMhDi.ResolvedDataIdentifier" /> class.
            </summary>
            <param name="entity">
              The application identifier entity.
            </param>
            <param name="identifier">
              The identifier, as represented in the barcode.
            </param>
            <param name="inverseExponent">
              The implied decimal point position in the value.
            </param>
            <param name="value">
              The value associated with the application identifier.
            </param>
            <param name="dataTitle">
              The application identifier data title.
            </param>
            <param name="description">
              The description of the application identifier.
            </param>
            <param name="currentPosition">
              The position of the application identifier for the current field.
            </param>
        </member>
        <member name="M:Solidsoft.Reply.Parsers.AnsiMhDi.ResolvedDataIdentifier.#ctor(Solidsoft.Reply.Parsers.Common.ParserException,System.Int32,System.String)">
            <summary>
              Initializes a new instance of the <see cref="T:Solidsoft.Reply.Parsers.AnsiMhDi.ResolvedDataIdentifier" /> class.
            </summary>
            <param name="exception">A resolver exception.</param>
            <param name="currentPosition">
              The current character position at which parsing has occurred.
            </param>
            <param name="value">
              The value of the unrecognised ASC MH10.8.2 data identifier.
            </param>
        </member>
        <member name="M:Solidsoft.Reply.Parsers.AnsiMhDi.ResolvedDataIdentifier.#ctor(Solidsoft.Reply.Parsers.Common.ParserException,System.Int32,Solidsoft.Reply.Parsers.Common.IResolvedEntity)">
            <summary>
              Initializes a new instance of the <see cref="T:Solidsoft.Reply.Parsers.AnsiMhDi.ResolvedDataIdentifier" /> class.
            </summary>
            <param name="exception">A resolver exception.</param>
            <param name="currentPosition">
              The current character position at which parsing has occurred.
            </param>
            <param name="di">
              The ASC MH10.8.2 data identifier.
            </param>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.ResolvedDataIdentifier.CharacterPosition">
            <summary>
              Gets the character position where the error occurred.
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.ResolvedDataIdentifier.DataTitle">
            <summary>
              Gets the application identifier data title.
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.ResolvedDataIdentifier.Description">
            <summary>
              Gets the description of the application identifier.
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.ResolvedDataIdentifier.Entity">
            <summary>
              Gets the data identifier entity.
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.ResolvedDataIdentifier.Exceptions">
            <summary>
              Gets the exceptions raised during attempted entity resolution.
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.ResolvedDataIdentifier.Identifier">
            <summary>
              Gets the identifier, as represented in the barcode.
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.ResolvedDataIdentifier.InverseExponent">
            <summary>
              Gets the implied decimal point position in the value.
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.ResolvedDataIdentifier.IsError">
            <summary>
              Gets a value indicating whether resolution resulted in an error.
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.ResolvedDataIdentifier.IsFatal">
            <summary>
              Gets a value indicating whether an error is fatal (further parsing was aborted).
            </summary>
        </member>
        <member name="P:Solidsoft.Reply.Parsers.AnsiMhDi.ResolvedDataIdentifier.Value">
            <summary>
              Gets the value associated with the application identifier.
            </summary>
        </member>
        <member name="M:Solidsoft.Reply.Parsers.AnsiMhDi.ResolvedDataIdentifier.AddException(Solidsoft.Reply.Parsers.Common.ParserException)">
            <summary>
              Adds a resolver exception.
            </summary>
            <param name="parserException">The resolver exception to be added.</param>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.DatePatternDdMmYyRegEx_0">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the DatePatternDdMmYyRegEx method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.DatePatternDdMmYyRegEx_0.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.DatePatternDdMmYyRegEx_0.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.DatePatternDdMmYyRegEx_0.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.DatePatternDdMmYyRegEx_0.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.DatePatternDdMmYyRegEx_0.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.DatePatternDdMmYyRegEx_0.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.DatePatternDdMmYyRegEx_0.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.DatePatternDdMmYyRegEx_0.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.DatePatternDdMmYyyyyRegEx_1">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the DatePatternDdMmYyyyyRegEx method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.DatePatternDdMmYyyyyRegEx_1.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.DatePatternDdMmYyyyyRegEx_1.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.DatePatternDdMmYyyyyRegEx_1.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.DatePatternDdMmYyyyyRegEx_1.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.DatePatternDdMmYyyyyRegEx_1.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.DatePatternDdMmYyyyyRegEx_1.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.DatePatternDdMmYyyyyRegEx_1.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.DatePatternDdMmYyyyyRegEx_1.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.DatePatternMmDdYyRegEx_2">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the DatePatternMmDdYyRegEx method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.DatePatternMmDdYyRegEx_2.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.DatePatternMmDdYyRegEx_2.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.DatePatternMmDdYyRegEx_2.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.DatePatternMmDdYyRegEx_2.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.DatePatternMmDdYyRegEx_2.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.DatePatternMmDdYyRegEx_2.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.DatePatternMmDdYyRegEx_2.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.DatePatternMmDdYyRegEx_2.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.DatePatternYDddJulianRegEx_3">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the DatePatternYDddJulianRegEx method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.DatePatternYDddJulianRegEx_3.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.DatePatternYDddJulianRegEx_3.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.DatePatternYDddJulianRegEx_3.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.DatePatternYDddJulianRegEx_3.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.DatePatternYDddJulianRegEx_3.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.DatePatternYDddJulianRegEx_3.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.DatePatternYDddJulianRegEx_3.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.DatePatternYDddJulianRegEx_3.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.DatePatternYyDddJulianRegEx_4">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the DatePatternYyDddJulianRegEx method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.DatePatternYyDddJulianRegEx_4.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.DatePatternYyDddJulianRegEx_4.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.DatePatternYyDddJulianRegEx_4.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.DatePatternYyDddJulianRegEx_4.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.DatePatternYyDddJulianRegEx_4.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.DatePatternYyDddJulianRegEx_4.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.DatePatternYyDddJulianRegEx_4.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.DatePatternYyDddJulianRegEx_4.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.DatePatternYyMmDdRegEx_5">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the DatePatternYyMmDdRegEx method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.DatePatternYyMmDdRegEx_5.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.DatePatternYyMmDdRegEx_5.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.DatePatternYyMmDdRegEx_5.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.DatePatternYyMmDdRegEx_5.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.DatePatternYyMmDdRegEx_5.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.DatePatternYyMmDdRegEx_5.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.DatePatternYyMmDdRegEx_5.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.DatePatternYyMmDdRegEx_5.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.DatePatternYyMmDdZerosRegEx_6">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the DatePatternYyMmDdZerosRegEx method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.DatePatternYyMmDdZerosRegEx_6.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.DatePatternYyMmDdZerosRegEx_6.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.DatePatternYyMmDdZerosRegEx_6.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.DatePatternYyMmDdZerosRegEx_6.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.DatePatternYyMmDdZerosRegEx_6.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.DatePatternYyMmDdZerosRegEx_6.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.DatePatternYyMmDdZerosRegEx_6.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.DatePatternYyMmDdZerosRegEx_6.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.DatePatternYyWwRegEx_7">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the DatePatternYyWwRegEx method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.DatePatternYyWwRegEx_7.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.DatePatternYyWwRegEx_7.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.DatePatternYyWwRegEx_7.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.DatePatternYyWwRegEx_7.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.DatePatternYyWwRegEx_7.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.DatePatternYyWwRegEx_7.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.DatePatternYyWwRegEx_7.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.DatePatternYyWwRegEx_7.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.DatePatternYyyyMmDdRegEx_8">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the DatePatternYyyyMmDdRegEx method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.DatePatternYyyyMmDdRegEx_8.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.DatePatternYyyyMmDdRegEx_8.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.DatePatternYyyyMmDdRegEx_8.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.DatePatternYyyyMmDdRegEx_8.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.DatePatternYyyyMmDdRegEx_8.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.DatePatternYyyyMmDdRegEx_8.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.DatePatternYyyyMmDdRegEx_8.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.DatePatternYyyyMmDdRegEx_8.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.DatePatternYyyyMmDdHhMmRegEx_9">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the DatePatternYyyyMmDdHhMmRegEx method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.DatePatternYyyyMmDdHhMmRegEx_9.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.DatePatternYyyyMmDdHhMmRegEx_9.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.DatePatternYyyyMmDdHhMmRegEx_9.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.DatePatternYyyyMmDdHhMmRegEx_9.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.DatePatternYyyyMmDdHhMmRegEx_9.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.DatePatternYyyyMmDdHhMmRegEx_9.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.DatePatternYyyyMmDdHhMmRegEx_9.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.DatePatternYyyyMmDdHhMmRegEx_9.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.Alphanumeric01UnboundRegEx_10">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the Alphanumeric01UnboundRegEx method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.Alphanumeric01UnboundRegEx_10.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Alphanumeric01UnboundRegEx_10.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.Alphanumeric01UnboundRegEx_10.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Alphanumeric01UnboundRegEx_10.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.Alphanumeric01UnboundRegEx_10.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Alphanumeric01UnboundRegEx_10.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Alphanumeric01UnboundRegEx_10.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Alphanumeric01UnboundRegEx_10.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.AlphanumericWithPlus01UnboundRegEx_11">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the AlphanumericWithPlus01UnboundRegEx method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.AlphanumericWithPlus01UnboundRegEx_11.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.AlphanumericWithPlus01UnboundRegEx_11.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.AlphanumericWithPlus01UnboundRegEx_11.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.AlphanumericWithPlus01UnboundRegEx_11.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.AlphanumericWithPlus01UnboundRegEx_11.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.AlphanumericWithPlus01UnboundRegEx_11.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.AlphanumericWithPlus01UnboundRegEx_11.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.AlphanumericWithPlus01UnboundRegEx_11.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.InvariantNoPlus01UnboundPlusRegEx_12">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the InvariantNoPlus01UnboundPlusRegEx method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.InvariantNoPlus01UnboundPlusRegEx_12.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.InvariantNoPlus01UnboundPlusRegEx_12.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.InvariantNoPlus01UnboundPlusRegEx_12.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.InvariantNoPlus01UnboundPlusRegEx_12.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.InvariantNoPlus01UnboundPlusRegEx_12.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.InvariantNoPlus01UnboundPlusRegEx_12.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.InvariantNoPlus01UnboundPlusRegEx_12.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.InvariantNoPlus01UnboundPlusRegEx_12.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.NumericPlus01UnboundRegEx_13">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the NumericPlus01UnboundRegEx method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.NumericPlus01UnboundRegEx_13.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.NumericPlus01UnboundRegEx_13.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.NumericPlus01UnboundRegEx_13.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.NumericPlus01UnboundRegEx_13.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.NumericPlus01UnboundRegEx_13.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.NumericPlus01UnboundRegEx_13.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.NumericPlus01UnboundRegEx_13.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.NumericPlus01UnboundRegEx_13.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.LatitudeLongitudeAttitudeRegEx_14">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the LatitudeLongitudeAttitudeRegEx method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.LatitudeLongitudeAttitudeRegEx_14.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.LatitudeLongitudeAttitudeRegEx_14.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.LatitudeLongitudeAttitudeRegEx_14.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.LatitudeLongitudeAttitudeRegEx_14.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.LatitudeLongitudeAttitudeRegEx_14.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.LatitudeLongitudeAttitudeRegEx_14.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.LatitudeLongitudeAttitudeRegEx_14.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.LatitudeLongitudeAttitudeRegEx_14.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.YesNoLetterRegEx_15">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the YesNoLetterRegEx method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.YesNoLetterRegEx_15.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.YesNoLetterRegEx_15.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.YesNoLetterRegEx_15.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.YesNoLetterRegEx_15.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.YesNoLetterRegEx_15.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.YesNoLetterRegEx_15.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.YesNoLetterRegEx_15.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.HibccPlusRegEx_16">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the HibccPlusRegEx method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.HibccPlusRegEx_16.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.HibccPlusRegEx_16.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.HibccPlusRegEx_16.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.HibccPlusRegEx_16.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.HibccPlusRegEx_16.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.HibccPlusRegEx_16.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.HibccPlusRegEx_16.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.HibccPlusRegEx_16.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.IccbbaAmpersandRegEx_17">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the IccbbaAmpersandRegEx method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.IccbbaAmpersandRegEx_17.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.IccbbaAmpersandRegEx_17.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.IccbbaAmpersandRegEx_17.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.IccbbaAmpersandRegEx_17.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.IccbbaAmpersandRegEx_17.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.IccbbaAmpersandRegEx_17.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.IccbbaAmpersandRegEx_17.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.IccbbaAmpersandRegEx_17.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.IccbbaEqualRegEx_18">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the IccbbaEqualRegEx method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.IccbbaEqualRegEx_18.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.IccbbaEqualRegEx_18.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.IccbbaEqualRegEx_18.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.IccbbaEqualRegEx_18.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.IccbbaEqualRegEx_18.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.IccbbaEqualRegEx_18.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.IccbbaEqualRegEx_18.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.IccbbaEqualRegEx_18.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.Gs1Function1RegEx_19">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the Gs1Function1RegEx method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.Gs1Function1RegEx_19.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Gs1Function1RegEx_19.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.Gs1Function1RegEx_19.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Gs1Function1RegEx_19.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.Gs1Function1RegEx_19.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Gs1Function1RegEx_19.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Gs1Function1RegEx_19.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Gs1Function1RegEx_19.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.IsoIec15434PreambleRegEx_20">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the IsoIec15434PreambleRegEx method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.IsoIec15434PreambleRegEx_20.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.IsoIec15434PreambleRegEx_20.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.IsoIec15434PreambleRegEx_20.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.IsoIec15434PreambleRegEx_20.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.IsoIec15434PreambleRegEx_20.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.IsoIec15434PreambleRegEx_20.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.IsoIec15434PreambleRegEx_20.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.IsoIec15434PreambleRegEx_20.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.IfaAbdataPznHyphenRegEx_21">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the IfaAbdataPznHyphenRegEx method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.IfaAbdataPznHyphenRegEx_21.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.IfaAbdataPznHyphenRegEx_21.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.IfaAbdataPznHyphenRegEx_21.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.IfaAbdataPznHyphenRegEx_21.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.IfaAbdataPznHyphenRegEx_21.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.IfaAbdataPznHyphenRegEx_21.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.IfaAbdataPznHyphenRegEx_21.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.IfaAbdataPznHyphenRegEx_21.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.EurocodeIblsExclamationMarkRegEx_22">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the EurocodeIblsExclamationMarkRegEx method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.EurocodeIblsExclamationMarkRegEx_22.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.EurocodeIblsExclamationMarkRegEx_22.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.EurocodeIblsExclamationMarkRegEx_22.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.EurocodeIblsExclamationMarkRegEx_22.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.EurocodeIblsExclamationMarkRegEx_22.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.EurocodeIblsExclamationMarkRegEx_22.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.EurocodeIblsExclamationMarkRegEx_22.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.EurocodeIblsExclamationMarkRegEx_22.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.DangerousCargoClassRegEx_23">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the DangerousCargoClassRegEx method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.DangerousCargoClassRegEx_23.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.DangerousCargoClassRegEx_23.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.DangerousCargoClassRegEx_23.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.DangerousCargoClassRegEx_23.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.DangerousCargoClassRegEx_23.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.DangerousCargoClassRegEx_23.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.DangerousCargoClassRegEx_23.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.DangerousCargoClassRegEx_23.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.VesselRegistrationNumberRegEx_24">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the VesselRegistrationNumberRegEx method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.VesselRegistrationNumberRegEx_24.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.VesselRegistrationNumberRegEx_24.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.VesselRegistrationNumberRegEx_24.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.VesselRegistrationNumberRegEx_24.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.VesselRegistrationNumberRegEx_24.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.VesselRegistrationNumberRegEx_24.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.VesselRegistrationNumberRegEx_24.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.VesselRegistrationNumberRegEx_24.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.ElectronicSealNumbersRegEx_25">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the ElectronicSealNumbersRegEx method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.ElectronicSealNumbersRegEx_25.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.ElectronicSealNumbersRegEx_25.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.ElectronicSealNumbersRegEx_25.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.ElectronicSealNumbersRegEx_25.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.ElectronicSealNumbersRegEx_25.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.ElectronicSealNumbersRegEx_25.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.ElectronicSealNumbersRegEx_25.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.ElectronicSealNumbersRegEx_25.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.FormatMmYyRegEx_26">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the FormatMmYyRegEx method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.FormatMmYyRegEx_26.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.FormatMmYyRegEx_26.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.FormatMmYyRegEx_26.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.FormatMmYyRegEx_26.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.FormatMmYyRegEx_26.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.FormatMmYyRegEx_26.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.FormatMmYyRegEx_26.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.FormatMmYyRegEx_26.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.EventDateAndTimeRegEx_27">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the EventDateAndTimeRegEx method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.EventDateAndTimeRegEx_27.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.EventDateAndTimeRegEx_27.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.EventDateAndTimeRegEx_27.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.EventDateAndTimeRegEx_27.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.EventDateAndTimeRegEx_27.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.EventDateAndTimeRegEx_27.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.EventDateAndTimeRegEx_27.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.EventDateAndTimeRegEx_27.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.FormatYyyyWwRegEx_28">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the FormatYyyyWwRegEx method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.FormatYyyyWwRegEx_28.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.FormatYyyyWwRegEx_28.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.FormatYyyyWwRegEx_28.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.FormatYyyyWwRegEx_28.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.FormatYyyyWwRegEx_28.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.FormatYyyyWwRegEx_28.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.FormatYyyyWwRegEx_28.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.FormatYyyyWwRegEx_28.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.OldestAndNewestManufacturingDateRegEx_29">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the OldestAndNewestManufacturingDateRegEx method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.OldestAndNewestManufacturingDateRegEx_29.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.OldestAndNewestManufacturingDateRegEx_29.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.OldestAndNewestManufacturingDateRegEx_29.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.OldestAndNewestManufacturingDateRegEx_29.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.OldestAndNewestManufacturingDateRegEx_29.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.OldestAndNewestManufacturingDateRegEx_29.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.OldestAndNewestManufacturingDateRegEx_29.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.OldestAndNewestManufacturingDateRegEx_29.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.HarvestDateRangeRegEx_30">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the HarvestDateRangeRegEx method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.HarvestDateRangeRegEx_30.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.HarvestDateRangeRegEx_30.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.HarvestDateRangeRegEx_30.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.HarvestDateRangeRegEx_30.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.HarvestDateRangeRegEx_30.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.HarvestDateRangeRegEx_30.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.HarvestDateRangeRegEx_30.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.HarvestDateRangeRegEx_30.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.UniformResourceLocatorRegEx_31">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the UniformResourceLocatorRegEx method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.UniformResourceLocatorRegEx_31.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.UniformResourceLocatorRegEx_31.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.UniformResourceLocatorRegEx_31.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.UniformResourceLocatorRegEx_31.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.UniformResourceLocatorRegEx_31.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.UniformResourceLocatorRegEx_31.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.UniformResourceLocatorRegEx_31.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.UniformResourceLocatorRegEx_31.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.AlphanumericCageSnRegEx_32">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the AlphanumericCageSnRegEx method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.AlphanumericCageSnRegEx_32.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.AlphanumericCageSnRegEx_32.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.AlphanumericCageSnRegEx_32.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.AlphanumericCageSnRegEx_32.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.AlphanumericCageSnRegEx_32.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.AlphanumericCageSnRegEx_32.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.AlphanumericCageSnRegEx_32.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.AlphanumericCageSnRegEx_32.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.AlphanumericRegEx2_33">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the AlphanumericRegEx2 method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.AlphanumericRegEx2_33.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.AlphanumericRegEx2_33.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.AlphanumericRegEx2_33.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.AlphanumericRegEx2_33.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.AlphanumericRegEx2_33.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.AlphanumericRegEx2_33.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.AlphanumericRegEx2_33.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.AlphanumericRegEx2_33.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.AlphanumericRegEx3_34">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the AlphanumericRegEx3 method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.AlphanumericRegEx3_34.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.AlphanumericRegEx3_34.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.AlphanumericRegEx3_34.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.AlphanumericRegEx3_34.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.AlphanumericRegEx3_34.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.AlphanumericRegEx3_34.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.AlphanumericRegEx3_34.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.AlphanumericRegEx3_34.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.AlphanumericRegEx4_35">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the AlphanumericRegEx4 method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.AlphanumericRegEx4_35.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.AlphanumericRegEx4_35.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.AlphanumericRegEx4_35.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.AlphanumericRegEx4_35.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.AlphanumericRegEx4_35.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.AlphanumericRegEx4_35.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.AlphanumericRegEx4_35.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.AlphanumericRegEx4_35.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.AlphanumericRegEx5_36">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the AlphanumericRegEx5 method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.AlphanumericRegEx5_36.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.AlphanumericRegEx5_36.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.AlphanumericRegEx5_36.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.AlphanumericRegEx5_36.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.AlphanumericRegEx5_36.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.AlphanumericRegEx5_36.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.AlphanumericRegEx5_36.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.AlphanumericRegEx5_36.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.AlphanumericRegEx6_37">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the AlphanumericRegEx6 method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.AlphanumericRegEx6_37.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.AlphanumericRegEx6_37.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.AlphanumericRegEx6_37.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.AlphanumericRegEx6_37.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.AlphanumericRegEx6_37.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.AlphanumericRegEx6_37.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.AlphanumericRegEx6_37.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.AlphanumericRegEx6_37.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.AlphanumericRegEx10_38">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the AlphanumericRegEx10 method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.AlphanumericRegEx10_38.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.AlphanumericRegEx10_38.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.AlphanumericRegEx10_38.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.AlphanumericRegEx10_38.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.AlphanumericRegEx10_38.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.AlphanumericRegEx10_38.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.AlphanumericRegEx10_38.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.AlphanumericRegEx10_38.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.AlphanumericRegEx12_39">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the AlphanumericRegEx12 method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.AlphanumericRegEx12_39.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.AlphanumericRegEx12_39.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.AlphanumericRegEx12_39.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.AlphanumericRegEx12_39.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.AlphanumericRegEx12_39.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.AlphanumericRegEx12_39.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.AlphanumericRegEx12_39.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.AlphanumericRegEx12_39.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.AlphanumericRegEx18_40">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the AlphanumericRegEx18 method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.AlphanumericRegEx18_40.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.AlphanumericRegEx18_40.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.AlphanumericRegEx18_40.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.AlphanumericRegEx18_40.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.AlphanumericRegEx18_40.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.AlphanumericRegEx18_40.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.AlphanumericRegEx18_40.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.AlphanumericRegEx18_40.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.AlphanumericRegEx0103_41">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the AlphanumericRegEx0103 method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.AlphanumericRegEx0103_41.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.AlphanumericRegEx0103_41.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.AlphanumericRegEx0103_41.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.AlphanumericRegEx0103_41.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.AlphanumericRegEx0103_41.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.AlphanumericRegEx0103_41.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.AlphanumericRegEx0103_41.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.AlphanumericRegEx0103_41.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.AlphanumericRegEx0109_42">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the AlphanumericRegEx0109 method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.AlphanumericRegEx0109_42.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.AlphanumericRegEx0109_42.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.AlphanumericRegEx0109_42.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.AlphanumericRegEx0109_42.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.AlphanumericRegEx0109_42.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.AlphanumericRegEx0109_42.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.AlphanumericRegEx0109_42.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.AlphanumericRegEx0109_42.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.AlphanumericRegEx0110_43">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the AlphanumericRegEx0110 method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.AlphanumericRegEx0110_43.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.AlphanumericRegEx0110_43.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.AlphanumericRegEx0110_43.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.AlphanumericRegEx0110_43.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.AlphanumericRegEx0110_43.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.AlphanumericRegEx0110_43.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.AlphanumericRegEx0110_43.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.AlphanumericRegEx0110_43.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.AlphanumericRegEx0120_44">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the AlphanumericRegEx0120 method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.AlphanumericRegEx0120_44.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.AlphanumericRegEx0120_44.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.AlphanumericRegEx0120_44.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.AlphanumericRegEx0120_44.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.AlphanumericRegEx0120_44.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.AlphanumericRegEx0120_44.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.AlphanumericRegEx0120_44.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.AlphanumericRegEx0120_44.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.AlphanumericRegEx0135_45">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the AlphanumericRegEx0135 method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.AlphanumericRegEx0135_45.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.AlphanumericRegEx0135_45.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.AlphanumericRegEx0135_45.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.AlphanumericRegEx0135_45.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.AlphanumericRegEx0135_45.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.AlphanumericRegEx0135_45.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.AlphanumericRegEx0135_45.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.AlphanumericRegEx0135_45.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.AlphanumericRegEx0150_46">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the AlphanumericRegEx0150 method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.AlphanumericRegEx0150_46.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.AlphanumericRegEx0150_46.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.AlphanumericRegEx0150_46.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.AlphanumericRegEx0150_46.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.AlphanumericRegEx0150_46.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.AlphanumericRegEx0150_46.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.AlphanumericRegEx0150_46.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.AlphanumericRegEx0150_46.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.AlphanumericRegEx01100_47">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the AlphanumericRegEx01100 method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.AlphanumericRegEx01100_47.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.AlphanumericRegEx01100_47.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.AlphanumericRegEx01100_47.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.AlphanumericRegEx01100_47.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.AlphanumericRegEx01100_47.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.AlphanumericRegEx01100_47.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.AlphanumericRegEx01100_47.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.AlphanumericRegEx01100_47.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.AlphanumericRegEx0230_48">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the AlphanumericRegEx0230 method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.AlphanumericRegEx0230_48.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.AlphanumericRegEx0230_48.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.AlphanumericRegEx0230_48.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.AlphanumericRegEx0230_48.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.AlphanumericRegEx0230_48.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.AlphanumericRegEx0230_48.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.AlphanumericRegEx0230_48.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.AlphanumericRegEx0230_48.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.AlphanumericRegEx0235_49">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the AlphanumericRegEx0235 method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.AlphanumericRegEx0235_49.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.AlphanumericRegEx0235_49.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.AlphanumericRegEx0235_49.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.AlphanumericRegEx0235_49.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.AlphanumericRegEx0235_49.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.AlphanumericRegEx0235_49.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.AlphanumericRegEx0235_49.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.AlphanumericRegEx0235_49.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.AlphanumericRegEx0309_50">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the AlphanumericRegEx0309 method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.AlphanumericRegEx0309_50.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.AlphanumericRegEx0309_50.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.AlphanumericRegEx0309_50.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.AlphanumericRegEx0309_50.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.AlphanumericRegEx0309_50.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.AlphanumericRegEx0309_50.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.AlphanumericRegEx0309_50.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.AlphanumericRegEx0309_50.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.AlphanumericRegEx0322_51">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the AlphanumericRegEx0322 method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.AlphanumericRegEx0322_51.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.AlphanumericRegEx0322_51.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.AlphanumericRegEx0322_51.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.AlphanumericRegEx0322_51.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.AlphanumericRegEx0322_51.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.AlphanumericRegEx0322_51.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.AlphanumericRegEx0322_51.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.AlphanumericRegEx0322_51.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.AlphanumericRegEx0335_52">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the AlphanumericRegEx0335 method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.AlphanumericRegEx0335_52.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.AlphanumericRegEx0335_52.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.AlphanumericRegEx0335_52.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.AlphanumericRegEx0335_52.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.AlphanumericRegEx0335_52.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.AlphanumericRegEx0335_52.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.AlphanumericRegEx0335_52.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.AlphanumericRegEx0335_52.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.AlphanumericRegEx0411_53">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the AlphanumericRegEx0411 method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.AlphanumericRegEx0411_53.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.AlphanumericRegEx0411_53.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.AlphanumericRegEx0411_53.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.AlphanumericRegEx0411_53.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.AlphanumericRegEx0411_53.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.AlphanumericRegEx0411_53.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.AlphanumericRegEx0411_53.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.AlphanumericRegEx0411_53.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.AlphanumericRegEx0425_54">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the AlphanumericRegEx0425 method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.AlphanumericRegEx0425_54.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.AlphanumericRegEx0425_54.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.AlphanumericRegEx0425_54.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.AlphanumericRegEx0425_54.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.AlphanumericRegEx0425_54.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.AlphanumericRegEx0425_54.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.AlphanumericRegEx0425_54.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.AlphanumericRegEx0425_54.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.AlphanumericRegEx0529_55">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the AlphanumericRegEx0529 method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.AlphanumericRegEx0529_55.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.AlphanumericRegEx0529_55.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.AlphanumericRegEx0529_55.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.AlphanumericRegEx0529_55.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.AlphanumericRegEx0529_55.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.AlphanumericRegEx0529_55.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.AlphanumericRegEx0529_55.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.AlphanumericRegEx0529_55.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.AlphanumericRegEx0516_56">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the AlphanumericRegEx0516 method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.AlphanumericRegEx0516_56.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.AlphanumericRegEx0516_56.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.AlphanumericRegEx0516_56.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.AlphanumericRegEx0516_56.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.AlphanumericRegEx0516_56.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.AlphanumericRegEx0516_56.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.AlphanumericRegEx0516_56.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.AlphanumericRegEx0516_56.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.AlphanumericRegEx0522_57">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the AlphanumericRegEx0522 method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.AlphanumericRegEx0522_57.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.AlphanumericRegEx0522_57.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.AlphanumericRegEx0522_57.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.AlphanumericRegEx0522_57.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.AlphanumericRegEx0522_57.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.AlphanumericRegEx0522_57.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.AlphanumericRegEx0522_57.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.AlphanumericRegEx0522_57.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.AlphanumericRegEx0635_58">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the AlphanumericRegEx0635 method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.AlphanumericRegEx0635_58.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.AlphanumericRegEx0635_58.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.AlphanumericRegEx0635_58.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.AlphanumericRegEx0635_58.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.AlphanumericRegEx0635_58.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.AlphanumericRegEx0635_58.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.AlphanumericRegEx0635_58.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.AlphanumericRegEx0635_58.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.AlphanumericRegEx1012_59">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the AlphanumericRegEx1012 method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.AlphanumericRegEx1012_59.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.AlphanumericRegEx1012_59.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.AlphanumericRegEx1012_59.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.AlphanumericRegEx1012_59.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.AlphanumericRegEx1012_59.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.AlphanumericRegEx1012_59.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.AlphanumericRegEx1012_59.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.AlphanumericRegEx1012_59.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.AlphanumericRegEx1015_60">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the AlphanumericRegEx1015 method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.AlphanumericRegEx1015_60.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.AlphanumericRegEx1015_60.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.AlphanumericRegEx1015_60.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.AlphanumericRegEx1015_60.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.AlphanumericRegEx1015_60.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.AlphanumericRegEx1015_60.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.AlphanumericRegEx1015_60.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.AlphanumericRegEx1015_60.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.AlphanumericRegEx1315_61">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the AlphanumericRegEx1315 method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.AlphanumericRegEx1315_61.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.AlphanumericRegEx1315_61.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.AlphanumericRegEx1315_61.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.AlphanumericRegEx1315_61.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.AlphanumericRegEx1315_61.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.AlphanumericRegEx1315_61.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.AlphanumericRegEx1315_61.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.AlphanumericRegEx1315_61.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.AlphanumericRegEx1626_62">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the AlphanumericRegEx1626 method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.AlphanumericRegEx1626_62.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.AlphanumericRegEx1626_62.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.AlphanumericRegEx1626_62.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.AlphanumericRegEx1626_62.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.AlphanumericRegEx1626_62.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.AlphanumericRegEx1626_62.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.AlphanumericRegEx1626_62.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.AlphanumericRegEx1626_62.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.Alphanumeric04Alphanumeric0110RegEx_63">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the Alphanumeric04Alphanumeric0110RegEx method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.Alphanumeric04Alphanumeric0110RegEx_63.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Alphanumeric04Alphanumeric0110RegEx_63.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.Alphanumeric04Alphanumeric0110RegEx_63.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Alphanumeric04Alphanumeric0110RegEx_63.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.Alphanumeric04Alphanumeric0110RegEx_63.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Alphanumeric04Alphanumeric0110RegEx_63.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Alphanumeric04Alphanumeric0110RegEx_63.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Alphanumeric04Alphanumeric0110RegEx_63.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.Alphanumeric0132Alphanumeric03WithDashesRegEx_64">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the Alphanumeric0132Alphanumeric03WithDashesRegEx method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.Alphanumeric0132Alphanumeric03WithDashesRegEx_64.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Alphanumeric0132Alphanumeric03WithDashesRegEx_64.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.Alphanumeric0132Alphanumeric03WithDashesRegEx_64.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Alphanumeric0132Alphanumeric03WithDashesRegEx_64.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.Alphanumeric0132Alphanumeric03WithDashesRegEx_64.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Alphanumeric0132Alphanumeric03WithDashesRegEx_64.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Alphanumeric0132Alphanumeric03WithDashesRegEx_64.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Alphanumeric0132Alphanumeric03WithDashesRegEx_64.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.Alphanumeric11Numeric02_65">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the Alphanumeric11Numeric02 method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.Alphanumeric11Numeric02_65.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Alphanumeric11Numeric02_65.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.Alphanumeric11Numeric02_65.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Alphanumeric11Numeric02_65.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.Alphanumeric11Numeric02_65.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Alphanumeric11Numeric02_65.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Alphanumeric11Numeric02_65.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Alphanumeric11Numeric02_65.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.Numeric02AlphanumericDash0106NumericDot05Alphanumeric02RegEx_66">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the Numeric02AlphanumericDash0106NumericDot05Alphanumeric02RegEx method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.Numeric02AlphanumericDash0106NumericDot05Alphanumeric02RegEx_66.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Numeric02AlphanumericDash0106NumericDot05Alphanumeric02RegEx_66.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.Numeric02AlphanumericDash0106NumericDot05Alphanumeric02RegEx_66.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Numeric02AlphanumericDash0106NumericDot05Alphanumeric02RegEx_66.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.Numeric02AlphanumericDash0106NumericDot05Alphanumeric02RegEx_66.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Numeric02AlphanumericDash0106NumericDot05Alphanumeric02RegEx_66.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Numeric02AlphanumericDash0106NumericDot05Alphanumeric02RegEx_66.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Numeric02AlphanumericDash0106NumericDot05Alphanumeric02RegEx_66.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.Alphanumeric0335Alpha0103RegEx_67">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the Alphanumeric0335Alpha0103RegEx method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.Alphanumeric0335Alpha0103RegEx_67.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Alphanumeric0335Alpha0103RegEx_67.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.Alphanumeric0335Alpha0103RegEx_67.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Alphanumeric0335Alpha0103RegEx_67.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.Alphanumeric0335Alpha0103RegEx_67.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Alphanumeric0335Alpha0103RegEx_67.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Alphanumeric0335Alpha0103RegEx_67.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Alphanumeric0335Alpha0103RegEx_67.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.Alpha02Alphanumeric0327RegEx_68">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the Alpha02Alphanumeric0327RegEx method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.Alpha02Alphanumeric0327RegEx_68.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Alpha02Alphanumeric0327RegEx_68.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.Alpha02Alphanumeric0327RegEx_68.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Alpha02Alphanumeric0327RegEx_68.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.Alpha02Alphanumeric0327RegEx_68.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Alpha02Alphanumeric0327RegEx_68.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Alpha02Alphanumeric0327RegEx_68.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Alpha02Alphanumeric0327RegEx_68.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.Alpha03Numeric14Alphanumeric0133RegEx_69">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the Alpha03Numeric14Alphanumeric0133RegEx method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.Alpha03Numeric14Alphanumeric0133RegEx_69.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Alpha03Numeric14Alphanumeric0133RegEx_69.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.Alpha03Numeric14Alphanumeric0133RegEx_69.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Alpha03Numeric14Alphanumeric0133RegEx_69.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.Alpha03Numeric14Alphanumeric0133RegEx_69.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Alpha03Numeric14Alphanumeric0133RegEx_69.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Alpha03Numeric14Alphanumeric0133RegEx_69.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Alpha03Numeric14Alphanumeric0133RegEx_69.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.Alpha01Numeric04Alphanumeric0520RegEx_70">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the Alpha01Numeric04Alphanumeric0520RegEx method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.Alpha01Numeric04Alphanumeric0520RegEx_70.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Alpha01Numeric04Alphanumeric0520RegEx_70.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.Alpha01Numeric04Alphanumeric0520RegEx_70.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Alpha01Numeric04Alphanumeric0520RegEx_70.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.Alpha01Numeric04Alphanumeric0520RegEx_70.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Alpha01Numeric04Alphanumeric0520RegEx_70.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Alpha01Numeric04Alphanumeric0520RegEx_70.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Alpha01Numeric04Alphanumeric0520RegEx_70.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.Numeric0108Alphanumeric02RegEx_71">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the Numeric0108Alphanumeric02RegEx method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.Numeric0108Alphanumeric02RegEx_71.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Numeric0108Alphanumeric02RegEx_71.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.Numeric0108Alphanumeric02RegEx_71.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Numeric0108Alphanumeric02RegEx_71.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.Numeric0108Alphanumeric02RegEx_71.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Numeric0108Alphanumeric02RegEx_71.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Numeric0108Alphanumeric02RegEx_71.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Numeric0108Alphanumeric02RegEx_71.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.Numeric0110Alphanumeric03RegEx_72">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the Numeric0110Alphanumeric03RegEx method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.Numeric0110Alphanumeric03RegEx_72.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Numeric0110Alphanumeric03RegEx_72.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.Numeric0110Alphanumeric03RegEx_72.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Numeric0110Alphanumeric03RegEx_72.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.Numeric0110Alphanumeric03RegEx_72.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Numeric0110Alphanumeric03RegEx_72.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Numeric0110Alphanumeric03RegEx_72.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Numeric0110Alphanumeric03RegEx_72.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.Numeric02Alphanumeric0342RegEx_73">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the Numeric02Alphanumeric0342RegEx method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.Numeric02Alphanumeric0342RegEx_73.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Numeric02Alphanumeric0342RegEx_73.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.Numeric02Alphanumeric0342RegEx_73.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Numeric02Alphanumeric0342RegEx_73.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.Numeric02Alphanumeric0342RegEx_73.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Numeric02Alphanumeric0342RegEx_73.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Numeric02Alphanumeric0342RegEx_73.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Numeric02Alphanumeric0342RegEx_73.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.Alpha02Alphanumeric0318RegEx_74">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the Alpha02Alphanumeric0318RegEx method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.Alpha02Alphanumeric0318RegEx_74.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Alpha02Alphanumeric0318RegEx_74.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.Alpha02Alphanumeric0318RegEx_74.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Alpha02Alphanumeric0318RegEx_74.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.Alpha02Alphanumeric0318RegEx_74.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Alpha02Alphanumeric0318RegEx_74.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Alpha02Alphanumeric0318RegEx_74.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Alpha02Alphanumeric0318RegEx_74.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.AlphanumericSpace0160RegEx_75">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the AlphanumericSpace0160RegEx method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.AlphanumericSpace0160RegEx_75.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.AlphanumericSpace0160RegEx_75.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.AlphanumericSpace0160RegEx_75.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.AlphanumericSpace0160RegEx_75.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.AlphanumericSpace0160RegEx_75.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.AlphanumericSpace0160RegEx_75.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.AlphanumericSpace0160RegEx_75.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.AlphanumericSpace0160RegEx_75.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.AlphanumericPlus0150RegEx_76">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the AlphanumericPlus0150RegEx method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.AlphanumericPlus0150RegEx_76.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.AlphanumericPlus0150RegEx_76.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.AlphanumericPlus0150RegEx_76.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.AlphanumericPlus0150RegEx_76.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.AlphanumericPlus0150RegEx_76.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.AlphanumericPlus0150RegEx_76.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.AlphanumericPlus0150RegEx_76.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.AlphanumericPlus0150RegEx_76.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.AlphanumericPlus2050RegEx_77">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the AlphanumericPlus2050RegEx method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.AlphanumericPlus2050RegEx_77.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.AlphanumericPlus2050RegEx_77.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.AlphanumericPlus2050RegEx_77.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.AlphanumericPlus2050RegEx_77.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.AlphanumericPlus2050RegEx_77.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.AlphanumericPlus2050RegEx_77.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.AlphanumericPlus2050RegEx_77.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.AlphanumericPlus2050RegEx_77.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.Alpha04Numeric07RegEx_78">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the Alpha04Numeric07RegEx method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.Alpha04Numeric07RegEx_78.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Alpha04Numeric07RegEx_78.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.Alpha04Numeric07RegEx_78.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Alpha04Numeric07RegEx_78.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.Alpha04Numeric07RegEx_78.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Alpha04Numeric07RegEx_78.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Alpha04Numeric07RegEx_78.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Alpha04Numeric07RegEx_78.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.Alpha04Numeric0103RegEx_79">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the Alpha04Numeric0103RegEx method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.Alpha04Numeric0103RegEx_79.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Alpha04Numeric0103RegEx_79.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.Alpha04Numeric0103RegEx_79.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Alpha04Numeric0103RegEx_79.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.Alpha04Numeric0103RegEx_79.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Alpha04Numeric0103RegEx_79.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Alpha04Numeric0103RegEx_79.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Alpha04Numeric0103RegEx_79.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.Alpha03Numeric03RegEx_80">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the Alpha03Numeric03RegEx method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.Alpha03Numeric03RegEx_80.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Alpha03Numeric03RegEx_80.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.Alpha03Numeric03RegEx_80.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Alpha03Numeric03RegEx_80.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.Alpha03Numeric03RegEx_80.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Alpha03Numeric03RegEx_80.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Alpha03Numeric03RegEx_80.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Alpha03Numeric03RegEx_80.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.Alpha02RegEx_81">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the Alpha02RegEx method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.Alpha02RegEx_81.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Alpha02RegEx_81.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.Alpha02RegEx_81.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Alpha02RegEx_81.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.Alpha02RegEx_81.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Alpha02RegEx_81.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Alpha02RegEx_81.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Alpha02RegEx_81.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.Invariant0212RegEx_82">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the Invariant0212RegEx method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.Invariant0212RegEx_82.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Invariant0212RegEx_82.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.Invariant0212RegEx_82.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Invariant0212RegEx_82.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.Invariant0212RegEx_82.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Invariant0212RegEx_82.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Invariant0212RegEx_82.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Invariant0212RegEx_82.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.Alpha02Invariant0327RegEx_83">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the Alpha02Invariant0327RegEx method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.Alpha02Invariant0327RegEx_83.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Alpha02Invariant0327RegEx_83.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.Alpha02Invariant0327RegEx_83.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Alpha02Invariant0327RegEx_83.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.Alpha02Invariant0327RegEx_83.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Alpha02Invariant0327RegEx_83.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Alpha02Invariant0327RegEx_83.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Alpha02Invariant0327RegEx_83.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.Numeric01RegEx_84">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the Numeric01RegEx method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.Numeric01RegEx_84.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Numeric01RegEx_84.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.Numeric01RegEx_84.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Numeric01RegEx_84.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.Numeric01RegEx_84.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Numeric01RegEx_84.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Numeric01RegEx_84.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Numeric01RegEx_84.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.Numeric05RegEx_85">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the Numeric05RegEx method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.Numeric05RegEx_85.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Numeric05RegEx_85.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.Numeric05RegEx_85.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Numeric05RegEx_85.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.Numeric05RegEx_85.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Numeric05RegEx_85.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Numeric05RegEx_85.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Numeric05RegEx_85.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.Numeric09RegEx_86">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the Numeric09RegEx method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.Numeric09RegEx_86.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Numeric09RegEx_86.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.Numeric09RegEx_86.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Numeric09RegEx_86.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.Numeric09RegEx_86.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Numeric09RegEx_86.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Numeric09RegEx_86.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Numeric09RegEx_86.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.Numeric14RegEx_87">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the Numeric14RegEx method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.Numeric14RegEx_87.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Numeric14RegEx_87.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.Numeric14RegEx_87.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Numeric14RegEx_87.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.Numeric14RegEx_87.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Numeric14RegEx_87.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Numeric14RegEx_87.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Numeric14RegEx_87.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.Numeric18RegEx_88">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the Numeric18RegEx method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.Numeric18RegEx_88.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Numeric18RegEx_88.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.Numeric18RegEx_88.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Numeric18RegEx_88.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.Numeric18RegEx_88.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Numeric18RegEx_88.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Numeric18RegEx_88.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Numeric18RegEx_88.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.Numeric0102RegEx_89">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the Numeric0102RegEx method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.Numeric0102RegEx_89.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Numeric0102RegEx_89.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.Numeric0102RegEx_89.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Numeric0102RegEx_89.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.Numeric0102RegEx_89.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Numeric0102RegEx_89.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Numeric0102RegEx_89.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Numeric0102RegEx_89.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.Numeric0406RegEx_90">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the Numeric0406RegEx method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.Numeric0406RegEx_90.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Numeric0406RegEx_90.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.Numeric0406RegEx_90.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Numeric0406RegEx_90.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.Numeric0406RegEx_90.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Numeric0406RegEx_90.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Numeric0406RegEx_90.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Numeric0406RegEx_90.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.Numeric0626RegEx_91">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the Numeric0626RegEx method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.Numeric0626RegEx_91.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Numeric0626RegEx_91.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.Numeric0626RegEx_91.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Numeric0626RegEx_91.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.Numeric0626RegEx_91.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Numeric0626RegEx_91.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Numeric0626RegEx_91.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Numeric0626RegEx_91.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.Numeric0712RegEx_92">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the Numeric0712RegEx method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.Numeric0712RegEx_92.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Numeric0712RegEx_92.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.Numeric0712RegEx_92.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Numeric0712RegEx_92.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.Numeric0712RegEx_92.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Numeric0712RegEx_92.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Numeric0712RegEx_92.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Numeric0712RegEx_92.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.Numeric0913RegEx_93">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the Numeric0913RegEx method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.Numeric0913RegEx_93.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Numeric0913RegEx_93.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.Numeric0913RegEx_93.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Numeric0913RegEx_93.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.Numeric0913RegEx_93.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Numeric0913RegEx_93.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Numeric0913RegEx_93.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Numeric0913RegEx_93.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.Numeric1012RegEx_94">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the Numeric1012RegEx method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.Numeric1012RegEx_94.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Numeric1012RegEx_94.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.Numeric1012RegEx_94.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Numeric1012RegEx_94.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.Numeric1012RegEx_94.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Numeric1012RegEx_94.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Numeric1012RegEx_94.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Numeric1012RegEx_94.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.Numeric1314RegEx_95">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the Numeric1314RegEx method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.Numeric1314RegEx_95.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Numeric1314RegEx_95.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.Numeric1314RegEx_95.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Numeric1314RegEx_95.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.Numeric1314RegEx_95.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Numeric1314RegEx_95.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Numeric1314RegEx_95.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Numeric1314RegEx_95.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.Numeric1426RegEx_96">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the Numeric1426RegEx method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.Numeric1426RegEx_96.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Numeric1426RegEx_96.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.Numeric1426RegEx_96.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Numeric1426RegEx_96.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.Numeric1426RegEx_96.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Numeric1426RegEx_96.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Numeric1426RegEx_96.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Numeric1426RegEx_96.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.NumericDot0110RegEx_97">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the NumericDot0110RegEx method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.NumericDot0110RegEx_97.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.NumericDot0110RegEx_97.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.NumericDot0110RegEx_97.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.NumericDot0110RegEx_97.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.NumericDot0110RegEx_97.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.NumericDot0110RegEx_97.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.NumericDot0110RegEx_97.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.NumericDot0110RegEx_97.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.NumericDot0120RegEx_98">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the NumericDot0120RegEx method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.NumericDot0120RegEx_98.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.NumericDot0120RegEx_98.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.NumericDot0120RegEx_98.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.NumericDot0120RegEx_98.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.NumericDot0120RegEx_98.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.NumericDot0120RegEx_98.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.NumericDot0120RegEx_98.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.NumericDot0120RegEx_98.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.NumericDot0105RegEx_99">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the NumericDot0105RegEx method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.NumericDot0105RegEx_99.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.NumericDot0105RegEx_99.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.NumericDot0105RegEx_99.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.NumericDot0105RegEx_99.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.NumericDot0105RegEx_99.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.NumericDot0105RegEx_99.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.NumericDot0105RegEx_99.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.NumericDot0105RegEx_99.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.NumericDot0106RegEx_100">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the NumericDot0106RegEx method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.NumericDot0106RegEx_100.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.NumericDot0106RegEx_100.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.NumericDot0106RegEx_100.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.NumericDot0106RegEx_100.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.NumericDot0106RegEx_100.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.NumericDot0106RegEx_100.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.NumericDot0106RegEx_100.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.NumericDot0106RegEx_100.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.MinusNumeric0104RegEx_101">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the MinusNumeric0104RegEx method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.MinusNumeric0104RegEx_101.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.MinusNumeric0104RegEx_101.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.MinusNumeric0104RegEx_101.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.MinusNumeric0104RegEx_101.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.MinusNumeric0104RegEx_101.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.MinusNumeric0104RegEx_101.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.MinusNumeric0104RegEx_101.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.MinusNumeric0104RegEx_101.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.MatchDataIdentifierRegex_102">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the MatchDataIdentifierRegex method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.MatchDataIdentifierRegex_102.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.MatchDataIdentifierRegex_102.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.MatchDataIdentifierRegex_102.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.MatchDataIdentifierRegex_102.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.MatchDataIdentifierRegex_102.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.MatchDataIdentifierRegex_102.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.MatchDataIdentifierRegex_102.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.MatchDataIdentifierRegex_102.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.Utilities">
            <summary>Helper methods used by generated <see cref="T:System.Text.RegularExpressions.Regex"/>-derived implementations.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.Utilities.s_defaultTimeout">
            <summary>Default timeout value set in <see cref="T:System.AppContext"/>, or <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout"/> if none was set.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.Utilities.s_hasTimeout">
            <summary>Whether <see cref="F:System.Text.RegularExpressions.Generated.Utilities.s_defaultTimeout"/> is non-infinite.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Utilities.IndexOfAnyDigit(System.ReadOnlySpan{System.Char})">
            <summary>Finds the next index of any character that matches a Unicode digit.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Utilities.IndexOfNonAsciiOrAny_866A747AB9129726AFD9A0BDC044B2D5BD6F9EDFA9A0E1F38EFCBAB2C1ECBE82(System.ReadOnlySpan{System.Char})">
            <summary>Finds the next index of any character that matches a character in the set [0-9\d\d].</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Utilities.IndexOfNonAsciiOrAny_98419BE3621AA428E830AB4D6EA3C2C1C6A30876EB80F52A9F0FC428C4ECA47E(System.ReadOnlySpan{System.Char})">
            <summary>Finds the next index of any character that matches a character in the set [-\d].</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Utilities.StackPop(System.Int32[],System.Int32@,System.Int32@,System.Int32@)">
            <summary>Pops 2 values from the backtracking stack.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Utilities.StackPush(System.Int32[]@,System.Int32@,System.Int32)">
            <summary>Pushes 1 value onto the backtracking stack.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Utilities.StackPush(System.Int32[]@,System.Int32@,System.Int32,System.Int32)">
            <summary>Pushes 2 values onto the backtracking stack.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Utilities.StackPush(System.Int32[]@,System.Int32@,System.Int32,System.Int32,System.Int32)">
            <summary>Pushes 3 values onto the backtracking stack.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.Utilities.s_asciiExceptDigits">
            <summary>Supports searching for characters in or not in "\0\u0001\u0002\u0003\u0004\u0005\u0006\a\b\t\n\v\f\r\u000e\u000f\u0010\u0011\u0012\u0013\u0014\u0015\u0016\u0017\u0018\u0019\u001a\u001b\u001c\u001d\u001e\u001f !\"#$%&amp;'()*+,-./:;&lt;=&gt;?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~\u007f".</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.Utilities.s_ascii_100FF03FEFFFF0700000000">
            <summary>Supports searching for characters in or not in " 0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ".</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.Utilities.s_ascii_20FF03FEFFFF0700000000">
            <summary>Supports searching for characters in or not in "-0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ".</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.Utilities.s_ascii_40FF030000000000000000">
            <summary>Supports searching for characters in or not in ".0123456789".</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.Utilities.s_ascii_8FF030000000000000000">
            <summary>Supports searching for characters in or not in "+0123456789".</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.Utilities.s_ascii_8FF03FEFFFF0700000000">
            <summary>Supports searching for characters in or not in "+0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ".</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.Utilities.s_ascii_A0FF03FEFFFF0700000000">
            <summary>Supports searching for characters in or not in "-/0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ".</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.Utilities.s_ascii_E6F7FFFFFEFFFF87FEFFFF07">
            <summary>Supports searching for characters in or not in "!\"%&amp;'()*,-./0123456789:;&lt;=&gt;?ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz".</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.Utilities.s_ascii_E6FFFFFFFEFFFF87FEFFFF07">
            <summary>Supports searching for characters in or not in "!\"%&amp;'()*+,-./0123456789:;&lt;=&gt;?ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz".</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.Utilities.s_ascii_FF03FEFFFF0700000000">
            <summary>Supports searching for characters in or not in "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ".</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.Utilities.s_ascii_FFFFFFFFFFDF00FCFFFFFFFFFFFFFFFF">
            <summary>Supports searching for characters in or not in "\0\u0001\u0002\u0003\u0004\u0005\u0006\a\b\t\n\v\f\r\u000e\u000f\u0010\u0011\u0012\u0013\u0014\u0015\u0016\u0017\u0018\u0019\u001a\u001b\u001c\u001d\u001e\u001f !\"#$%&amp;'()*+,./:;&lt;=&gt;?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~\u007f".</summary>
        </member>
    </members>
</doc>
